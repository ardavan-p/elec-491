ARM GAS  /tmp/cc4bPAnR.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_TIM_PeriodElapsedCallback
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	HAL_TIM_PeriodElapsedCallback:
  25              	.LVL0:
  26              	.LFB70:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   * @author         : Ardavan Pourkeramati
   7:Core/Src/main.c ****   ******************************************************************************
   8:Core/Src/main.c ****   * @attention
   9:Core/Src/main.c ****   *
  10:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  11:Core/Src/main.c ****   * All rights reserved.
  12:Core/Src/main.c ****   *
  13:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  14:Core/Src/main.c ****   * in the root directory of this software component.
  15:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "can.h"
  23:Core/Src/main.c **** #include "spi.h"
  24:Core/Src/main.c **** #include "tim.h"
  25:Core/Src/main.c **** #include "usart.h"
  26:Core/Src/main.c **** #include "gpio.h"
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  30:Core/Src/main.c **** #include "adf4351.h"
  31:Core/Src/main.c **** #include "nrf24l01.h"
ARM GAS  /tmp/cc4bPAnR.s 			page 2


  32:Core/Src/main.c **** #include <stdio.h>
  33:Core/Src/main.c **** #include <stdbool.h>
  34:Core/Src/main.c **** /* USER CODE END Includes */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  37:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* USER CODE END PTD */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  42:Core/Src/main.c **** /* USER CODE BEGIN PD */
  43:Core/Src/main.c **** #define FHSS_NUM_FREQS (100)
  44:Core/Src/main.c **** /* USER CODE END PD */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  47:Core/Src/main.c **** /* USER CODE BEGIN PM */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* USER CODE END PM */
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* USER CODE BEGIN PV */
  54:Core/Src/main.c **** const uint64_t fhss_freqs[FHSS_NUM_FREQS] = {
  55:Core/Src/main.c ****     915564235, 904440541, 903148600, 904227128, 917506829, 
  56:Core/Src/main.c ****     909397973, 908812571, 915449869, 919254899, 926507321, 
  57:Core/Src/main.c ****     925822447, 923067571, 903557369, 916691446, 912408403, 
  58:Core/Src/main.c ****     915808206, 903846361, 915402520, 906336386, 902037364, 
  59:Core/Src/main.c ****     909321452, 907231759, 918789091, 905750371, 923042615, 
  60:Core/Src/main.c ****     906372704, 912755720, 904459906, 906370088, 923731407, 
  61:Core/Src/main.c ****     903472249, 927657559, 912651500, 918619844, 925694767, 
  62:Core/Src/main.c ****     927554893, 919457550, 916626225, 906220683, 920235783, 
  63:Core/Src/main.c ****     921967008, 902299182, 911944043, 906843950, 926112279, 
  64:Core/Src/main.c ****     910403184, 923919218, 918063135, 924158523, 921292666, 
  65:Core/Src/main.c ****     904810996, 905714947, 913249837, 914091121, 925623877, 
  66:Core/Src/main.c ****     925355688, 906284260, 920917239, 917981303, 905593593, 
  67:Core/Src/main.c ****     917042242, 902399063, 923820062, 926307788, 909535172, 
  68:Core/Src/main.c ****     907539445, 925176093, 904984611, 909284218, 919224644, 
  69:Core/Src/main.c ****     905772047, 920586961, 916456393, 907262194, 916956907, 
  70:Core/Src/main.c ****     909592341, 924544342, 926980836, 922475339, 924512210, 
  71:Core/Src/main.c ****     926230896, 917236004, 912573921, 903178029, 924828246, 
  72:Core/Src/main.c ****     923296754, 916947099, 910847903, 926148369, 914389275, 
  73:Core/Src/main.c ****     915863526, 911243652, 904026491, 904906841, 912758865, 
  74:Core/Src/main.c ****     903310541, 907514837, 926261994, 927272190, 903953924
  75:Core/Src/main.c **** };
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** /* USER CODE END PV */
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  80:Core/Src/main.c **** void SystemClock_Config(void);
  81:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  82:Core/Src/main.c **** void cmd_sm_init(void);
  83:Core/Src/main.c **** void read_back_config(void);
  84:Core/Src/main.c **** /* USER CODE END PFP */
  85:Core/Src/main.c **** 
  86:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  87:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  88:Core/Src/main.c **** 
ARM GAS  /tmp/cc4bPAnR.s 			page 3


  89:Core/Src/main.c **** /* USER CODE END 0 */
  90:Core/Src/main.c **** 
  91:Core/Src/main.c **** /**
  92:Core/Src/main.c ****   * @brief  The application entry point.
  93:Core/Src/main.c ****   * @retval int
  94:Core/Src/main.c ****   */
  95:Core/Src/main.c **** int main(void)
  96:Core/Src/main.c **** {
  97:Core/Src/main.c **** 
  98:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* USER CODE END 1 */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 105:Core/Src/main.c ****   HAL_Init();
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****   // Disable buffering for stdout:
 110:Core/Src/main.c ****   setvbuf(stdout, NULL, _IONBF, 0);
 111:Core/Src/main.c **** 
 112:Core/Src/main.c ****   /* USER CODE END Init */
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   /* Configure the system clock */
 115:Core/Src/main.c ****   SystemClock_Config();
 116:Core/Src/main.c **** 
 117:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****   /* USER CODE END SysInit */
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****   /* Initialize all configured peripherals */
 122:Core/Src/main.c ****   MX_GPIO_Init();
 123:Core/Src/main.c ****   MX_SPI1_Init();
 124:Core/Src/main.c ****   MX_TIM2_Init();
 125:Core/Src/main.c ****   MX_SPI2_Init();
 126:Core/Src/main.c ****   MX_CAN_Init();
 127:Core/Src/main.c ****   MX_USART3_UART_Init();
 128:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****   // Set up initial state for SPI IO pins:
 131:Core/Src/main.c ****   HAL_GPIO_WritePin(SPI1_CSn_GPIO_Port, SPI1_CSn_Pin, 1);
 132:Core/Src/main.c ****   HAL_GPIO_WritePin(SPI1_LD_GPIO_Port, SPI1_LD_Pin, 1);
 133:Core/Src/main.c **** 
 134:Core/Src/main.c ****   // PTN - SN pair status:
 135:Core/Src/main.c ****   bool ptn_sn_paired = false;
 136:Core/Src/main.c ****   uint8_t paired_sn_id = SN_ID_UNPAIRED;
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   // PTN ID Detection:
 139:Core/Src/main.c ****   uint8_t ptn_id = 0;
 140:Core/Src/main.c ****   if (HAL_GPIO_ReadPin(PTN_ID_Port, PTN_ID_Pin) == 1)
 141:Core/Src/main.c ****   {
 142:Core/Src/main.c ****     ptn_id = PTN_1;
 143:Core/Src/main.c ****   }
 144:Core/Src/main.c ****   else
 145:Core/Src/main.c ****   {
ARM GAS  /tmp/cc4bPAnR.s 			page 4


 146:Core/Src/main.c ****     ptn_id = PTN_2;
 147:Core/Src/main.c ****   }
 148:Core/Src/main.c ****   
 149:Core/Src/main.c ****   // Initialize the ADF4351 and keep it off:
 150:Core/Src/main.c ****   cmd_sm_init();
 151:Core/Src/main.c ****   adf4350_out_altvoltage0_powerdown(1);
 152:Core/Src/main.c **** 
 153:Core/Src/main.c ****   // NRF24L01 chip enable (CE):
 154:Core/Src/main.c ****   HAL_GPIO_WritePin(CHIP_ENABLE_GPIO_Port, CHIP_ENABLE_Pin, 1);
 155:Core/Src/main.c **** 
 156:Core/Src/main.c ****   // CAN Setup:
 157:Core/Src/main.c ****   CAN_FilterTypeDef can_filter = {
 158:Core/Src/main.c ****       .FilterIdHigh = (uint32_t)(PTN_REQUEST_ID << 5 | 0x0000),
 159:Core/Src/main.c ****       .FilterIdLow = 0,
 160:Core/Src/main.c ****       .FilterMaskIdHigh = (uint32_t)(PTN_RESET << 5 | 0x0000),
 161:Core/Src/main.c ****       .FilterMaskIdLow = 0,
 162:Core/Src/main.c ****       .FilterFIFOAssignment = CAN_FILTER_FIFO0,
 163:Core/Src/main.c ****       .FilterBank = 0,
 164:Core/Src/main.c ****       .FilterMode = CAN_FILTERMODE_IDLIST,
 165:Core/Src/main.c ****       .FilterScale = CAN_FILTERSCALE_32BIT,
 166:Core/Src/main.c ****       .FilterActivation = CAN_FILTER_ENABLE,
 167:Core/Src/main.c ****       .SlaveStartFilterBank = 0,
 168:Core/Src/main.c ****   };
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****   HAL_CAN_ConfigFilter(&hcan, &can_filter);
 171:Core/Src/main.c **** 
 172:Core/Src/main.c ****   HAL_CAN_Start(&hcan);
 173:Core/Src/main.c **** 
 174:Core/Src/main.c ****   CAN_TxHeaderTypeDef tx_header = {
 175:Core/Src/main.c ****       .StdId = PTN_RESPONSE_ID,
 176:Core/Src/main.c ****       .ExtId = 0,
 177:Core/Src/main.c ****       .IDE = CAN_ID_STD,
 178:Core/Src/main.c ****       .RTR = CAN_RTR_DATA,
 179:Core/Src/main.c ****       .DLC = CAN_MSG_FRAME_LEN_BYTES,
 180:Core/Src/main.c ****       .TransmitGlobalTime = DISABLE,
 181:Core/Src/main.c ****   };
 182:Core/Src/main.c **** 
 183:Core/Src/main.c ****   uint8_t can_tx_payload[CAN_MSG_FRAME_LEN_BYTES] = {0};
 184:Core/Src/main.c ****   uint8_t can_rx_payload[CAN_MSG_FRAME_LEN_BYTES] = {0};
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   HAL_StatusTypeDef can_tx_status = HAL_OK;
 187:Core/Src/main.c ****   HAL_StatusTypeDef can_rx_status = HAL_OK;
 188:Core/Src/main.c **** 
 189:Core/Src/main.c ****   CAN_RxHeaderTypeDef rx_header = {0};
 190:Core/Src/main.c ****   uint32_t can_tx_mailbox = 0;
 191:Core/Src/main.c **** 
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****   // NRF24L01 Setup:
 194:Core/Src/main.c ****   uint8_t tx_payload[MAX_DATA_BYTES] = {0};
 195:Core/Src/main.c ****   uint8_t rf_payload[PAYLOAD_SZ_BYTES] = {0};
 196:Core/Src/main.c **** 
 197:Core/Src/main.c ****   // [REQUIRED] Make sure to power on the device
 198:Core/Src/main.c ****   tx_payload[0] = 0b00111111;
 199:Core/Src/main.c ****   tx_spi_cmd(&hspi2, W_REGISTER(CONFIG_REGISTER), tx_payload, 1);
 200:Core/Src/main.c ****   HAL_Delay(500);
 201:Core/Src/main.c ****   
 202:Core/Src/main.c ****   // [REQUIRED] Make sure to power on the device
ARM GAS  /tmp/cc4bPAnR.s 			page 5


 203:Core/Src/main.c ****   tx_payload[0] = 0b00111111;
 204:Core/Src/main.c ****   tx_spi_cmd(&hspi2, W_REGISTER(CONFIG_REGISTER), tx_payload, 1);
 205:Core/Src/main.c **** 
 206:Core/Src/main.c ****   // [REQUIRED] Set payload size for pipe 0
 207:Core/Src/main.c ****   tx_payload[0] = PAYLOAD_SZ_BYTES;
 208:Core/Src/main.c ****   tx_spi_cmd(&hspi2, W_REGISTER(RX_PW_P0), tx_payload, 1);
 209:Core/Src/main.c **** 
 210:Core/Src/main.c ****   // [REQUIRED] Set the RF configuration
 211:Core/Src/main.c ****   NrfRfSetup_t rf_config = {.data_power = ZERO_DBM, .data_rate = TWO_MBPS};
 212:Core/Src/main.c ****   nrf24l01_setup_rf(&hspi2, &rf_config);
 213:Core/Src/main.c **** 
 214:Core/Src/main.c ****   tx_spi_cmd(&hspi2, FLUSH_RX, NULL, 0);
 215:Core/Src/main.c **** 
 216:Core/Src/main.c ****   // Read back the configs (for debugging):
 217:Core/Src/main.c ****   read_back_config();
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****   /* USER CODE END 2 */
 220:Core/Src/main.c **** 
 221:Core/Src/main.c ****   /* Infinite loop */
 222:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 223:Core/Src/main.c ****   while (1)
 224:Core/Src/main.c ****   {
 225:Core/Src/main.c ****     // Ensure that RF output is off:
 226:Core/Src/main.c ****     adf4350_out_altvoltage0_powerdown(1);
 227:Core/Src/main.c **** 
 228:Core/Src/main.c ****     // Wait for CAN message:
 229:Core/Src/main.c ****     printf("\n\rWaiting for CAN");
 230:Core/Src/main.c ****     while(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) <= 0);
 231:Core/Src/main.c ****     printf("\n\rCAN received");
 232:Core/Src/main.c ****     can_rx_status = HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &rx_header, can_rx_payload);
 233:Core/Src/main.c **** 
 234:Core/Src/main.c ****     // Decode the CAN message:
 235:Core/Src/main.c ****     const uint16_t ptn_can_id = rx_header.StdId;
 236:Core/Src/main.c ****     const uint16_t received_ptn_id = can_rx_payload[0];
 237:Core/Src/main.c ****     switch (ptn_can_id)
 238:Core/Src/main.c ****     {
 239:Core/Src/main.c ****       case (PTN_REQUEST_ID):
 240:Core/Src/main.c ****       {
 241:Core/Src/main.c ****         if (received_ptn_id == ptn_id)
 242:Core/Src/main.c ****         {
 243:Core/Src/main.c ****           goto request_handle;
 244:Core/Src/main.c ****         }
 245:Core/Src/main.c ****         else
 246:Core/Src/main.c ****         {
 247:Core/Src/main.c ****           goto end_while;
 248:Core/Src/main.c ****         }
 249:Core/Src/main.c ****       }
 250:Core/Src/main.c ****       break;
 251:Core/Src/main.c **** 
 252:Core/Src/main.c ****       case (PTN_RESET):
 253:Core/Src/main.c ****       {
 254:Core/Src/main.c ****         ptn_sn_paired = false;
 255:Core/Src/main.c ****         paired_sn_id = SN_ID_UNPAIRED;
 256:Core/Src/main.c ****         goto end_while;
 257:Core/Src/main.c ****       }
 258:Core/Src/main.c ****       break;
 259:Core/Src/main.c **** 
ARM GAS  /tmp/cc4bPAnR.s 			page 6


 260:Core/Src/main.c ****       default:
 261:Core/Src/main.c ****       {
 262:Core/Src/main.c ****         goto end_while;
 263:Core/Src/main.c ****       }
 264:Core/Src/main.c ****       break;
 265:Core/Src/main.c ****     }
 266:Core/Src/main.c **** 
 267:Core/Src/main.c **** request_handle:
 268:Core/Src/main.c ****     // When CAN message received, turn in RF power and frequency hopping:
 269:Core/Src/main.c ****     adf4350_out_altvoltage0_powerdown(0);
 270:Core/Src/main.c ****     HAL_TIM_Base_Start_IT(&htim2);
 271:Core/Src/main.c **** 
 272:Core/Src/main.c ****     // Prepare to receive data from NRF24L01:
 273:Core/Src/main.c ****     int num_rx_msgs = 0;
 274:Core/Src/main.c ****     int num_uniq_msgs = 0;
 275:Core/Src/main.c ****     uint32_t prev_rand_id = 0;
 276:Core/Src/main.c **** 
 277:Core/Src/main.c ****     uint8_t cur_status = 0;
 278:Core/Src/main.c ****     uint8_t rx_fifo_empty = 1;
 279:Core/Src/main.c ****     uint8_t fifo_status = 0;
 280:Core/Src/main.c ****     uint8_t rxbuffer[RX_BUF_SZ_BYTES] = {0};
 281:Core/Src/main.c **** 
 282:Core/Src/main.c ****     uint32_t ref_time = HAL_GetTick();
 283:Core/Src/main.c ****     uint32_t millis_time = HAL_GetTick() - ref_time;
 284:Core/Src/main.c **** 
 285:Core/Src/main.c ****     uint8_t ptn_err = PTN_OK;
 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****     // Poll the NRF24L01 until data is received. Start a timeout timer so RF output is not on indef
 288:Core/Src/main.c ****     printf("\n\rWaiting for NRF");
 289:Core/Src/main.c ****     while((!STATUS_RX_DR(nrf24l01_get_status(&hspi2))) && millis_time < NRF24L01_RX_TIMEOUT)
 290:Core/Src/main.c ****     {
 291:Core/Src/main.c ****       millis_time = HAL_GetTick() - ref_time;
 292:Core/Src/main.c ****     }
 293:Core/Src/main.c ****     printf("\n\rNRF received");
 294:Core/Src/main.c **** 
 295:Core/Src/main.c ****     sensor_msg_t rx_msg = {0};
 296:Core/Src/main.c **** 
 297:Core/Src/main.c ****     if (millis_time < NRF24L01_RX_TIMEOUT)
 298:Core/Src/main.c ****     {
 299:Core/Src/main.c ****       ptn_err = PTN_OK;
 300:Core/Src/main.c ****       do {
 301:Core/Src/main.c ****         
 302:Core/Src/main.c ****         // Step 1 - Read the RX payload:
 303:Core/Src/main.c ****         tx_rx_spi_cmd(&hspi2, R_RX_PAYLOAD, NULL, 0, rxbuffer, PAYLOAD_SZ_BYTES + 1);
 304:Core/Src/main.c **** 
 305:Core/Src/main.c ****         num_rx_msgs++;
 306:Core/Src/main.c **** 
 307:Core/Src/main.c ****         // Unpack the message into its components:
 308:Core/Src/main.c ****         memcpy((void*)(&rx_msg), (void*)(&rxbuffer), PAYLOAD_SZ_BYTES);
 309:Core/Src/main.c **** 
 310:Core/Src/main.c ****         if (rx_msg.msg_id != prev_rand_id) {
 311:Core/Src/main.c ****           num_uniq_msgs++;
 312:Core/Src/main.c ****           prev_rand_id = rx_msg.msg_id;
 313:Core/Src/main.c ****         }
 314:Core/Src/main.c **** 
 315:Core/Src/main.c ****         printf("[m: %d] [u: %d] Received message with id = 0x%04x, node_id = 0x%02x! pressure = %d,
 316:Core/Src/main.c ****             num_rx_msgs, num_uniq_msgs, rx_msg.msg_id, rx_msg.node_id, rx_msg.pressure, rx_msg.temp
ARM GAS  /tmp/cc4bPAnR.s 			page 7


 317:Core/Src/main.c **** 
 318:Core/Src/main.c ****         // Clear out the RX buffer:
 319:Core/Src/main.c ****         memset(&rxbuffer, 0, sizeof(rxbuffer));
 320:Core/Src/main.c **** 
 321:Core/Src/main.c ****         // Step 2 - Clear the RX_DR IRQ bit:
 322:Core/Src/main.c ****         tx_payload[0] = 0b01000000;
 323:Core/Src/main.c ****         tx_spi_cmd(&hspi2, W_REGISTER(STATUS), tx_payload, 1);
 324:Core/Src/main.c **** 
 325:Core/Src/main.c ****         // Step 3 - Check FIFO_STATUS to see if there's any more messages:
 326:Core/Src/main.c ****         tx_rx_spi_cmd(&hspi2, R_REGISTER(FIFO_STATUS), NULL, 0, rxbuffer, 1);
 327:Core/Src/main.c ****         fifo_status = rxbuffer[0];
 328:Core/Src/main.c ****         rx_fifo_empty = FIFO_STATUS_RX_EMPTY(fifo_status);
 329:Core/Src/main.c **** 
 330:Core/Src/main.c ****       } while (!rx_fifo_empty);
 331:Core/Src/main.c ****     }
 332:Core/Src/main.c ****     else
 333:Core/Src/main.c ****     {
 334:Core/Src/main.c ****       ptn_err = PTN_ERROR;
 335:Core/Src/main.c ****       printf("\n\rERROR: Timeout");
 336:Core/Src/main.c ****     }
 337:Core/Src/main.c ****     
 338:Core/Src/main.c ****     // Power down the RF output:
 339:Core/Src/main.c ****     HAL_TIM_Base_Stop_IT(&htim2);
 340:Core/Src/main.c ****     adf4350_out_altvoltage0_powerdown(1);
 341:Core/Src/main.c **** 
 342:Core/Src/main.c ****     // If this request is right after a reset command, pair the received SN to this PTN:
 343:Core/Src/main.c ****     if (ptn_sn_paired == false)
 344:Core/Src/main.c ****     {
 345:Core/Src/main.c ****       paired_sn_id = rx_msg.node_id;
 346:Core/Src/main.c ****       ptn_sn_paired = true;
 347:Core/Src/main.c ****     }
 348:Core/Src/main.c ****     
 349:Core/Src/main.c ****     if ((ptn_sn_paired == true) && (paired_sn_id == rx_msg.node_id))
 350:Core/Src/main.c ****     {
 351:Core/Src/main.c ****       // Pack and transmit CAN message if the SN ID is correct:
 352:Core/Src/main.c ****       printf("\n\rSending back PTN RESPONSE");
 353:Core/Src/main.c ****       *((uint16_t*)can_tx_payload) = rx_msg.pressure;
 354:Core/Src/main.c ****       *((uint16_t*)can_tx_payload + 1) = rx_msg.temperature;
 355:Core/Src/main.c ****       *((uint8_t*)can_tx_payload + 4) = ptn_id;
 356:Core/Src/main.c ****       *((uint8_t*)can_tx_payload + 5) = rx_msg.node_id;
 357:Core/Src/main.c ****       *((uint8_t*)can_tx_payload + 6) = ptn_err;
 358:Core/Src/main.c **** 
 359:Core/Src/main.c ****       while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) <= 0);
 360:Core/Src/main.c ****       can_tx_status = HAL_CAN_AddTxMessage(&hcan, &tx_header, can_tx_payload, &can_tx_mailbox);
 361:Core/Src/main.c ****     }
 362:Core/Src/main.c **** 
 363:Core/Src/main.c **** 
 364:Core/Src/main.c **** end_while:
 365:Core/Src/main.c ****     // Ensure the 
 366:Core/Src/main.c ****     adf4350_out_altvoltage0_powerdown(1);
 367:Core/Src/main.c ****     /* USER CODE END WHILE */
 368:Core/Src/main.c **** 
 369:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 370:Core/Src/main.c ****   }  
 371:Core/Src/main.c ****   /* USER CODE END 3 */
 372:Core/Src/main.c **** }
 373:Core/Src/main.c **** 
ARM GAS  /tmp/cc4bPAnR.s 			page 8


 374:Core/Src/main.c **** /**
 375:Core/Src/main.c ****   * @brief System Clock Configuration
 376:Core/Src/main.c ****   * @retval None
 377:Core/Src/main.c ****   */
 378:Core/Src/main.c **** void SystemClock_Config(void)
 379:Core/Src/main.c **** {
 380:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 381:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 382:Core/Src/main.c **** 
 383:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 384:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 385:Core/Src/main.c ****   */
 386:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 387:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 388:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 389:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 390:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 391:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 392:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 393:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 394:Core/Src/main.c ****   {
 395:Core/Src/main.c ****     Error_Handler();
 396:Core/Src/main.c ****   }
 397:Core/Src/main.c **** 
 398:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 399:Core/Src/main.c ****   */
 400:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 401:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 402:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 403:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 404:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 405:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 406:Core/Src/main.c **** 
 407:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 408:Core/Src/main.c ****   {
 409:Core/Src/main.c ****     Error_Handler();
 410:Core/Src/main.c ****   }
 411:Core/Src/main.c **** }
 412:Core/Src/main.c **** 
 413:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 414:Core/Src/main.c **** 
 415:Core/Src/main.c **** 
 416:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
 417:Core/Src/main.c **** {
  28              		.loc 1 417 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 417 1 is_stmt 0 view .LVU1
  33 0000 10B5     		push	{r4, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 14, -4
 418:Core/Src/main.c ****   static uint8_t i = 0;
  38              		.loc 1 418 3 is_stmt 1 view .LVU2
 419:Core/Src/main.c ****   adf4350_out_altvoltage0_frequency(fhss_freqs[i]);
ARM GAS  /tmp/cc4bPAnR.s 			page 9


  39              		.loc 1 419 3 view .LVU3
  40              		.loc 1 419 47 is_stmt 0 view .LVU4
  41 0002 0A4C     		ldr	r4, .L3
  42 0004 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
  43 0006 0A4B     		ldr	r3, .L3+4
  44 0008 03EBC203 		add	r3, r3, r2, lsl #3
  45              		.loc 1 419 3 view .LVU5
  46 000c D3E90001 		ldrd	r0, [r3]
  47              	.LVL1:
  48              		.loc 1 419 3 view .LVU6
  49 0010 FFF7FEFF 		bl	adf4350_out_altvoltage0_frequency
  50              	.LVL2:
 420:Core/Src/main.c ****   i = (i + 1) % FHSS_NUM_FREQS;
  51              		.loc 1 420 3 is_stmt 1 view .LVU7
  52              		.loc 1 420 10 is_stmt 0 view .LVU8
  53 0014 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
  54 0016 0132     		adds	r2, r2, #1
  55              		.loc 1 420 15 view .LVU9
  56 0018 064B     		ldr	r3, .L3+8
  57 001a 83FB0213 		smull	r1, r3, r3, r2
  58 001e 5B11     		asrs	r3, r3, #5
  59 0020 6421     		movs	r1, #100
  60 0022 01FB1323 		mls	r3, r1, r3, r2
  61              		.loc 1 420 5 view .LVU10
  62 0026 2370     		strb	r3, [r4]
 421:Core/Src/main.c **** }
  63              		.loc 1 421 1 view .LVU11
  64 0028 10BD     		pop	{r4, pc}
  65              	.L4:
  66 002a 00BF     		.align	2
  67              	.L3:
  68 002c 00000000 		.word	.LANCHOR1
  69 0030 00000000 		.word	.LANCHOR0
  70 0034 1F85EB51 		.word	1374389535
  71              		.cfi_endproc
  72              	.LFE70:
  74              		.section	.text.cmd_sm_init,"ax",%progbits
  75              		.align	1
  76              		.global	cmd_sm_init
  77              		.syntax unified
  78              		.thumb
  79              		.thumb_func
  80              		.fpu softvfp
  82              	cmd_sm_init:
  83              	.LFB71:
 422:Core/Src/main.c **** 
 423:Core/Src/main.c **** 
 424:Core/Src/main.c **** adf4350_init_param pll_config;
 425:Core/Src/main.c **** 
 426:Core/Src/main.c **** void cmd_sm_init()
 427:Core/Src/main.c **** {
  84              		.loc 1 427 1 is_stmt 1 view -0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88 0000 10B5     		push	{r4, lr}
  89              	.LCFI1:
ARM GAS  /tmp/cc4bPAnR.s 			page 10


  90              		.cfi_def_cfa_offset 8
  91              		.cfi_offset 4, -8
  92              		.cfi_offset 14, -4
  93 0002 8CB0     		sub	sp, sp, #48
  94              	.LCFI2:
  95              		.cfi_def_cfa_offset 56
 428:Core/Src/main.c ****   // initialize pll_config structure
 429:Core/Src/main.c ****   pll_config.clkin = 25e6;
  96              		.loc 1 429 3 view .LVU13
  97              		.loc 1 429 20 is_stmt 0 view .LVU14
  98 0004 1F4C     		ldr	r4, .L7
  99 0006 204B     		ldr	r3, .L7+4
 100 0008 2360     		str	r3, [r4]
 430:Core/Src/main.c ****   pll_config.channel_spacing = 100;
 101              		.loc 1 430 3 is_stmt 1 view .LVU15
 102              		.loc 1 430 30 is_stmt 0 view .LVU16
 103 000a 6423     		movs	r3, #100
 104 000c 6360     		str	r3, [r4, #4]
 431:Core/Src/main.c ****   pll_config.power_up_frequency = 146e6;
 105              		.loc 1 431 3 is_stmt 1 view .LVU17
 106              		.loc 1 431 33 is_stmt 0 view .LVU18
 107 000e 1F4B     		ldr	r3, .L7+8
 108 0010 A360     		str	r3, [r4, #8]
 432:Core/Src/main.c ****   pll_config.reference_div_factor = 1;
 109              		.loc 1 432 3 is_stmt 1 view .LVU19
 110              		.loc 1 432 35 is_stmt 0 view .LVU20
 111 0012 0123     		movs	r3, #1
 112 0014 E360     		str	r3, [r4, #12]
 433:Core/Src/main.c ****   pll_config.reference_doubler_enable = 0;
 113              		.loc 1 433 3 is_stmt 1 view .LVU21
 114              		.loc 1 433 39 is_stmt 0 view .LVU22
 115 0016 0020     		movs	r0, #0
 116 0018 2074     		strb	r0, [r4, #16]
 434:Core/Src/main.c ****   pll_config.reference_div2_enable = 0;
 117              		.loc 1 434 3 is_stmt 1 view .LVU23
 118              		.loc 1 434 36 is_stmt 0 view .LVU24
 119 001a 6074     		strb	r0, [r4, #17]
 435:Core/Src/main.c ****   pll_config.phase_detector_polarity_positive_enable = 1;
 120              		.loc 1 435 3 is_stmt 1 view .LVU25
 121              		.loc 1 435 54 is_stmt 0 view .LVU26
 122 001c A374     		strb	r3, [r4, #18]
 436:Core/Src/main.c ****   pll_config.lock_detect_precision_6ns_enable = 0; // 10 ns
 123              		.loc 1 436 3 is_stmt 1 view .LVU27
 124              		.loc 1 436 47 is_stmt 0 view .LVU28
 125 001e E074     		strb	r0, [r4, #19]
 437:Core/Src/main.c ****   pll_config.lock_detect_function_integer_n_enable = 0; // Fractional pll
 126              		.loc 1 437 3 is_stmt 1 view .LVU29
 127              		.loc 1 437 52 is_stmt 0 view .LVU30
 128 0020 2075     		strb	r0, [r4, #20]
 438:Core/Src/main.c ****   pll_config.charge_pump_current = 7; //2.50
 129              		.loc 1 438 3 is_stmt 1 view .LVU31
 130              		.loc 1 438 34 is_stmt 0 view .LVU32
 131 0022 0722     		movs	r2, #7
 132 0024 A261     		str	r2, [r4, #24]
 439:Core/Src/main.c ****   pll_config.muxout_select = 6; // Digital Lock Detect Out
 133              		.loc 1 439 3 is_stmt 1 view .LVU33
 134              		.loc 1 439 28 is_stmt 0 view .LVU34
ARM GAS  /tmp/cc4bPAnR.s 			page 11


 135 0026 0622     		movs	r2, #6
 136 0028 E261     		str	r2, [r4, #28]
 440:Core/Src/main.c ****   pll_config.low_spur_mode_enable = 1; // higher noise, lower spurs.
 137              		.loc 1 440 3 is_stmt 1 view .LVU35
 138              		.loc 1 440 35 is_stmt 0 view .LVU36
 139 002a 84F82030 		strb	r3, [r4, #32]
 441:Core/Src/main.c ****   pll_config.cycle_slip_reduction_enable = 0;
 140              		.loc 1 441 3 is_stmt 1 view .LVU37
 141              		.loc 1 441 42 is_stmt 0 view .LVU38
 142 002e 84F82100 		strb	r0, [r4, #33]
 442:Core/Src/main.c ****   pll_config.charge_cancellation_enable = 0;
 143              		.loc 1 442 3 is_stmt 1 view .LVU39
 144              		.loc 1 442 41 is_stmt 0 view .LVU40
 145 0032 84F82200 		strb	r0, [r4, #34]
 443:Core/Src/main.c ****   pll_config.anti_backlash_3ns_enable = 0;
 146              		.loc 1 443 3 is_stmt 1 view .LVU41
 147              		.loc 1 443 39 is_stmt 0 view .LVU42
 148 0036 84F82300 		strb	r0, [r4, #35]
 444:Core/Src/main.c ****   pll_config.band_select_clock_mode_high_enable = 0; // low
 149              		.loc 1 444 3 is_stmt 1 view .LVU43
 150              		.loc 1 444 49 is_stmt 0 view .LVU44
 151 003a 84F82400 		strb	r0, [r4, #36]
 445:Core/Src/main.c ****   pll_config.clk_divider_12bit = 0;
 152              		.loc 1 445 3 is_stmt 1 view .LVU45
 153              		.loc 1 445 32 is_stmt 0 view .LVU46
 154 003e A062     		str	r0, [r4, #40]
 446:Core/Src/main.c ****   pll_config.clk_divider_mode = 0;
 155              		.loc 1 446 3 is_stmt 1 view .LVU47
 156              		.loc 1 446 31 is_stmt 0 view .LVU48
 157 0040 E062     		str	r0, [r4, #44]
 447:Core/Src/main.c ****   pll_config.aux_output_enable = 0;
 158              		.loc 1 447 3 is_stmt 1 view .LVU49
 159              		.loc 1 447 32 is_stmt 0 view .LVU50
 160 0042 84F83000 		strb	r0, [r4, #48]
 448:Core/Src/main.c ****   pll_config.aux_output_fundamental_enable = 0;
 161              		.loc 1 448 3 is_stmt 1 view .LVU51
 162              		.loc 1 448 44 is_stmt 0 view .LVU52
 163 0046 84F83100 		strb	r0, [r4, #49]
 449:Core/Src/main.c ****   pll_config.mute_till_lock_enable = 1;
 164              		.loc 1 449 3 is_stmt 1 view .LVU53
 165              		.loc 1 449 36 is_stmt 0 view .LVU54
 166 004a 84F83230 		strb	r3, [r4, #50]
 450:Core/Src/main.c ****   pll_config.output_power = 2; // +2 dBm
 167              		.loc 1 450 3 is_stmt 1 view .LVU55
 168              		.loc 1 450 27 is_stmt 0 view .LVU56
 169 004e 0223     		movs	r3, #2
 170 0050 6363     		str	r3, [r4, #52]
 451:Core/Src/main.c ****   pll_config.aux_output_power = ADF4541_POWER_N4_DBM;
 171              		.loc 1 451 3 is_stmt 1 view .LVU57
 172              		.loc 1 451 31 is_stmt 0 view .LVU58
 173 0052 A063     		str	r0, [r4, #56]
 452:Core/Src/main.c ****   adf4350_out_altvoltage0_powerdown(0); // power down PLL
 174              		.loc 1 452 3 is_stmt 1 view .LVU59
 175 0054 FFF7FEFF 		bl	adf4350_out_altvoltage0_powerdown
 176              	.LVL3:
 453:Core/Src/main.c ****   adf4350_setup(pll_config);
 177              		.loc 1 453 3 view .LVU60
ARM GAS  /tmp/cc4bPAnR.s 			page 12


 178 0058 EC46     		mov	ip, sp
 179 005a 04F1100E 		add	lr, r4, #16
 180 005e BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 181 0062 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 182 0066 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 183 006a ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 184 006e 9EE80700 		ldm	lr, {r0, r1, r2}
 185 0072 8CE80700 		stm	ip, {r0, r1, r2}
 186 0076 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 187 007a FFF7FEFF 		bl	adf4350_setup
 188              	.LVL4:
 454:Core/Src/main.c **** }
 189              		.loc 1 454 1 is_stmt 0 view .LVU61
 190 007e 0CB0     		add	sp, sp, #48
 191              	.LCFI3:
 192              		.cfi_def_cfa_offset 8
 193              		@ sp needed
 194 0080 10BD     		pop	{r4, pc}
 195              	.L8:
 196 0082 00BF     		.align	2
 197              	.L7:
 198 0084 00000000 		.word	.LANCHOR2
 199 0088 40787D01 		.word	25000000
 200 008c 80C8B308 		.word	146000000
 201              		.cfi_endproc
 202              	.LFE71:
 204              		.section	.rodata.read_back_config.str1.4,"aMS",%progbits,1
 205              		.align	2
 206              	.LC3:
 207 0000 0A0D436F 		.ascii	"\012\015Config: %x\000"
 207      6E666967 
 207      3A202578 
 207      00
 208 000d 000000   		.align	2
 209              	.LC4:
 210 0010 0A0D456E 		.ascii	"\012\015Enabled Data Pipes: %x\000"
 210      61626C65 
 210      64204461 
 210      74612050 
 210      69706573 
 211 0029 000000   		.align	2
 212              	.LC5:
 213 002c 0A0D5365 		.ascii	"\012\015Setup Retry: %x\000"
 213      74757020 
 213      52657472 
 213      793A2025 
 213      7800
 214 003e 0000     		.align	2
 215              	.LC6:
 216 0040 0A0D5246 		.ascii	"\012\015RF Channel: %x\000"
 216      20436861 
 216      6E6E656C 
 216      3A202578 
 216      00
 217 0051 000000   		.align	2
 218              	.LC7:
 219 0054 0A0D5246 		.ascii	"\012\015RF Setup: %x\000"
ARM GAS  /tmp/cc4bPAnR.s 			page 13


 219      20536574 
 219      75703A20 
 219      257800
 220 0063 00       		.align	2
 221              	.LC8:
 222 0064 0A0D5258 		.ascii	"\012\015RX Address High: %lx\012\015RX Address Low:"
 222      20416464 
 222      72657373 
 222      20486967 
 222      683A2025 
 223 008b 20256C78 		.ascii	" %lx\000"
 223      00
 224              		.align	2
 225              	.LC9:
 226 0090 0A0D5258 		.ascii	"\012\015RX_PW_P0: %x\000"
 226      5F50575F 
 226      50303A20 
 226      257800
 227 009f 00       		.align	2
 228              	.LC10:
 229 00a0 0A0D4665 		.ascii	"\012\015Feature: %x\000"
 229      61747572 
 229      653A2025 
 229      7800
 230              		.section	.text.read_back_config,"ax",%progbits
 231              		.align	1
 232              		.global	read_back_config
 233              		.syntax unified
 234              		.thumb
 235              		.thumb_func
 236              		.fpu softvfp
 238              	read_back_config:
 239              	.LFB72:
 455:Core/Src/main.c **** 
 456:Core/Src/main.c **** void read_back_config(void)
 457:Core/Src/main.c **** {
 240              		.loc 1 457 1 is_stmt 1 view -0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 64
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 245              	.LCFI4:
 246              		.cfi_def_cfa_offset 28
 247              		.cfi_offset 4, -28
 248              		.cfi_offset 5, -24
 249              		.cfi_offset 6, -20
 250              		.cfi_offset 7, -16
 251              		.cfi_offset 8, -12
 252              		.cfi_offset 9, -8
 253              		.cfi_offset 14, -4
 254 0004 93B0     		sub	sp, sp, #76
 255              	.LCFI5:
 256              		.cfi_def_cfa_offset 104
 458:Core/Src/main.c ****   uint8_t rx_buffer[RX_BUF_SZ_BYTES] = {0};
 257              		.loc 1 458 3 view .LVU63
 258              		.loc 1 458 11 is_stmt 0 view .LVU64
 259 0006 0024     		movs	r4, #0
ARM GAS  /tmp/cc4bPAnR.s 			page 14


 260 0008 0294     		str	r4, [sp, #8]
 261 000a 3C22     		movs	r2, #60
 262 000c 2146     		mov	r1, r4
 263 000e 03A8     		add	r0, sp, #12
 264 0010 FFF7FEFF 		bl	memset
 265              	.LVL5:
 459:Core/Src/main.c **** 
 460:Core/Src/main.c ****   tx_rx_spi_cmd(&hspi2, R_REGISTER(CONFIG_REGISTER), NULL, 0, rx_buffer, 1);
 266              		.loc 1 460 3 is_stmt 1 view .LVU65
 267 0014 504F     		ldr	r7, .L11
 268 0016 4FF00108 		mov	r8, #1
 269 001a CDF80480 		str	r8, [sp, #4]
 270 001e 02AD     		add	r5, sp, #8
 271 0020 0095     		str	r5, [sp]
 272 0022 2346     		mov	r3, r4
 273 0024 2246     		mov	r2, r4
 274 0026 2146     		mov	r1, r4
 275 0028 3846     		mov	r0, r7
 276 002a FFF7FEFF 		bl	tx_rx_spi_cmd
 277              	.LVL6:
 461:Core/Src/main.c ****   uint8_t config = rx_buffer[0];
 278              		.loc 1 461 3 view .LVU66
 462:Core/Src/main.c ****   printf("\n\rConfig: %x", config);
 279              		.loc 1 462 3 view .LVU67
 280 002e 9DF80810 		ldrb	r1, [sp, #8]	@ zero_extendqisi2
 281 0032 4A48     		ldr	r0, .L11+4
 282 0034 FFF7FEFF 		bl	printf
 283              	.LVL7:
 463:Core/Src/main.c ****   memset(&rx_buffer, 0, sizeof(rx_buffer));
 284              		.loc 1 463 3 view .LVU68
 285 0038 4026     		movs	r6, #64
 286 003a 3246     		mov	r2, r6
 287 003c 2146     		mov	r1, r4
 288 003e 2846     		mov	r0, r5
 289 0040 FFF7FEFF 		bl	memset
 290              	.LVL8:
 464:Core/Src/main.c **** 
 465:Core/Src/main.c ****   tx_rx_spi_cmd(&hspi2, R_REGISTER(EN_RXADDR), NULL, 0, rx_buffer, 1);
 291              		.loc 1 465 3 view .LVU69
 292 0044 CDF80480 		str	r8, [sp, #4]
 293 0048 0095     		str	r5, [sp]
 294 004a 2346     		mov	r3, r4
 295 004c 2246     		mov	r2, r4
 296 004e 0221     		movs	r1, #2
 297 0050 3846     		mov	r0, r7
 298 0052 FFF7FEFF 		bl	tx_rx_spi_cmd
 299              	.LVL9:
 466:Core/Src/main.c ****   uint8_t endp = rx_buffer[0];
 300              		.loc 1 466 3 view .LVU70
 467:Core/Src/main.c ****   printf("\n\rEnabled Data Pipes: %x", endp);
 301              		.loc 1 467 3 view .LVU71
 302 0056 9DF80810 		ldrb	r1, [sp, #8]	@ zero_extendqisi2
 303 005a 4148     		ldr	r0, .L11+8
 304 005c FFF7FEFF 		bl	printf
 305              	.LVL10:
 468:Core/Src/main.c ****   memset(&rx_buffer, 0, sizeof(rx_buffer));
 306              		.loc 1 468 3 view .LVU72
ARM GAS  /tmp/cc4bPAnR.s 			page 15


 307 0060 3246     		mov	r2, r6
 308 0062 2146     		mov	r1, r4
 309 0064 2846     		mov	r0, r5
 310 0066 FFF7FEFF 		bl	memset
 311              	.LVL11:
 469:Core/Src/main.c **** 
 470:Core/Src/main.c ****   tx_rx_spi_cmd(&hspi2, R_REGISTER(SETUP_RETR), NULL, 0, rx_buffer, 1);
 312              		.loc 1 470 3 view .LVU73
 313 006a CDF80480 		str	r8, [sp, #4]
 314 006e 0095     		str	r5, [sp]
 315 0070 2346     		mov	r3, r4
 316 0072 2246     		mov	r2, r4
 317 0074 0421     		movs	r1, #4
 318 0076 3846     		mov	r0, r7
 319 0078 FFF7FEFF 		bl	tx_rx_spi_cmd
 320              	.LVL12:
 471:Core/Src/main.c ****   uint8_t setup_retr = rx_buffer[0];
 321              		.loc 1 471 3 view .LVU74
 472:Core/Src/main.c ****   printf("\n\rSetup Retry: %x", setup_retr);
 322              		.loc 1 472 3 view .LVU75
 323 007c 9DF80810 		ldrb	r1, [sp, #8]	@ zero_extendqisi2
 324 0080 3848     		ldr	r0, .L11+12
 325 0082 FFF7FEFF 		bl	printf
 326              	.LVL13:
 473:Core/Src/main.c ****   memset(&rx_buffer, 0, sizeof(rx_buffer));
 327              		.loc 1 473 3 view .LVU76
 328 0086 3246     		mov	r2, r6
 329 0088 2146     		mov	r1, r4
 330 008a 2846     		mov	r0, r5
 331 008c FFF7FEFF 		bl	memset
 332              	.LVL14:
 474:Core/Src/main.c **** 
 475:Core/Src/main.c ****   tx_rx_spi_cmd(&hspi2, R_REGISTER(RF_CH), NULL, 0, rx_buffer, 1);
 333              		.loc 1 475 3 view .LVU77
 334 0090 CDF80480 		str	r8, [sp, #4]
 335 0094 0095     		str	r5, [sp]
 336 0096 2346     		mov	r3, r4
 337 0098 2246     		mov	r2, r4
 338 009a 0521     		movs	r1, #5
 339 009c 3846     		mov	r0, r7
 340 009e FFF7FEFF 		bl	tx_rx_spi_cmd
 341              	.LVL15:
 476:Core/Src/main.c ****   uint8_t rfch = rx_buffer[0];
 342              		.loc 1 476 3 view .LVU78
 477:Core/Src/main.c ****   printf("\n\rRF Channel: %x", rfch);
 343              		.loc 1 477 3 view .LVU79
 344 00a2 9DF80810 		ldrb	r1, [sp, #8]	@ zero_extendqisi2
 345 00a6 3048     		ldr	r0, .L11+16
 346 00a8 FFF7FEFF 		bl	printf
 347              	.LVL16:
 478:Core/Src/main.c ****   memset(&rx_buffer, 0, sizeof(rx_buffer));
 348              		.loc 1 478 3 view .LVU80
 349 00ac 3246     		mov	r2, r6
 350 00ae 2146     		mov	r1, r4
 351 00b0 2846     		mov	r0, r5
 352 00b2 FFF7FEFF 		bl	memset
 353              	.LVL17:
ARM GAS  /tmp/cc4bPAnR.s 			page 16


 479:Core/Src/main.c **** 
 480:Core/Src/main.c ****   tx_rx_spi_cmd(&hspi2, R_REGISTER(RF_SETUP), NULL, 0, rx_buffer, 1);
 354              		.loc 1 480 3 view .LVU81
 355 00b6 CDF80480 		str	r8, [sp, #4]
 356 00ba 0095     		str	r5, [sp]
 357 00bc 2346     		mov	r3, r4
 358 00be 2246     		mov	r2, r4
 359 00c0 0621     		movs	r1, #6
 360 00c2 3846     		mov	r0, r7
 361 00c4 FFF7FEFF 		bl	tx_rx_spi_cmd
 362              	.LVL18:
 481:Core/Src/main.c ****   uint8_t rfsetup = rx_buffer[0];
 363              		.loc 1 481 3 view .LVU82
 482:Core/Src/main.c ****   printf("\n\rRF Setup: %x", rfsetup);
 364              		.loc 1 482 3 view .LVU83
 365 00c8 9DF80810 		ldrb	r1, [sp, #8]	@ zero_extendqisi2
 366 00cc 2748     		ldr	r0, .L11+20
 367 00ce FFF7FEFF 		bl	printf
 368              	.LVL19:
 483:Core/Src/main.c ****   memset(&rx_buffer, 0, sizeof(rx_buffer));
 369              		.loc 1 483 3 view .LVU84
 370 00d2 3246     		mov	r2, r6
 371 00d4 2146     		mov	r1, r4
 372 00d6 2846     		mov	r0, r5
 373 00d8 FFF7FEFF 		bl	memset
 374              	.LVL20:
 484:Core/Src/main.c **** 
 485:Core/Src/main.c ****   tx_rx_spi_cmd(&hspi2, R_REGISTER(RX_ADDR_P0), NULL, 0, rx_buffer, 5);
 375              		.loc 1 485 3 view .LVU85
 376 00dc 4FF00509 		mov	r9, #5
 377 00e0 CDF80490 		str	r9, [sp, #4]
 378 00e4 0095     		str	r5, [sp]
 379 00e6 2346     		mov	r3, r4
 380 00e8 2246     		mov	r2, r4
 381 00ea 0A21     		movs	r1, #10
 382 00ec 3846     		mov	r0, r7
 383 00ee FFF7FEFF 		bl	tx_rx_spi_cmd
 384              	.LVL21:
 486:Core/Src/main.c ****   uint32_t rx_addr_p0_hi = *((uint32_t*)rx_buffer);
 385              		.loc 1 486 3 view .LVU86
 487:Core/Src/main.c ****   uint32_t rx_addr_p0_lo = *((uint32_t*)rx_buffer + 1);
 386              		.loc 1 487 3 view .LVU87
 488:Core/Src/main.c ****   printf("\n\rRX Address High: %lx\n\rRX Address Low: %lx", rx_addr_p0_hi, rx_addr_p0_lo);
 387              		.loc 1 488 3 view .LVU88
 388 00f2 039A     		ldr	r2, [sp, #12]
 389 00f4 0299     		ldr	r1, [sp, #8]
 390 00f6 1E48     		ldr	r0, .L11+24
 391 00f8 FFF7FEFF 		bl	printf
 392              	.LVL22:
 489:Core/Src/main.c ****   memset(&rx_buffer, 0, sizeof(rx_buffer));
 393              		.loc 1 489 3 view .LVU89
 394 00fc 3246     		mov	r2, r6
 395 00fe 2146     		mov	r1, r4
 396 0100 2846     		mov	r0, r5
 397 0102 FFF7FEFF 		bl	memset
 398              	.LVL23:
 490:Core/Src/main.c **** 
ARM GAS  /tmp/cc4bPAnR.s 			page 17


 491:Core/Src/main.c ****   tx_rx_spi_cmd(&hspi2, R_REGISTER(RX_PW_P0), NULL, 0, rx_buffer, 5);
 399              		.loc 1 491 3 view .LVU90
 400 0106 CDF80490 		str	r9, [sp, #4]
 401 010a 0095     		str	r5, [sp]
 402 010c 2346     		mov	r3, r4
 403 010e 2246     		mov	r2, r4
 404 0110 1121     		movs	r1, #17
 405 0112 3846     		mov	r0, r7
 406 0114 FFF7FEFF 		bl	tx_rx_spi_cmd
 407              	.LVL24:
 492:Core/Src/main.c ****   uint8_t rx_pw_p0 = rx_buffer[0];
 408              		.loc 1 492 3 view .LVU91
 493:Core/Src/main.c ****   printf("\n\rRX_PW_P0: %x", rx_pw_p0);
 409              		.loc 1 493 3 view .LVU92
 410 0118 9DF80810 		ldrb	r1, [sp, #8]	@ zero_extendqisi2
 411 011c 1548     		ldr	r0, .L11+28
 412 011e FFF7FEFF 		bl	printf
 413              	.LVL25:
 494:Core/Src/main.c ****   memset(&rx_buffer, 0, sizeof(rx_buffer));
 414              		.loc 1 494 3 view .LVU93
 415 0122 3246     		mov	r2, r6
 416 0124 2146     		mov	r1, r4
 417 0126 2846     		mov	r0, r5
 418 0128 FFF7FEFF 		bl	memset
 419              	.LVL26:
 495:Core/Src/main.c **** 
 496:Core/Src/main.c ****   tx_rx_spi_cmd(&hspi2, R_REGISTER(FEATURE), NULL, 0, rx_buffer, 1);
 420              		.loc 1 496 3 view .LVU94
 421 012c CDF80480 		str	r8, [sp, #4]
 422 0130 0095     		str	r5, [sp]
 423 0132 2346     		mov	r3, r4
 424 0134 2246     		mov	r2, r4
 425 0136 1D21     		movs	r1, #29
 426 0138 3846     		mov	r0, r7
 427 013a FFF7FEFF 		bl	tx_rx_spi_cmd
 428              	.LVL27:
 497:Core/Src/main.c ****   uint8_t feature = rx_buffer[0];
 429              		.loc 1 497 3 view .LVU95
 498:Core/Src/main.c ****   printf("\n\rFeature: %x", feature);
 430              		.loc 1 498 3 view .LVU96
 431 013e 9DF80810 		ldrb	r1, [sp, #8]	@ zero_extendqisi2
 432 0142 0D48     		ldr	r0, .L11+32
 433 0144 FFF7FEFF 		bl	printf
 434              	.LVL28:
 499:Core/Src/main.c ****   memset(&rx_buffer, 0, sizeof(rx_buffer));
 435              		.loc 1 499 3 view .LVU97
 436 0148 3246     		mov	r2, r6
 437 014a 2146     		mov	r1, r4
 438 014c 2846     		mov	r0, r5
 439 014e FFF7FEFF 		bl	memset
 440              	.LVL29:
 500:Core/Src/main.c **** }
 441              		.loc 1 500 1 is_stmt 0 view .LVU98
 442 0152 13B0     		add	sp, sp, #76
 443              	.LCFI6:
 444              		.cfi_def_cfa_offset 28
 445              		@ sp needed
ARM GAS  /tmp/cc4bPAnR.s 			page 18


 446 0154 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 447              	.L12:
 448              		.align	2
 449              	.L11:
 450 0158 00000000 		.word	hspi2
 451 015c 00000000 		.word	.LC3
 452 0160 10000000 		.word	.LC4
 453 0164 2C000000 		.word	.LC5
 454 0168 40000000 		.word	.LC6
 455 016c 54000000 		.word	.LC7
 456 0170 64000000 		.word	.LC8
 457 0174 90000000 		.word	.LC9
 458 0178 A0000000 		.word	.LC10
 459              		.cfi_endproc
 460              	.LFE72:
 462              		.section	.text.__io_putchar,"ax",%progbits
 463              		.align	1
 464              		.global	__io_putchar
 465              		.syntax unified
 466              		.thumb
 467              		.thumb_func
 468              		.fpu softvfp
 470              	__io_putchar:
 471              	.LVL30:
 472              	.LFB73:
 501:Core/Src/main.c **** 
 502:Core/Src/main.c **** #ifdef __GNUC__
 503:Core/Src/main.c ****   /* With GCC, small printf (option LD Linker->Libraries->Small printf
 504:Core/Src/main.c ****      set to 'Yes') calls __io_putchar() */
 505:Core/Src/main.c **** int __io_putchar(int ch)
 506:Core/Src/main.c **** #else
 507:Core/Src/main.c **** int fputc(int ch, FILE *f)
 508:Core/Src/main.c **** #endif /* __GNUC__ */
 509:Core/Src/main.c **** {
 473              		.loc 1 509 1 is_stmt 1 view -0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 8
 476              		@ frame_needed = 0, uses_anonymous_args = 0
 477              		.loc 1 509 1 is_stmt 0 view .LVU100
 478 0000 00B5     		push	{lr}
 479              	.LCFI7:
 480              		.cfi_def_cfa_offset 4
 481              		.cfi_offset 14, -4
 482 0002 83B0     		sub	sp, sp, #12
 483              	.LCFI8:
 484              		.cfi_def_cfa_offset 16
 485 0004 0190     		str	r0, [sp, #4]
 510:Core/Src/main.c ****   /* Place your implementation of fputc here */
 511:Core/Src/main.c ****   /* e.g. write a character to the UART3 and Loop until the end of transmission */
 512:Core/Src/main.c ****   HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 486              		.loc 1 512 3 is_stmt 1 view .LVU101
 487 0006 4FF0FF33 		mov	r3, #-1
 488 000a 0122     		movs	r2, #1
 489 000c 01A9     		add	r1, sp, #4
 490 000e 0348     		ldr	r0, .L15
 491              	.LVL31:
 492              		.loc 1 512 3 is_stmt 0 view .LVU102
ARM GAS  /tmp/cc4bPAnR.s 			page 19


 493 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 494              	.LVL32:
 513:Core/Src/main.c ****   return ch;
 495              		.loc 1 513 3 is_stmt 1 view .LVU103
 514:Core/Src/main.c **** }
 496              		.loc 1 514 1 is_stmt 0 view .LVU104
 497 0014 0198     		ldr	r0, [sp, #4]
 498 0016 03B0     		add	sp, sp, #12
 499              	.LCFI9:
 500              		.cfi_def_cfa_offset 4
 501              		@ sp needed
 502 0018 5DF804FB 		ldr	pc, [sp], #4
 503              	.L16:
 504              		.align	2
 505              	.L15:
 506 001c 00000000 		.word	huart3
 507              		.cfi_endproc
 508              	.LFE73:
 510              		.section	.text.Error_Handler,"ax",%progbits
 511              		.align	1
 512              		.global	Error_Handler
 513              		.syntax unified
 514              		.thumb
 515              		.thumb_func
 516              		.fpu softvfp
 518              	Error_Handler:
 519              	.LFB74:
 515:Core/Src/main.c **** 
 516:Core/Src/main.c **** /* USER CODE END 4 */
 517:Core/Src/main.c **** 
 518:Core/Src/main.c **** /**
 519:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 520:Core/Src/main.c ****   * @retval None
 521:Core/Src/main.c ****   */
 522:Core/Src/main.c **** void Error_Handler(void)
 523:Core/Src/main.c **** {
 520              		.loc 1 523 1 is_stmt 1 view -0
 521              		.cfi_startproc
 522              		@ Volatile: function does not return.
 523              		@ args = 0, pretend = 0, frame = 0
 524              		@ frame_needed = 0, uses_anonymous_args = 0
 525              		@ link register save eliminated.
 524:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 525:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 526:Core/Src/main.c ****   __disable_irq();
 526              		.loc 1 526 3 view .LVU106
 527              	.LBB4:
 528              	.LBI4:
 529              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
ARM GAS  /tmp/cc4bPAnR.s 			page 20


   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
ARM GAS  /tmp/cc4bPAnR.s 			page 21


  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc4bPAnR.s 			page 22


 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 530              		.loc 2 140 27 view .LVU107
 531              	.LBB5:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 532              		.loc 2 142 3 view .LVU108
 533              		.syntax unified
 534              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 535 0000 72B6     		cpsid i
 536              	@ 0 "" 2
 537              		.thumb
 538              		.syntax unified
 539              	.L18:
 540              	.LBE5:
 541              	.LBE4:
 527:Core/Src/main.c ****   while (1)
 542              		.loc 1 527 3 discriminator 1 view .LVU109
 528:Core/Src/main.c ****   {
 529:Core/Src/main.c ****   }
 543              		.loc 1 529 3 discriminator 1 view .LVU110
 527:Core/Src/main.c ****   while (1)
 544              		.loc 1 527 9 discriminator 1 view .LVU111
 545 0002 FEE7     		b	.L18
 546              		.cfi_endproc
 547              	.LFE74:
 549              		.section	.text.SystemClock_Config,"ax",%progbits
 550              		.align	1
 551              		.global	SystemClock_Config
 552              		.syntax unified
 553              		.thumb
 554              		.thumb_func
 555              		.fpu softvfp
 557              	SystemClock_Config:
 558              	.LFB69:
 379:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 559              		.loc 1 379 1 view -0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 64
 562              		@ frame_needed = 0, uses_anonymous_args = 0
 563 0000 00B5     		push	{lr}
ARM GAS  /tmp/cc4bPAnR.s 			page 23


 564              	.LCFI10:
 565              		.cfi_def_cfa_offset 4
 566              		.cfi_offset 14, -4
 567 0002 91B0     		sub	sp, sp, #68
 568              	.LCFI11:
 569              		.cfi_def_cfa_offset 72
 380:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 570              		.loc 1 380 3 view .LVU113
 380:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 571              		.loc 1 380 22 is_stmt 0 view .LVU114
 572 0004 2822     		movs	r2, #40
 573 0006 0021     		movs	r1, #0
 574 0008 06A8     		add	r0, sp, #24
 575 000a FFF7FEFF 		bl	memset
 576              	.LVL33:
 381:Core/Src/main.c **** 
 577              		.loc 1 381 3 is_stmt 1 view .LVU115
 381:Core/Src/main.c **** 
 578              		.loc 1 381 22 is_stmt 0 view .LVU116
 579 000e 0023     		movs	r3, #0
 580 0010 0193     		str	r3, [sp, #4]
 581 0012 0293     		str	r3, [sp, #8]
 582 0014 0393     		str	r3, [sp, #12]
 583 0016 0493     		str	r3, [sp, #16]
 584 0018 0593     		str	r3, [sp, #20]
 386:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 585              		.loc 1 386 3 is_stmt 1 view .LVU117
 386:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 586              		.loc 1 386 36 is_stmt 0 view .LVU118
 587 001a 0122     		movs	r2, #1
 588 001c 0692     		str	r2, [sp, #24]
 387:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 589              		.loc 1 387 3 is_stmt 1 view .LVU119
 387:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 590              		.loc 1 387 30 is_stmt 0 view .LVU120
 591 001e 4FF48033 		mov	r3, #65536
 592 0022 0793     		str	r3, [sp, #28]
 388:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 593              		.loc 1 388 3 is_stmt 1 view .LVU121
 388:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 594              		.loc 1 388 36 is_stmt 0 view .LVU122
 595 0024 4FF40031 		mov	r1, #131072
 596 0028 0891     		str	r1, [sp, #32]
 389:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 597              		.loc 1 389 3 is_stmt 1 view .LVU123
 389:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 598              		.loc 1 389 30 is_stmt 0 view .LVU124
 599 002a 0A92     		str	r2, [sp, #40]
 390:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 600              		.loc 1 390 3 is_stmt 1 view .LVU125
 390:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 601              		.loc 1 390 34 is_stmt 0 view .LVU126
 602 002c 0222     		movs	r2, #2
 603 002e 0D92     		str	r2, [sp, #52]
 391:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 604              		.loc 1 391 3 is_stmt 1 view .LVU127
 391:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
ARM GAS  /tmp/cc4bPAnR.s 			page 24


 605              		.loc 1 391 35 is_stmt 0 view .LVU128
 606 0030 0E93     		str	r3, [sp, #56]
 392:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 607              		.loc 1 392 3 is_stmt 1 view .LVU129
 392:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 608              		.loc 1 392 32 is_stmt 0 view .LVU130
 609 0032 4FF4E013 		mov	r3, #1835008
 610 0036 0F93     		str	r3, [sp, #60]
 393:Core/Src/main.c ****   {
 611              		.loc 1 393 3 is_stmt 1 view .LVU131
 393:Core/Src/main.c ****   {
 612              		.loc 1 393 7 is_stmt 0 view .LVU132
 613 0038 06A8     		add	r0, sp, #24
 614 003a FFF7FEFF 		bl	HAL_RCC_OscConfig
 615              	.LVL34:
 393:Core/Src/main.c ****   {
 616              		.loc 1 393 6 view .LVU133
 617 003e 80B9     		cbnz	r0, .L23
 400:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 618              		.loc 1 400 3 is_stmt 1 view .LVU134
 400:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 619              		.loc 1 400 31 is_stmt 0 view .LVU135
 620 0040 0F23     		movs	r3, #15
 621 0042 0193     		str	r3, [sp, #4]
 402:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 622              		.loc 1 402 3 is_stmt 1 view .LVU136
 402:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 623              		.loc 1 402 34 is_stmt 0 view .LVU137
 624 0044 0221     		movs	r1, #2
 625 0046 0291     		str	r1, [sp, #8]
 403:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 626              		.loc 1 403 3 is_stmt 1 view .LVU138
 403:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 627              		.loc 1 403 35 is_stmt 0 view .LVU139
 628 0048 0023     		movs	r3, #0
 629 004a 0393     		str	r3, [sp, #12]
 404:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 630              		.loc 1 404 3 is_stmt 1 view .LVU140
 404:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 631              		.loc 1 404 36 is_stmt 0 view .LVU141
 632 004c 4FF48062 		mov	r2, #1024
 633 0050 0492     		str	r2, [sp, #16]
 405:Core/Src/main.c **** 
 634              		.loc 1 405 3 is_stmt 1 view .LVU142
 405:Core/Src/main.c **** 
 635              		.loc 1 405 36 is_stmt 0 view .LVU143
 636 0052 0593     		str	r3, [sp, #20]
 407:Core/Src/main.c ****   {
 637              		.loc 1 407 3 is_stmt 1 view .LVU144
 407:Core/Src/main.c ****   {
 638              		.loc 1 407 7 is_stmt 0 view .LVU145
 639 0054 01A8     		add	r0, sp, #4
 640 0056 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 641              	.LVL35:
 407:Core/Src/main.c ****   {
 642              		.loc 1 407 6 view .LVU146
 643 005a 20B9     		cbnz	r0, .L24
ARM GAS  /tmp/cc4bPAnR.s 			page 25


 411:Core/Src/main.c **** 
 644              		.loc 1 411 1 view .LVU147
 645 005c 11B0     		add	sp, sp, #68
 646              	.LCFI12:
 647              		.cfi_remember_state
 648              		.cfi_def_cfa_offset 4
 649              		@ sp needed
 650 005e 5DF804FB 		ldr	pc, [sp], #4
 651              	.L23:
 652              	.LCFI13:
 653              		.cfi_restore_state
 395:Core/Src/main.c ****   }
 654              		.loc 1 395 5 is_stmt 1 view .LVU148
 655 0062 FFF7FEFF 		bl	Error_Handler
 656              	.LVL36:
 657              	.L24:
 409:Core/Src/main.c ****   }
 658              		.loc 1 409 5 view .LVU149
 659 0066 FFF7FEFF 		bl	Error_Handler
 660              	.LVL37:
 661              		.cfi_endproc
 662              	.LFE69:
 664              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 665              		.align	2
 666              	.LC11:
 667 0000 0A0D5761 		.ascii	"\012\015Waiting for CAN\000"
 667      6974696E 
 667      6720666F 
 667      72204341 
 667      4E00
 668 0012 0000     		.align	2
 669              	.LC12:
 670 0014 0A0D4341 		.ascii	"\012\015CAN received\000"
 670      4E207265 
 670      63656976 
 670      656400
 671 0023 00       		.align	2
 672              	.LC13:
 673 0024 0A0D5761 		.ascii	"\012\015Waiting for NRF\000"
 673      6974696E 
 673      6720666F 
 673      72204E52 
 673      4600
 674 0036 0000     		.align	2
 675              	.LC14:
 676 0038 0A0D4E52 		.ascii	"\012\015NRF received\000"
 676      46207265 
 676      63656976 
 676      656400
 677 0047 00       		.align	2
 678              	.LC15:
 679 0048 5B6D3A20 		.ascii	"[m: %d] [u: %d] Received message with id = 0x%04x, "
 679      25645D20 
 679      5B753A20 
 679      25645D20 
 679      52656365 
 680 007b 6E6F6465 		.ascii	"node_id = 0x%02x! pressure = %d, temp = %d\015\012\000"
ARM GAS  /tmp/cc4bPAnR.s 			page 26


 680      5F696420 
 680      3D203078 
 680      25303278 
 680      21207072 
 681              		.align	2
 682              	.LC16:
 683 00a8 0A0D4552 		.ascii	"\012\015ERROR: Timeout\000"
 683      524F523A 
 683      2054696D 
 683      656F7574 
 683      00
 684 00b9 000000   		.align	2
 685              	.LC17:
 686 00bc 0A0D5365 		.ascii	"\012\015Sending back PTN RESPONSE\000"
 686      6E64696E 
 686      67206261 
 686      636B2050 
 686      544E2052 
 687              		.section	.text.main,"ax",%progbits
 688              		.align	1
 689              		.global	main
 690              		.syntax unified
 691              		.thumb
 692              		.thumb_func
 693              		.fpu softvfp
 695              	main:
 696              	.LFB68:
  96:Core/Src/main.c **** 
 697              		.loc 1 96 1 view -0
 698              		.cfi_startproc
 699              		@ args = 0, pretend = 0, frame = 232
 700              		@ frame_needed = 0, uses_anonymous_args = 0
 701 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 702              	.LCFI14:
 703              		.cfi_def_cfa_offset 36
 704              		.cfi_offset 4, -36
 705              		.cfi_offset 5, -32
 706              		.cfi_offset 6, -28
 707              		.cfi_offset 7, -24
 708              		.cfi_offset 8, -20
 709              		.cfi_offset 9, -16
 710              		.cfi_offset 10, -12
 711              		.cfi_offset 11, -8
 712              		.cfi_offset 14, -4
 713 0004 BFB0     		sub	sp, sp, #252
 714              	.LCFI15:
 715              		.cfi_def_cfa_offset 288
 105:Core/Src/main.c **** 
 716              		.loc 1 105 3 view .LVU151
 717 0006 FFF7FEFF 		bl	HAL_Init
 718              	.LVL38:
 110:Core/Src/main.c **** 
 719              		.loc 1 110 3 view .LVU152
 110:Core/Src/main.c **** 
 720              		.loc 1 110 11 is_stmt 0 view .LVU153
 721 000a B84B     		ldr	r3, .L45
 722 000c 1868     		ldr	r0, [r3]
ARM GAS  /tmp/cc4bPAnR.s 			page 27


 110:Core/Src/main.c **** 
 723              		.loc 1 110 3 view .LVU154
 724 000e 0023     		movs	r3, #0
 725 0010 0222     		movs	r2, #2
 726 0012 1946     		mov	r1, r3
 727 0014 8068     		ldr	r0, [r0, #8]
 728 0016 FFF7FEFF 		bl	setvbuf
 729              	.LVL39:
 115:Core/Src/main.c **** 
 730              		.loc 1 115 3 is_stmt 1 view .LVU155
 731 001a FFF7FEFF 		bl	SystemClock_Config
 732              	.LVL40:
 122:Core/Src/main.c ****   MX_SPI1_Init();
 733              		.loc 1 122 3 view .LVU156
 734 001e FFF7FEFF 		bl	MX_GPIO_Init
 735              	.LVL41:
 123:Core/Src/main.c ****   MX_TIM2_Init();
 736              		.loc 1 123 3 view .LVU157
 737 0022 FFF7FEFF 		bl	MX_SPI1_Init
 738              	.LVL42:
 124:Core/Src/main.c ****   MX_SPI2_Init();
 739              		.loc 1 124 3 view .LVU158
 740 0026 FFF7FEFF 		bl	MX_TIM2_Init
 741              	.LVL43:
 125:Core/Src/main.c ****   MX_CAN_Init();
 742              		.loc 1 125 3 view .LVU159
 743 002a FFF7FEFF 		bl	MX_SPI2_Init
 744              	.LVL44:
 126:Core/Src/main.c ****   MX_USART3_UART_Init();
 745              		.loc 1 126 3 view .LVU160
 746 002e FFF7FEFF 		bl	MX_CAN_Init
 747              	.LVL45:
 127:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 748              		.loc 1 127 3 view .LVU161
 749 0032 FFF7FEFF 		bl	MX_USART3_UART_Init
 750              	.LVL46:
 131:Core/Src/main.c ****   HAL_GPIO_WritePin(SPI1_LD_GPIO_Port, SPI1_LD_Pin, 1);
 751              		.loc 1 131 3 view .LVU162
 752 0036 AE4C     		ldr	r4, .L45+4
 753 0038 0122     		movs	r2, #1
 754 003a 1021     		movs	r1, #16
 755 003c 2046     		mov	r0, r4
 756 003e FFF7FEFF 		bl	HAL_GPIO_WritePin
 757              	.LVL47:
 132:Core/Src/main.c **** 
 758              		.loc 1 132 3 view .LVU163
 759 0042 0122     		movs	r2, #1
 760 0044 4FF48061 		mov	r1, #1024
 761 0048 2046     		mov	r0, r4
 762 004a FFF7FEFF 		bl	HAL_GPIO_WritePin
 763              	.LVL48:
 135:Core/Src/main.c ****   uint8_t paired_sn_id = SN_ID_UNPAIRED;
 764              		.loc 1 135 3 view .LVU164
 136:Core/Src/main.c **** 
 765              		.loc 1 136 3 view .LVU165
 139:Core/Src/main.c ****   if (HAL_GPIO_ReadPin(PTN_ID_Port, PTN_ID_Pin) == 1)
 766              		.loc 1 139 3 view .LVU166
ARM GAS  /tmp/cc4bPAnR.s 			page 28


 140:Core/Src/main.c ****   {
 767              		.loc 1 140 3 view .LVU167
 140:Core/Src/main.c ****   {
 768              		.loc 1 140 7 is_stmt 0 view .LVU168
 769 004e 0121     		movs	r1, #1
 770 0050 2046     		mov	r0, r4
 771 0052 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 772              	.LVL49:
 773 0056 0746     		mov	r7, r0
 140:Core/Src/main.c ****   {
 774              		.loc 1 140 6 view .LVU169
 775 0058 0128     		cmp	r0, #1
 776 005a 00D0     		beq	.L26
 146:Core/Src/main.c ****   }
 777              		.loc 1 146 12 view .LVU170
 778 005c 0227     		movs	r7, #2
 779              	.L26:
 780              	.LVL50:
 150:Core/Src/main.c ****   adf4350_out_altvoltage0_powerdown(1);
 781              		.loc 1 150 3 is_stmt 1 view .LVU171
 782 005e FFF7FEFF 		bl	cmd_sm_init
 783              	.LVL51:
 151:Core/Src/main.c **** 
 784              		.loc 1 151 3 view .LVU172
 785 0062 0120     		movs	r0, #1
 786 0064 FFF7FEFF 		bl	adf4350_out_altvoltage0_powerdown
 787              	.LVL52:
 154:Core/Src/main.c **** 
 788              		.loc 1 154 3 view .LVU173
 789 0068 0122     		movs	r2, #1
 790 006a 4FF48071 		mov	r1, #256
 791 006e A048     		ldr	r0, .L45+4
 792 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 793              	.LVL53:
 157:Core/Src/main.c ****       .FilterIdHigh = (uint32_t)(PTN_REQUEST_ID << 5 | 0x0000),
 794              		.loc 1 157 3 view .LVU174
 157:Core/Src/main.c ****       .FilterIdHigh = (uint32_t)(PTN_REQUEST_ID << 5 | 0x0000),
 795              		.loc 1 157 21 is_stmt 0 view .LVU175
 796 0074 DFF87C82 		ldr	r8, .L45+8
 797 0078 34AC     		add	r4, sp, #208
 798 007a 4546     		mov	r5, r8
 799 007c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 800 007e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 801 0080 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 802 0082 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 803 0084 95E80300 		ldm	r5, {r0, r1}
 804 0088 84E80300 		stm	r4, {r0, r1}
 170:Core/Src/main.c **** 
 805              		.loc 1 170 3 is_stmt 1 view .LVU176
 806 008c 9A4C     		ldr	r4, .L45+12
 807 008e 34A9     		add	r1, sp, #208
 808 0090 2046     		mov	r0, r4
 809 0092 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 810              	.LVL54:
 172:Core/Src/main.c **** 
 811              		.loc 1 172 3 view .LVU177
 812 0096 2046     		mov	r0, r4
ARM GAS  /tmp/cc4bPAnR.s 			page 29


 813 0098 FFF7FEFF 		bl	HAL_CAN_Start
 814              	.LVL55:
 174:Core/Src/main.c ****       .StdId = PTN_RESPONSE_ID,
 815              		.loc 1 174 3 view .LVU178
 174:Core/Src/main.c ****       .StdId = PTN_RESPONSE_ID,
 816              		.loc 1 174 23 is_stmt 0 view .LVU179
 817 009c 2EAC     		add	r4, sp, #184
 818 009e 08F12805 		add	r5, r8, #40
 819 00a2 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 820 00a4 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 821 00a6 95E80300 		ldm	r5, {r0, r1}
 822 00aa 84E80300 		stm	r4, {r0, r1}
 183:Core/Src/main.c ****   uint8_t can_rx_payload[CAN_MSG_FRAME_LEN_BYTES] = {0};
 823              		.loc 1 183 3 is_stmt 1 view .LVU180
 183:Core/Src/main.c ****   uint8_t can_rx_payload[CAN_MSG_FRAME_LEN_BYTES] = {0};
 824              		.loc 1 183 11 is_stmt 0 view .LVU181
 825 00ae 0026     		movs	r6, #0
 826 00b0 2C96     		str	r6, [sp, #176]
 827 00b2 2D96     		str	r6, [sp, #180]
 184:Core/Src/main.c **** 
 828              		.loc 1 184 3 is_stmt 1 view .LVU182
 184:Core/Src/main.c **** 
 829              		.loc 1 184 11 is_stmt 0 view .LVU183
 830 00b4 2A96     		str	r6, [sp, #168]
 831 00b6 2B96     		str	r6, [sp, #172]
 186:Core/Src/main.c ****   HAL_StatusTypeDef can_rx_status = HAL_OK;
 832              		.loc 1 186 3 is_stmt 1 view .LVU184
 833              	.LVL56:
 187:Core/Src/main.c **** 
 834              		.loc 1 187 3 view .LVU185
 189:Core/Src/main.c ****   uint32_t can_tx_mailbox = 0;
 835              		.loc 1 189 3 view .LVU186
 189:Core/Src/main.c ****   uint32_t can_tx_mailbox = 0;
 836              		.loc 1 189 23 is_stmt 0 view .LVU187
 837 00b8 2396     		str	r6, [sp, #140]
 838 00ba 2496     		str	r6, [sp, #144]
 839 00bc 2596     		str	r6, [sp, #148]
 840 00be 2696     		str	r6, [sp, #152]
 841 00c0 2796     		str	r6, [sp, #156]
 842 00c2 2896     		str	r6, [sp, #160]
 843 00c4 2996     		str	r6, [sp, #164]
 190:Core/Src/main.c **** 
 844              		.loc 1 190 3 is_stmt 1 view .LVU188
 190:Core/Src/main.c **** 
 845              		.loc 1 190 12 is_stmt 0 view .LVU189
 846 00c6 2296     		str	r6, [sp, #136]
 194:Core/Src/main.c ****   uint8_t rf_payload[PAYLOAD_SZ_BYTES] = {0};
 847              		.loc 1 194 3 is_stmt 1 view .LVU190
 194:Core/Src/main.c ****   uint8_t rf_payload[PAYLOAD_SZ_BYTES] = {0};
 848              		.loc 1 194 11 is_stmt 0 view .LVU191
 849 00c8 1A96     		str	r6, [sp, #104]
 850 00ca 1B96     		str	r6, [sp, #108]
 851 00cc 1C96     		str	r6, [sp, #112]
 852 00ce 1D96     		str	r6, [sp, #116]
 853 00d0 1E96     		str	r6, [sp, #120]
 854 00d2 1F96     		str	r6, [sp, #124]
 855 00d4 2096     		str	r6, [sp, #128]
ARM GAS  /tmp/cc4bPAnR.s 			page 30


 856 00d6 2196     		str	r6, [sp, #132]
 195:Core/Src/main.c **** 
 857              		.loc 1 195 3 is_stmt 1 view .LVU192
 195:Core/Src/main.c **** 
 858              		.loc 1 195 11 is_stmt 0 view .LVU193
 859 00d8 1896     		str	r6, [sp, #96]
 860 00da 1996     		str	r6, [sp, #100]
 198:Core/Src/main.c ****   tx_spi_cmd(&hspi2, W_REGISTER(CONFIG_REGISTER), tx_payload, 1);
 861              		.loc 1 198 3 is_stmt 1 view .LVU194
 198:Core/Src/main.c ****   tx_spi_cmd(&hspi2, W_REGISTER(CONFIG_REGISTER), tx_payload, 1);
 862              		.loc 1 198 17 is_stmt 0 view .LVU195
 863 00dc 3F25     		movs	r5, #63
 864 00de 8DF86850 		strb	r5, [sp, #104]
 199:Core/Src/main.c ****   HAL_Delay(500);
 865              		.loc 1 199 3 is_stmt 1 view .LVU196
 866 00e2 864C     		ldr	r4, .L45+16
 867 00e4 0123     		movs	r3, #1
 868 00e6 1AAA     		add	r2, sp, #104
 869 00e8 2021     		movs	r1, #32
 870 00ea 2046     		mov	r0, r4
 871 00ec FFF7FEFF 		bl	tx_spi_cmd
 872              	.LVL57:
 200:Core/Src/main.c ****   
 873              		.loc 1 200 3 view .LVU197
 874 00f0 4FF4FA70 		mov	r0, #500
 875 00f4 FFF7FEFF 		bl	HAL_Delay
 876              	.LVL58:
 203:Core/Src/main.c ****   tx_spi_cmd(&hspi2, W_REGISTER(CONFIG_REGISTER), tx_payload, 1);
 877              		.loc 1 203 3 view .LVU198
 203:Core/Src/main.c ****   tx_spi_cmd(&hspi2, W_REGISTER(CONFIG_REGISTER), tx_payload, 1);
 878              		.loc 1 203 17 is_stmt 0 view .LVU199
 879 00f8 8DF86850 		strb	r5, [sp, #104]
 204:Core/Src/main.c **** 
 880              		.loc 1 204 3 is_stmt 1 view .LVU200
 881 00fc 0123     		movs	r3, #1
 882 00fe 1AAA     		add	r2, sp, #104
 883 0100 2021     		movs	r1, #32
 884 0102 2046     		mov	r0, r4
 885 0104 FFF7FEFF 		bl	tx_spi_cmd
 886              	.LVL59:
 207:Core/Src/main.c ****   tx_spi_cmd(&hspi2, W_REGISTER(RX_PW_P0), tx_payload, 1);
 887              		.loc 1 207 3 view .LVU201
 207:Core/Src/main.c ****   tx_spi_cmd(&hspi2, W_REGISTER(RX_PW_P0), tx_payload, 1);
 888              		.loc 1 207 17 is_stmt 0 view .LVU202
 889 0108 0823     		movs	r3, #8
 890 010a 8DF86830 		strb	r3, [sp, #104]
 208:Core/Src/main.c **** 
 891              		.loc 1 208 3 is_stmt 1 view .LVU203
 892 010e 0123     		movs	r3, #1
 893 0110 1AAA     		add	r2, sp, #104
 894 0112 3121     		movs	r1, #49
 895 0114 2046     		mov	r0, r4
 896 0116 FFF7FEFF 		bl	tx_spi_cmd
 897              	.LVL60:
 211:Core/Src/main.c ****   nrf24l01_setup_rf(&hspi2, &rf_config);
 898              		.loc 1 211 3 view .LVU204
 211:Core/Src/main.c ****   nrf24l01_setup_rf(&hspi2, &rf_config);
ARM GAS  /tmp/cc4bPAnR.s 			page 31


 899              		.loc 1 211 16 is_stmt 0 view .LVU205
 900 011a B8F84030 		ldrh	r3, [r8, #64]
 901 011e ADF85C30 		strh	r3, [sp, #92]	@ movhi
 212:Core/Src/main.c **** 
 902              		.loc 1 212 3 is_stmt 1 view .LVU206
 903 0122 17A9     		add	r1, sp, #92
 904 0124 2046     		mov	r0, r4
 905 0126 FFF7FEFF 		bl	nrf24l01_setup_rf
 906              	.LVL61:
 214:Core/Src/main.c **** 
 907              		.loc 1 214 3 view .LVU207
 908 012a 3346     		mov	r3, r6
 909 012c 3246     		mov	r2, r6
 910 012e E221     		movs	r1, #226
 911 0130 2046     		mov	r0, r4
 912 0132 FFF7FEFF 		bl	tx_spi_cmd
 913              	.LVL62:
 217:Core/Src/main.c **** 
 914              		.loc 1 217 3 view .LVU208
 915 0136 FFF7FEFF 		bl	read_back_config
 916              	.LVL63:
 136:Core/Src/main.c **** 
 917              		.loc 1 136 11 is_stmt 0 view .LVU209
 918 013a 3546     		mov	r5, r6
 919 013c 04E0     		b	.L39
 920              	.LVL64:
 921              	.L28:
 922              	.LBB6:
 241:Core/Src/main.c ****         {
 923              		.loc 1 241 9 is_stmt 1 view .LVU210
 241:Core/Src/main.c ****         {
 924              		.loc 1 241 12 is_stmt 0 view .LVU211
 925 013e B942     		cmp	r1, r7
 926 0140 25D0     		beq	.L42
 927              	.LVL65:
 928              	.L29:
 366:Core/Src/main.c ****     /* USER CODE END WHILE */
 929              		.loc 1 366 5 is_stmt 1 view .LVU212
 930 0142 0120     		movs	r0, #1
 931 0144 FFF7FEFF 		bl	adf4350_out_altvoltage0_powerdown
 932              	.LVL66:
 933              	.LBE6:
 223:Core/Src/main.c ****   {
 934              		.loc 1 223 9 view .LVU213
 935              	.L39:
 223:Core/Src/main.c ****   {
 936              		.loc 1 223 3 view .LVU214
 937              	.LBB7:
 226:Core/Src/main.c **** 
 938              		.loc 1 226 5 view .LVU215
 939 0148 0120     		movs	r0, #1
 940 014a FFF7FEFF 		bl	adf4350_out_altvoltage0_powerdown
 941              	.LVL67:
 229:Core/Src/main.c ****     while(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) <= 0);
 942              		.loc 1 229 5 view .LVU216
 943 014e 6C48     		ldr	r0, .L45+20
 944 0150 FFF7FEFF 		bl	printf
ARM GAS  /tmp/cc4bPAnR.s 			page 32


 945              	.LVL68:
 230:Core/Src/main.c ****     printf("\n\rCAN received");
 946              		.loc 1 230 5 view .LVU217
 947              	.L27:
 230:Core/Src/main.c ****     printf("\n\rCAN received");
 948              		.loc 1 230 64 discriminator 1 view .LVU218
 230:Core/Src/main.c ****     printf("\n\rCAN received");
 949              		.loc 1 230 10 discriminator 1 view .LVU219
 230:Core/Src/main.c ****     printf("\n\rCAN received");
 950              		.loc 1 230 11 is_stmt 0 discriminator 1 view .LVU220
 951 0154 0021     		movs	r1, #0
 952 0156 6848     		ldr	r0, .L45+12
 953 0158 FFF7FEFF 		bl	HAL_CAN_GetRxFifoFillLevel
 954              	.LVL69:
 230:Core/Src/main.c ****     printf("\n\rCAN received");
 955              		.loc 1 230 10 discriminator 1 view .LVU221
 956 015c 0028     		cmp	r0, #0
 957 015e F9D0     		beq	.L27
 231:Core/Src/main.c ****     can_rx_status = HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &rx_header, can_rx_payload);
 958              		.loc 1 231 5 is_stmt 1 view .LVU222
 959 0160 6848     		ldr	r0, .L45+24
 960 0162 FFF7FEFF 		bl	printf
 961              	.LVL70:
 232:Core/Src/main.c **** 
 962              		.loc 1 232 5 view .LVU223
 232:Core/Src/main.c **** 
 963              		.loc 1 232 21 is_stmt 0 view .LVU224
 964 0166 2AAB     		add	r3, sp, #168
 965 0168 23AA     		add	r2, sp, #140
 966 016a 0021     		movs	r1, #0
 967 016c 6248     		ldr	r0, .L45+12
 968 016e FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 969              	.LVL71:
 235:Core/Src/main.c ****     const uint16_t received_ptn_id = can_rx_payload[0];
 970              		.loc 1 235 5 is_stmt 1 view .LVU225
 236:Core/Src/main.c ****     switch (ptn_can_id)
 971              		.loc 1 236 5 view .LVU226
 236:Core/Src/main.c ****     switch (ptn_can_id)
 972              		.loc 1 236 52 is_stmt 0 view .LVU227
 973 0172 9DF8A810 		ldrb	r1, [sp, #168]	@ zero_extendqisi2
 974              	.LVL72:
 237:Core/Src/main.c ****     {
 975              		.loc 1 237 5 is_stmt 1 view .LVU228
 976 0176 BDF88C30 		ldrh	r3, [sp, #140]
 977 017a 40F20112 		movw	r2, #257
 978 017e 9342     		cmp	r3, r2
 979 0180 DDD0     		beq	.L28
 980 0182 B3F5817F 		cmp	r3, #258
 981 0186 DCD1     		bne	.L29
 982 0188 0025     		movs	r5, #0
 983              	.LVL73:
 237:Core/Src/main.c ****     {
 984              		.loc 1 237 5 is_stmt 0 view .LVU229
 985 018a 2E46     		mov	r6, r5
 986              	.LVL74:
 237:Core/Src/main.c ****     {
 987              		.loc 1 237 5 view .LVU230
ARM GAS  /tmp/cc4bPAnR.s 			page 33


 988 018c D9E7     		b	.L29
 989              	.LVL75:
 990              	.L42:
 243:Core/Src/main.c ****         }
 991              		.loc 1 243 11 is_stmt 1 view .LVU231
 992              	.LDL1:
 264:Core/Src/main.c ****     }
 993              		.loc 1 264 7 view .LVU232
 269:Core/Src/main.c ****     HAL_TIM_Base_Start_IT(&htim2);
 994              		.loc 1 269 5 view .LVU233
 995 018e 0020     		movs	r0, #0
 996 0190 FFF7FEFF 		bl	adf4350_out_altvoltage0_powerdown
 997              	.LVL76:
 270:Core/Src/main.c **** 
 998              		.loc 1 270 5 view .LVU234
 999 0194 5C48     		ldr	r0, .L45+28
 1000 0196 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1001              	.LVL77:
 273:Core/Src/main.c ****     int num_uniq_msgs = 0;
 1002              		.loc 1 273 5 view .LVU235
 274:Core/Src/main.c ****     uint32_t prev_rand_id = 0;
 1003              		.loc 1 274 5 view .LVU236
 275:Core/Src/main.c **** 
 1004              		.loc 1 275 5 view .LVU237
 277:Core/Src/main.c ****     uint8_t rx_fifo_empty = 1;
 1005              		.loc 1 277 5 view .LVU238
 278:Core/Src/main.c ****     uint8_t fifo_status = 0;
 1006              		.loc 1 278 5 view .LVU239
 279:Core/Src/main.c ****     uint8_t rxbuffer[RX_BUF_SZ_BYTES] = {0};
 1007              		.loc 1 279 5 view .LVU240
 280:Core/Src/main.c **** 
 1008              		.loc 1 280 5 view .LVU241
 280:Core/Src/main.c **** 
 1009              		.loc 1 280 13 is_stmt 0 view .LVU242
 1010 019a 0021     		movs	r1, #0
 1011 019c 0791     		str	r1, [sp, #28]
 1012 019e 3C22     		movs	r2, #60
 1013 01a0 08A8     		add	r0, sp, #32
 1014 01a2 FFF7FEFF 		bl	memset
 1015              	.LVL78:
 282:Core/Src/main.c ****     uint32_t millis_time = HAL_GetTick() - ref_time;
 1016              		.loc 1 282 5 is_stmt 1 view .LVU243
 282:Core/Src/main.c ****     uint32_t millis_time = HAL_GetTick() - ref_time;
 1017              		.loc 1 282 25 is_stmt 0 view .LVU244
 1018 01a6 FFF7FEFF 		bl	HAL_GetTick
 1019              	.LVL79:
 1020 01aa 8046     		mov	r8, r0
 1021              	.LVL80:
 283:Core/Src/main.c **** 
 1022              		.loc 1 283 5 is_stmt 1 view .LVU245
 283:Core/Src/main.c **** 
 1023              		.loc 1 283 28 is_stmt 0 view .LVU246
 1024 01ac FFF7FEFF 		bl	HAL_GetTick
 1025              	.LVL81:
 283:Core/Src/main.c **** 
 1026              		.loc 1 283 14 view .LVU247
 1027 01b0 A0EB0804 		sub	r4, r0, r8
ARM GAS  /tmp/cc4bPAnR.s 			page 34


 1028              	.LVL82:
 285:Core/Src/main.c **** 
 1029              		.loc 1 285 5 is_stmt 1 view .LVU248
 288:Core/Src/main.c ****     while((!STATUS_RX_DR(nrf24l01_get_status(&hspi2))) && millis_time < NRF24L01_RX_TIMEOUT)
 1030              		.loc 1 288 5 view .LVU249
 1031 01b4 5548     		ldr	r0, .L45+32
 1032 01b6 FFF7FEFF 		bl	printf
 1033              	.LVL83:
 289:Core/Src/main.c ****     {
 1034              		.loc 1 289 5 view .LVU250
 289:Core/Src/main.c ****     {
 1035              		.loc 1 289 10 is_stmt 0 view .LVU251
 1036 01ba 03E0     		b	.L30
 1037              	.L32:
 291:Core/Src/main.c ****     }
 1038              		.loc 1 291 7 is_stmt 1 view .LVU252
 291:Core/Src/main.c ****     }
 1039              		.loc 1 291 21 is_stmt 0 view .LVU253
 1040 01bc FFF7FEFF 		bl	HAL_GetTick
 1041              	.LVL84:
 291:Core/Src/main.c ****     }
 1042              		.loc 1 291 19 view .LVU254
 1043 01c0 A0EB0804 		sub	r4, r0, r8
 1044              	.LVL85:
 1045              	.L30:
 289:Core/Src/main.c ****     {
 1046              		.loc 1 289 10 is_stmt 1 view .LVU255
 289:Core/Src/main.c ****     {
 1047              		.loc 1 289 13 is_stmt 0 view .LVU256
 1048 01c4 4D48     		ldr	r0, .L45+16
 1049 01c6 FFF7FEFF 		bl	nrf24l01_get_status
 1050              	.LVL86:
 289:Core/Src/main.c ****     {
 1051              		.loc 1 289 10 view .LVU257
 1052 01ca 10F0400F 		tst	r0, #64
 1053 01ce 03D1     		bne	.L31
 289:Core/Src/main.c ****     {
 1054              		.loc 1 289 56 discriminator 1 view .LVU258
 1055 01d0 41F28733 		movw	r3, #4999
 1056 01d4 9C42     		cmp	r4, r3
 1057 01d6 F1D9     		bls	.L32
 1058              	.L31:
 293:Core/Src/main.c **** 
 1059              		.loc 1 293 5 is_stmt 1 view .LVU259
 1060 01d8 4D48     		ldr	r0, .L45+36
 1061 01da FFF7FEFF 		bl	printf
 1062              	.LVL87:
 295:Core/Src/main.c **** 
 1063              		.loc 1 295 5 view .LVU260
 295:Core/Src/main.c **** 
 1064              		.loc 1 295 18 is_stmt 0 view .LVU261
 1065 01de 0023     		movs	r3, #0
 1066 01e0 0593     		str	r3, [sp, #20]
 1067 01e2 0693     		str	r3, [sp, #24]
 297:Core/Src/main.c ****     {
 1068              		.loc 1 297 5 is_stmt 1 view .LVU262
 297:Core/Src/main.c ****     {
ARM GAS  /tmp/cc4bPAnR.s 			page 35


 1069              		.loc 1 297 8 is_stmt 0 view .LVU263
 1070 01e4 41F28733 		movw	r3, #4999
 1071 01e8 9C42     		cmp	r4, r3
 1072 01ea 2FD9     		bls	.L43
 334:Core/Src/main.c ****       printf("\n\rERROR: Timeout");
 1073              		.loc 1 334 7 is_stmt 1 view .LVU264
 1074              	.LVL88:
 335:Core/Src/main.c ****     }
 1075              		.loc 1 335 7 view .LVU265
 1076 01ec 4948     		ldr	r0, .L45+40
 1077 01ee FFF7FEFF 		bl	printf
 1078              	.LVL89:
 334:Core/Src/main.c ****       printf("\n\rERROR: Timeout");
 1079              		.loc 1 334 15 is_stmt 0 view .LVU266
 1080 01f2 4FF00108 		mov	r8, #1
 1081              	.LVL90:
 1082              	.L36:
 339:Core/Src/main.c ****     adf4350_out_altvoltage0_powerdown(1);
 1083              		.loc 1 339 5 is_stmt 1 view .LVU267
 1084 01f6 4448     		ldr	r0, .L45+28
 1085 01f8 FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
 1086              	.LVL91:
 340:Core/Src/main.c **** 
 1087              		.loc 1 340 5 view .LVU268
 1088 01fc 0120     		movs	r0, #1
 1089 01fe FFF7FEFF 		bl	adf4350_out_altvoltage0_powerdown
 1090              	.LVL92:
 343:Core/Src/main.c ****     {
 1091              		.loc 1 343 5 view .LVU269
 343:Core/Src/main.c ****     {
 1092              		.loc 1 343 8 is_stmt 0 view .LVU270
 1093 0202 16B9     		cbnz	r6, .L37
 345:Core/Src/main.c ****       ptn_sn_paired = true;
 1094              		.loc 1 345 7 is_stmt 1 view .LVU271
 345:Core/Src/main.c ****       ptn_sn_paired = true;
 1095              		.loc 1 345 20 is_stmt 0 view .LVU272
 1096 0204 9DF81450 		ldrb	r5, [sp, #20]	@ zero_extendqisi2
 1097              	.LVL93:
 346:Core/Src/main.c ****     }
 1098              		.loc 1 346 7 is_stmt 1 view .LVU273
 349:Core/Src/main.c ****     {
 1099              		.loc 1 349 5 view .LVU274
 346:Core/Src/main.c ****     }
 1100              		.loc 1 346 21 is_stmt 0 view .LVU275
 1101 0208 0126     		movs	r6, #1
 1102              	.LVL94:
 1103              	.L37:
 349:Core/Src/main.c ****     {
 1104              		.loc 1 349 59 discriminator 1 view .LVU276
 1105 020a 9DF81440 		ldrb	r4, [sp, #20]	@ zero_extendqisi2
 349:Core/Src/main.c ****     {
 1106              		.loc 1 349 33 discriminator 1 view .LVU277
 1107 020e AC42     		cmp	r4, r5
 1108 0210 97D1     		bne	.L29
 352:Core/Src/main.c ****       *((uint16_t*)can_tx_payload) = rx_msg.pressure;
 1109              		.loc 1 352 7 is_stmt 1 view .LVU278
 1110 0212 4148     		ldr	r0, .L45+44
ARM GAS  /tmp/cc4bPAnR.s 			page 36


 1111 0214 FFF7FEFF 		bl	printf
 1112              	.LVL95:
 353:Core/Src/main.c ****       *((uint16_t*)can_tx_payload + 1) = rx_msg.temperature;
 1113              		.loc 1 353 7 view .LVU279
 353:Core/Src/main.c ****       *((uint16_t*)can_tx_payload + 1) = rx_msg.temperature;
 1114              		.loc 1 353 44 is_stmt 0 view .LVU280
 1115 0218 BDF81530 		ldrh	r3, [sp, #21]	@ unaligned
 353:Core/Src/main.c ****       *((uint16_t*)can_tx_payload + 1) = rx_msg.temperature;
 1116              		.loc 1 353 36 view .LVU281
 1117 021c ADF8B030 		strh	r3, [sp, #176]	@ movhi
 354:Core/Src/main.c ****       *((uint8_t*)can_tx_payload + 4) = ptn_id;
 1118              		.loc 1 354 7 is_stmt 1 view .LVU282
 354:Core/Src/main.c ****       *((uint8_t*)can_tx_payload + 4) = ptn_id;
 1119              		.loc 1 354 48 is_stmt 0 view .LVU283
 1120 0220 BDF91730 		ldrsh	r3, [sp, #23]	@ unaligned
 354:Core/Src/main.c ****       *((uint8_t*)can_tx_payload + 4) = ptn_id;
 1121              		.loc 1 354 40 view .LVU284
 1122 0224 ADF8B230 		strh	r3, [sp, #178]	@ movhi
 355:Core/Src/main.c ****       *((uint8_t*)can_tx_payload + 5) = rx_msg.node_id;
 1123              		.loc 1 355 7 is_stmt 1 view .LVU285
 355:Core/Src/main.c ****       *((uint8_t*)can_tx_payload + 5) = rx_msg.node_id;
 1124              		.loc 1 355 39 is_stmt 0 view .LVU286
 1125 0228 8DF8B470 		strb	r7, [sp, #180]
 356:Core/Src/main.c ****       *((uint8_t*)can_tx_payload + 6) = ptn_err;
 1126              		.loc 1 356 7 is_stmt 1 view .LVU287
 356:Core/Src/main.c ****       *((uint8_t*)can_tx_payload + 6) = ptn_err;
 1127              		.loc 1 356 39 is_stmt 0 view .LVU288
 1128 022c 8DF8B540 		strb	r4, [sp, #181]
 357:Core/Src/main.c **** 
 1129              		.loc 1 357 7 is_stmt 1 view .LVU289
 357:Core/Src/main.c **** 
 1130              		.loc 1 357 39 is_stmt 0 view .LVU290
 1131 0230 8DF8B680 		strb	r8, [sp, #182]
 359:Core/Src/main.c ****       can_tx_status = HAL_CAN_AddTxMessage(&hcan, &tx_header, can_tx_payload, &can_tx_mailbox);
 1132              		.loc 1 359 7 is_stmt 1 view .LVU291
 1133              	.L38:
 359:Core/Src/main.c ****       can_tx_status = HAL_CAN_AddTxMessage(&hcan, &tx_header, can_tx_payload, &can_tx_mailbox);
 1134              		.loc 1 359 58 discriminator 1 view .LVU292
 359:Core/Src/main.c ****       can_tx_status = HAL_CAN_AddTxMessage(&hcan, &tx_header, can_tx_payload, &can_tx_mailbox);
 1135              		.loc 1 359 13 discriminator 1 view .LVU293
 359:Core/Src/main.c ****       can_tx_status = HAL_CAN_AddTxMessage(&hcan, &tx_header, can_tx_payload, &can_tx_mailbox);
 1136              		.loc 1 359 14 is_stmt 0 discriminator 1 view .LVU294
 1137 0234 3048     		ldr	r0, .L45+12
 1138 0236 FFF7FEFF 		bl	HAL_CAN_GetTxMailboxesFreeLevel
 1139              	.LVL96:
 359:Core/Src/main.c ****       can_tx_status = HAL_CAN_AddTxMessage(&hcan, &tx_header, can_tx_payload, &can_tx_mailbox);
 1140              		.loc 1 359 13 discriminator 1 view .LVU295
 1141 023a 0028     		cmp	r0, #0
 1142 023c FAD0     		beq	.L38
 360:Core/Src/main.c ****     }
 1143              		.loc 1 360 7 is_stmt 1 view .LVU296
 360:Core/Src/main.c ****     }
 1144              		.loc 1 360 23 is_stmt 0 view .LVU297
 1145 023e 22AB     		add	r3, sp, #136
 1146 0240 2CAA     		add	r2, sp, #176
 1147 0242 2EA9     		add	r1, sp, #184
 1148 0244 2C48     		ldr	r0, .L45+12
ARM GAS  /tmp/cc4bPAnR.s 			page 37


 1149 0246 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1150              	.LVL97:
 1151 024a 7AE7     		b	.L29
 1152              	.LVL98:
 1153              	.L43:
 275:Core/Src/main.c **** 
 1154              		.loc 1 275 14 view .LVU298
 1155 024c 4FF0000A 		mov	r10, #0
 274:Core/Src/main.c ****     uint32_t prev_rand_id = 0;
 1156              		.loc 1 274 9 view .LVU299
 1157 0250 D146     		mov	r9, r10
 273:Core/Src/main.c ****     int num_uniq_msgs = 0;
 1158              		.loc 1 273 9 view .LVU300
 1159 0252 D046     		mov	r8, r10
 1160              	.LVL99:
 273:Core/Src/main.c ****     int num_uniq_msgs = 0;
 1161              		.loc 1 273 9 view .LVU301
 1162 0254 2DE0     		b	.L35
 1163              	.LVL100:
 1164              	.L34:
 315:Core/Src/main.c ****             num_rx_msgs, num_uniq_msgs, rx_msg.msg_id, rx_msg.node_id, rx_msg.pressure, rx_msg.temp
 1165              		.loc 1 315 9 is_stmt 1 view .LVU302
 316:Core/Src/main.c **** 
 1166              		.loc 1 316 62 is_stmt 0 view .LVU303
 1167 0256 9DF81420 		ldrb	r2, [sp, #20]	@ zero_extendqisi2
 316:Core/Src/main.c **** 
 1168              		.loc 1 316 78 view .LVU304
 1169 025a BDF81510 		ldrh	r1, [sp, #21]	@ unaligned
 316:Core/Src/main.c **** 
 1170              		.loc 1 316 95 view .LVU305
 1171 025e BDF91700 		ldrsh	r0, [sp, #23]	@ unaligned
 315:Core/Src/main.c ****             num_rx_msgs, num_uniq_msgs, rx_msg.msg_id, rx_msg.node_id, rx_msg.pressure, rx_msg.temp
 1172              		.loc 1 315 9 view .LVU306
 1173 0262 0290     		str	r0, [sp, #8]
 1174 0264 0191     		str	r1, [sp, #4]
 1175 0266 0092     		str	r2, [sp]
 1176 0268 4A46     		mov	r2, r9
 1177 026a 4146     		mov	r1, r8
 1178 026c 2B48     		ldr	r0, .L45+48
 1179 026e FFF7FEFF 		bl	printf
 1180              	.LVL101:
 319:Core/Src/main.c **** 
 1181              		.loc 1 319 9 is_stmt 1 view .LVU307
 1182 0272 0DF11C0B 		add	fp, sp, #28
 1183 0276 4024     		movs	r4, #64
 1184 0278 2246     		mov	r2, r4
 1185 027a 0021     		movs	r1, #0
 1186 027c 5846     		mov	r0, fp
 1187 027e FFF7FEFF 		bl	memset
 1188              	.LVL102:
 322:Core/Src/main.c ****         tx_spi_cmd(&hspi2, W_REGISTER(STATUS), tx_payload, 1);
 1189              		.loc 1 322 9 view .LVU308
 322:Core/Src/main.c ****         tx_spi_cmd(&hspi2, W_REGISTER(STATUS), tx_payload, 1);
 1190              		.loc 1 322 23 is_stmt 0 view .LVU309
 1191 0282 8DF86840 		strb	r4, [sp, #104]
 323:Core/Src/main.c **** 
 1192              		.loc 1 323 9 is_stmt 1 view .LVU310
ARM GAS  /tmp/cc4bPAnR.s 			page 38


 1193 0286 1D4C     		ldr	r4, .L45+16
 1194 0288 0123     		movs	r3, #1
 1195 028a 1AAA     		add	r2, sp, #104
 1196 028c 2721     		movs	r1, #39
 1197 028e 2046     		mov	r0, r4
 1198 0290 FFF7FEFF 		bl	tx_spi_cmd
 1199              	.LVL103:
 326:Core/Src/main.c ****         fifo_status = rxbuffer[0];
 1200              		.loc 1 326 9 view .LVU311
 1201 0294 0123     		movs	r3, #1
 1202 0296 0193     		str	r3, [sp, #4]
 1203 0298 CDF800B0 		str	fp, [sp]
 1204 029c 0023     		movs	r3, #0
 1205 029e 1A46     		mov	r2, r3
 1206 02a0 1721     		movs	r1, #23
 1207 02a2 2046     		mov	r0, r4
 1208 02a4 FFF7FEFF 		bl	tx_rx_spi_cmd
 1209              	.LVL104:
 327:Core/Src/main.c ****         rx_fifo_empty = FIFO_STATUS_RX_EMPTY(fifo_status);
 1210              		.loc 1 327 9 view .LVU312
 327:Core/Src/main.c ****         rx_fifo_empty = FIFO_STATUS_RX_EMPTY(fifo_status);
 1211              		.loc 1 327 21 is_stmt 0 view .LVU313
 1212 02a8 9DF81C30 		ldrb	r3, [sp, #28]	@ zero_extendqisi2
 1213              	.LVL105:
 328:Core/Src/main.c **** 
 1214              		.loc 1 328 9 is_stmt 1 view .LVU314
 330:Core/Src/main.c ****     }
 1215              		.loc 1 330 15 view .LVU315
 330:Core/Src/main.c ****     }
 1216              		.loc 1 330 7 is_stmt 0 view .LVU316
 1217 02ac 13F0010F 		tst	r3, #1
 1218 02b0 18D1     		bne	.L44
 1219              	.LVL106:
 1220              	.L35:
 300:Core/Src/main.c ****         
 1221              		.loc 1 300 7 is_stmt 1 view .LVU317
 303:Core/Src/main.c **** 
 1222              		.loc 1 303 9 view .LVU318
 1223 02b2 0923     		movs	r3, #9
 1224 02b4 0193     		str	r3, [sp, #4]
 1225 02b6 07AC     		add	r4, sp, #28
 1226 02b8 0094     		str	r4, [sp]
 1227 02ba 0023     		movs	r3, #0
 1228 02bc 1A46     		mov	r2, r3
 1229 02be 6121     		movs	r1, #97
 1230 02c0 0E48     		ldr	r0, .L45+16
 1231 02c2 FFF7FEFF 		bl	tx_rx_spi_cmd
 1232              	.LVL107:
 305:Core/Src/main.c **** 
 1233              		.loc 1 305 9 view .LVU319
 305:Core/Src/main.c **** 
 1234              		.loc 1 305 20 is_stmt 0 view .LVU320
 1235 02c6 08F10108 		add	r8, r8, #1
 1236              	.LVL108:
 308:Core/Src/main.c **** 
 1237              		.loc 1 308 9 is_stmt 1 view .LVU321
 1238 02ca 05AB     		add	r3, sp, #20
ARM GAS  /tmp/cc4bPAnR.s 			page 39


 1239 02cc 94E80300 		ldm	r4, {r0, r1}
 1240 02d0 83E80300 		stm	r3, {r0, r1}
 310:Core/Src/main.c ****           num_uniq_msgs++;
 1241              		.loc 1 310 9 view .LVU322
 310:Core/Src/main.c ****           num_uniq_msgs++;
 1242              		.loc 1 310 19 is_stmt 0 view .LVU323
 1243 02d4 BDF81930 		ldrh	r3, [sp, #25]	@ unaligned
 310:Core/Src/main.c ****           num_uniq_msgs++;
 1244              		.loc 1 310 12 view .LVU324
 1245 02d8 5345     		cmp	r3, r10
 1246 02da BCD0     		beq	.L34
 311:Core/Src/main.c ****           prev_rand_id = rx_msg.msg_id;
 1247              		.loc 1 311 11 is_stmt 1 view .LVU325
 311:Core/Src/main.c ****           prev_rand_id = rx_msg.msg_id;
 1248              		.loc 1 311 24 is_stmt 0 view .LVU326
 1249 02dc 09F10109 		add	r9, r9, #1
 1250              	.LVL109:
 312:Core/Src/main.c ****         }
 1251              		.loc 1 312 11 is_stmt 1 view .LVU327
 312:Core/Src/main.c ****         }
 1252              		.loc 1 312 24 is_stmt 0 view .LVU328
 1253 02e0 9A46     		mov	r10, r3
 1254 02e2 B8E7     		b	.L34
 1255              	.LVL110:
 1256              	.L44:
 299:Core/Src/main.c ****       do {
 1257              		.loc 1 299 15 view .LVU329
 1258 02e4 4FF00008 		mov	r8, #0
 1259              	.LVL111:
 299:Core/Src/main.c ****       do {
 1260              		.loc 1 299 15 view .LVU330
 1261 02e8 85E7     		b	.L36
 1262              	.L46:
 1263 02ea 00BF     		.align	2
 1264              	.L45:
 1265 02ec 00000000 		.word	_impure_ptr
 1266 02f0 00080140 		.word	1073809408
 1267 02f4 00000000 		.word	.LANCHOR3
 1268 02f8 00000000 		.word	hcan
 1269 02fc 00000000 		.word	hspi2
 1270 0300 00000000 		.word	.LC11
 1271 0304 14000000 		.word	.LC12
 1272 0308 00000000 		.word	htim2
 1273 030c 24000000 		.word	.LC13
 1274 0310 38000000 		.word	.LC14
 1275 0314 A8000000 		.word	.LC16
 1276 0318 BC000000 		.word	.LC17
 1277 031c 48000000 		.word	.LC15
 1278              	.LBE7:
 1279              		.cfi_endproc
 1280              	.LFE68:
 1282              		.global	pll_config
 1283              		.global	fhss_freqs
 1284              		.section	.rodata
 1285              		.align	2
 1286              		.set	.LANCHOR3,. + 0
 1287              	.LC0:
ARM GAS  /tmp/cc4bPAnR.s 			page 40


 1288 0000 20200000 		.word	8224
 1289 0004 00000000 		.word	0
 1290 0008 40200000 		.word	8256
 1291 000c 00000000 		.word	0
 1292 0010 00000000 		.word	0
 1293 0014 00000000 		.word	0
 1294 0018 01000000 		.word	1
 1295 001c 01000000 		.word	1
 1296 0020 01000000 		.word	1
 1297 0024 00000000 		.word	0
 1298              	.LC1:
 1299 0028 00010000 		.word	256
 1300 002c 00000000 		.word	0
 1301 0030 00000000 		.word	0
 1302 0034 00000000 		.word	0
 1303 0038 08000000 		.word	8
 1304 003c 00       		.byte	0
 1305 003d 000000   		.space	3
 1306              	.LC2:
 1307 0040 01       		.byte	1
 1308 0041 03       		.byte	3
 1309              		.section	.bss.i.0,"aw",%nobits
 1310              		.set	.LANCHOR1,. + 0
 1313              	i.0:
 1314 0000 00       		.space	1
 1315              		.section	.bss.pll_config,"aw",%nobits
 1316              		.align	2
 1317              		.set	.LANCHOR2,. + 0
 1320              	pll_config:
 1321 0000 00000000 		.space	60
 1321      00000000 
 1321      00000000 
 1321      00000000 
 1321      00000000 
 1322              		.section	.rodata.fhss_freqs,"a"
 1323              		.align	3
 1324              		.set	.LANCHOR0,. + 0
 1327              	fhss_freqs:
 1328 0000 CB669236 		.word	915564235
 1329 0004 00000000 		.word	0
 1330 0008 DDAAE835 		.word	904440541
 1331 000c 00000000 		.word	0
 1332 0010 38F4D435 		.word	903148600
 1333 0014 00000000 		.word	0
 1334 0018 3869E535 		.word	904227128
 1335 001c 00000000 		.word	0
 1336 0020 0D0BB036 		.word	917506829
 1337 0024 00000000 		.word	0
 1338 0028 D54F3436 		.word	909397973
 1339 002c 00000000 		.word	0
 1340 0030 1B612B36 		.word	908812571
 1341 0034 00000000 		.word	0
 1342 0038 0DA89036 		.word	915449869
 1343 003c 00000000 		.word	0
 1344 0040 73B7CA36 		.word	919254899
 1345 0044 00000000 		.word	0
 1346 0048 39613937 		.word	926507321
ARM GAS  /tmp/cc4bPAnR.s 			page 41


 1347 004c 00000000 		.word	0
 1348 0050 EFED2E37 		.word	925822447
 1349 0054 00000000 		.word	0
 1350 0058 B3E40437 		.word	923067571
 1351 005c 00000000 		.word	0
 1352 0060 F930DB35 		.word	903557369
 1353 0064 00000000 		.word	0
 1354 0068 F699A336 		.word	916691446
 1355 006c 00000000 		.word	0
 1356 0070 533F6236 		.word	912408403
 1357 0074 00000000 		.word	0
 1358 0078 CE1F9636 		.word	915808206
 1359 007c 00000000 		.word	0
 1360 0080 D999DF35 		.word	903846361
 1361 0084 00000000 		.word	0
 1362 0088 18EF8F36 		.word	915402520
 1363 008c 00000000 		.word	0
 1364 0090 82980536 		.word	906336386
 1365 0094 00000000 		.word	0
 1366 0098 74FFC335 		.word	902037364
 1367 009c 00000000 		.word	0
 1368 00a0 EC243336 		.word	909321452
 1369 00a4 00000000 		.word	0
 1370 00a8 0F421336 		.word	907231759
 1371 00ac 00000000 		.word	0
 1372 00b0 E39BC336 		.word	918789091
 1373 00b4 00000000 		.word	0
 1374 00b8 63A7FC35 		.word	905750371
 1375 00bc 00000000 		.word	0
 1376 00c0 37830437 		.word	923042615
 1377 00c4 00000000 		.word	0
 1378 00c8 60260636 		.word	906372704
 1379 00cc 00000000 		.word	0
 1380 00d0 088C6736 		.word	912755720
 1381 00d4 00000000 		.word	0
 1382 00d8 82F6E835 		.word	904459906
 1383 00dc 00000000 		.word	0
 1384 00e0 281C0636 		.word	906370088
 1385 00e4 00000000 		.word	0
 1386 00e8 CF050F37 		.word	923731407
 1387 00ec 00000000 		.word	0
 1388 00f0 79E4D935 		.word	903472249
 1389 00f4 00000000 		.word	0
 1390 00f8 57EE4A37 		.word	927657559
 1391 00fc 00000000 		.word	0
 1392 0100 ECF46536 		.word	912651500
 1393 0104 00000000 		.word	0
 1394 0108 C406C136 		.word	918619844
 1395 010c 00000000 		.word	0
 1396 0110 2FFB2C37 		.word	925694767
 1397 0114 00000000 		.word	0
 1398 0118 4D5D4937 		.word	927554893
 1399 011c 00000000 		.word	0
 1400 0120 0ECFCD36 		.word	919457550
 1401 0124 00000000 		.word	0
 1402 0128 319BA236 		.word	916626225
 1403 012c 00000000 		.word	0
ARM GAS  /tmp/cc4bPAnR.s 			page 42


 1404 0130 8BD40336 		.word	906220683
 1405 0134 00000000 		.word	0
 1406 0138 07AFD936 		.word	920235783
 1407 013c 00000000 		.word	0
 1408 0140 A019F436 		.word	921967008
 1409 0144 00000000 		.word	0
 1410 0148 2EFEC735 		.word	902299182
 1411 014c 00000000 		.word	0
 1412 0150 6B295B36 		.word	911944043
 1413 0154 00000000 		.word	0
 1414 0158 2E570D36 		.word	906843950
 1415 015c 00000000 		.word	0
 1416 0160 175A3337 		.word	926112279
 1417 0164 00000000 		.word	0
 1418 0168 70A64336 		.word	910403184
 1419 016c 00000000 		.word	0
 1420 0170 72E31137 		.word	923919218
 1421 0174 00000000 		.word	0
 1422 0178 1F88B836 		.word	918063135
 1423 017c 00000000 		.word	0
 1424 0180 3B8A1537 		.word	924158523
 1425 0184 00000000 		.word	0
 1426 0188 7ACFE936 		.word	921292666
 1427 018c 00000000 		.word	0
 1428 0190 F451EE35 		.word	904810996
 1429 0194 00000000 		.word	0
 1430 0198 031DFC35 		.word	905714947
 1431 019c 00000000 		.word	0
 1432 01a0 2D166F36 		.word	913249837
 1433 01a4 00000000 		.word	0
 1434 01a8 71EC7B36 		.word	914091121
 1435 01ac 00000000 		.word	0
 1436 01b0 45E62B37 		.word	925623877
 1437 01b4 00000000 		.word	0
 1438 01b8 A8CE2737 		.word	925355688
 1439 01bc 00000000 		.word	0
 1440 01c0 E4CC0436 		.word	906284260
 1441 01c4 00000000 		.word	0
 1442 01c8 F714E436 		.word	920917239
 1443 01cc 00000000 		.word	0
 1444 01d0 7748B736 		.word	917981303
 1445 01d4 00000000 		.word	0
 1446 01d8 F942FA35 		.word	905593593
 1447 01dc 00000000 		.word	0
 1448 01e0 42F4A836 		.word	917042242
 1449 01e4 00000000 		.word	0
 1450 01e8 5784C935 		.word	902399063
 1451 01ec 00000000 		.word	0
 1452 01f0 1E601037 		.word	923820062
 1453 01f4 00000000 		.word	0
 1454 01f8 CC553637 		.word	926307788
 1455 01fc 00000000 		.word	0
 1456 0200 C4673636 		.word	909535172
 1457 0204 00000000 		.word	0
 1458 0208 F5F31736 		.word	907539445
 1459 020c 00000000 		.word	0
 1460 0210 1D112537 		.word	925176093
ARM GAS  /tmp/cc4bPAnR.s 			page 43


 1461 0214 00000000 		.word	0
 1462 0218 23F8F035 		.word	904984611
 1463 021c 00000000 		.word	0
 1464 0220 7A933236 		.word	909284218
 1465 0224 00000000 		.word	0
 1466 0228 4441CA36 		.word	919224644
 1467 022c 00000000 		.word	0
 1468 0230 0FFCFC35 		.word	905772047
 1469 0234 00000000 		.word	0
 1470 0238 D10ADF36 		.word	920586961
 1471 023c 00000000 		.word	0
 1472 0240 C903A036 		.word	916456393
 1473 0244 00000000 		.word	0
 1474 0248 F2B81336 		.word	907262194
 1475 024c 00000000 		.word	0
 1476 0250 EBA6A736 		.word	916956907
 1477 0254 00000000 		.word	0
 1478 0258 15473736 		.word	909592341
 1479 025c 00000000 		.word	0
 1480 0260 566D1B37 		.word	924544342
 1481 0264 00000000 		.word	0
 1482 0268 E49A4037 		.word	926980836
 1483 026c 00000000 		.word	0
 1484 0270 4BDBFB36 		.word	922475339
 1485 0274 00000000 		.word	0
 1486 0278 D2EF1A37 		.word	924512210
 1487 027c 00000000 		.word	0
 1488 0280 70293537 		.word	926230896
 1489 0284 00000000 		.word	0
 1490 0288 24E9AB36 		.word	917236004
 1491 028c 00000000 		.word	0
 1492 0290 E1C56436 		.word	912573921
 1493 0294 00000000 		.word	0
 1494 0298 2D67D535 		.word	903178029
 1495 029c 00000000 		.word	0
 1496 02a0 56C21F37 		.word	924828246
 1497 02a4 00000000 		.word	0
 1498 02a8 F2630837 		.word	923296754
 1499 02ac 00000000 		.word	0
 1500 02b0 9B80A736 		.word	916947099
 1501 02b4 00000000 		.word	0
 1502 02b8 9F6F4A36 		.word	910847903
 1503 02bc 00000000 		.word	0
 1504 02c0 11E73337 		.word	926148369
 1505 02c4 00000000 		.word	0
 1506 02c8 1B798036 		.word	914389275
 1507 02cc 00000000 		.word	0
 1508 02d0 E6F79636 		.word	915863526
 1509 02d4 00000000 		.word	0
 1510 02d8 84795036 		.word	911243652
 1511 02dc 00000000 		.word	0
 1512 02e0 7B59E235 		.word	904026491
 1513 02e4 00000000 		.word	0
 1514 02e8 59C8EF35 		.word	904906841
 1515 02ec 00000000 		.word	0
 1516 02f0 51986736 		.word	912758865
 1517 02f4 00000000 		.word	0
ARM GAS  /tmp/cc4bPAnR.s 			page 44


 1518 02f8 CD6CD735 		.word	903310541
 1519 02fc 00000000 		.word	0
 1520 0300 D5931736 		.word	907514837
 1521 0304 00000000 		.word	0
 1522 0308 EAA23537 		.word	926261994
 1523 030c 00000000 		.word	0
 1524 0310 FE0C4537 		.word	927272190
 1525 0314 00000000 		.word	0
 1526 0318 043EE135 		.word	903953924
 1527 031c 00000000 		.word	0
 1528              		.text
 1529              	.Letext0:
 1530              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 1531              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1532              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1533              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1534              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1535              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1536              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1537              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 1538              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h"
 1539              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 1540              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 1541              		.file 14 "Core/Inc/main.h"
 1542              		.file 15 "Core/Inc/can.h"
 1543              		.file 16 "Core/Inc/spi.h"
 1544              		.file 17 "Core/Inc/tim.h"
 1545              		.file 18 "Core/Inc/usart.h"
 1546              		.file 19 "Core/Inc/adf4351.h"
 1547              		.file 20 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 1548              		.file 21 "/usr/include/newlib/sys/_types.h"
 1549              		.file 22 "/usr/include/newlib/sys/reent.h"
 1550              		.file 23 "/usr/include/newlib/sys/lock.h"
 1551              		.file 24 "Core/Inc/nrf24l01.h"
 1552              		.file 25 "/usr/include/newlib/stdio.h"
 1553              		.file 26 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1554              		.file 27 "Core/Inc/gpio.h"
 1555              		.file 28 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1556              		.file 29 "<built-in>"
ARM GAS  /tmp/cc4bPAnR.s 			page 45


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc4bPAnR.s:16     .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cc4bPAnR.s:24     .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc4bPAnR.s:68     .text.HAL_TIM_PeriodElapsedCallback:000000000000002c $d
     /tmp/cc4bPAnR.s:75     .text.cmd_sm_init:0000000000000000 $t
     /tmp/cc4bPAnR.s:82     .text.cmd_sm_init:0000000000000000 cmd_sm_init
     /tmp/cc4bPAnR.s:198    .text.cmd_sm_init:0000000000000084 $d
     /tmp/cc4bPAnR.s:205    .rodata.read_back_config.str1.4:0000000000000000 $d
     /tmp/cc4bPAnR.s:231    .text.read_back_config:0000000000000000 $t
     /tmp/cc4bPAnR.s:238    .text.read_back_config:0000000000000000 read_back_config
     /tmp/cc4bPAnR.s:450    .text.read_back_config:0000000000000158 $d
     /tmp/cc4bPAnR.s:463    .text.__io_putchar:0000000000000000 $t
     /tmp/cc4bPAnR.s:470    .text.__io_putchar:0000000000000000 __io_putchar
     /tmp/cc4bPAnR.s:506    .text.__io_putchar:000000000000001c $d
     /tmp/cc4bPAnR.s:511    .text.Error_Handler:0000000000000000 $t
     /tmp/cc4bPAnR.s:518    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc4bPAnR.s:550    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc4bPAnR.s:557    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc4bPAnR.s:665    .rodata.main.str1.4:0000000000000000 $d
     /tmp/cc4bPAnR.s:688    .text.main:0000000000000000 $t
     /tmp/cc4bPAnR.s:695    .text.main:0000000000000000 main
     /tmp/cc4bPAnR.s:1265   .text.main:00000000000002ec $d
     /tmp/cc4bPAnR.s:1320   .bss.pll_config:0000000000000000 pll_config
     /tmp/cc4bPAnR.s:1327   .rodata.fhss_freqs:0000000000000000 fhss_freqs
     /tmp/cc4bPAnR.s:1285   .rodata:0000000000000000 $d
     /tmp/cc4bPAnR.s:1313   .bss.i.0:0000000000000000 i.0
     /tmp/cc4bPAnR.s:1314   .bss.i.0:0000000000000000 $d
     /tmp/cc4bPAnR.s:1316   .bss.pll_config:0000000000000000 $d
     /tmp/cc4bPAnR.s:1323   .rodata.fhss_freqs:0000000000000000 $d

UNDEFINED SYMBOLS
adf4350_out_altvoltage0_frequency
adf4350_out_altvoltage0_powerdown
adf4350_setup
memset
tx_rx_spi_cmd
printf
hspi2
HAL_UART_Transmit
huart3
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
setvbuf
MX_GPIO_Init
MX_SPI1_Init
MX_TIM2_Init
MX_SPI2_Init
MX_CAN_Init
MX_USART3_UART_Init
HAL_GPIO_WritePin
HAL_GPIO_ReadPin
HAL_CAN_ConfigFilter
HAL_CAN_Start
tx_spi_cmd
HAL_Delay
ARM GAS  /tmp/cc4bPAnR.s 			page 46


nrf24l01_setup_rf
HAL_CAN_GetRxFifoFillLevel
HAL_CAN_GetRxMessage
HAL_TIM_Base_Start_IT
HAL_GetTick
nrf24l01_get_status
HAL_TIM_Base_Stop_IT
HAL_CAN_GetTxMailboxesFreeLevel
HAL_CAN_AddTxMessage
_impure_ptr
hcan
htim2
