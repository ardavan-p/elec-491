ARM GAS  /tmp/cc6OZ6uR.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_TIM_PeriodElapsedCallback
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	HAL_TIM_PeriodElapsedCallback:
  25              	.LVL0:
  26              	.LFB70:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   * @author         : Ardavan Pourkeramati
   7:Core/Src/main.c ****   ******************************************************************************
   8:Core/Src/main.c ****   * @attention
   9:Core/Src/main.c ****   *
  10:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  11:Core/Src/main.c ****   * All rights reserved.
  12:Core/Src/main.c ****   *
  13:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  14:Core/Src/main.c ****   * in the root directory of this software component.
  15:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "can.h"
  23:Core/Src/main.c **** #include "spi.h"
  24:Core/Src/main.c **** #include "tim.h"
  25:Core/Src/main.c **** #include "usart.h"
  26:Core/Src/main.c **** #include "gpio.h"
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  30:Core/Src/main.c **** #include "adf4351.h"
  31:Core/Src/main.c **** #include "nrf24l01.h"
ARM GAS  /tmp/cc6OZ6uR.s 			page 2


  32:Core/Src/main.c **** #include <stdio.h>
  33:Core/Src/main.c **** #include <stdbool.h>
  34:Core/Src/main.c **** /* USER CODE END Includes */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  37:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* USER CODE END PTD */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  42:Core/Src/main.c **** /* USER CODE BEGIN PD */
  43:Core/Src/main.c **** #define FHSS_NUM_FREQS (100)
  44:Core/Src/main.c **** /* USER CODE END PD */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  47:Core/Src/main.c **** /* USER CODE BEGIN PM */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* USER CODE END PM */
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* USER CODE BEGIN PV */
  54:Core/Src/main.c **** const uint64_t fhss_freqs[FHSS_NUM_FREQS] = {
  55:Core/Src/main.c ****     915564235, 904440541, 903148600, 904227128, 917506829, 
  56:Core/Src/main.c ****     909397973, 908812571, 915449869, 919254899, 926507321, 
  57:Core/Src/main.c ****     925822447, 923067571, 903557369, 916691446, 912408403, 
  58:Core/Src/main.c ****     915808206, 903846361, 915402520, 906336386, 902037364, 
  59:Core/Src/main.c ****     909321452, 907231759, 918789091, 905750371, 923042615, 
  60:Core/Src/main.c ****     906372704, 912755720, 904459906, 906370088, 923731407, 
  61:Core/Src/main.c ****     903472249, 927657559, 912651500, 918619844, 925694767, 
  62:Core/Src/main.c ****     927554893, 919457550, 916626225, 906220683, 920235783, 
  63:Core/Src/main.c ****     921967008, 902299182, 911944043, 906843950, 926112279, 
  64:Core/Src/main.c ****     910403184, 923919218, 918063135, 924158523, 921292666, 
  65:Core/Src/main.c ****     904810996, 905714947, 913249837, 914091121, 925623877, 
  66:Core/Src/main.c ****     925355688, 906284260, 920917239, 917981303, 905593593, 
  67:Core/Src/main.c ****     917042242, 902399063, 923820062, 926307788, 909535172, 
  68:Core/Src/main.c ****     907539445, 925176093, 904984611, 909284218, 919224644, 
  69:Core/Src/main.c ****     905772047, 920586961, 916456393, 907262194, 916956907, 
  70:Core/Src/main.c ****     909592341, 924544342, 926980836, 922475339, 924512210, 
  71:Core/Src/main.c ****     926230896, 917236004, 912573921, 903178029, 924828246, 
  72:Core/Src/main.c ****     923296754, 916947099, 910847903, 926148369, 914389275, 
  73:Core/Src/main.c ****     915863526, 911243652, 904026491, 904906841, 912758865, 
  74:Core/Src/main.c ****     903310541, 907514837, 926261994, 927272190, 903953924
  75:Core/Src/main.c **** };
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** /* USER CODE END PV */
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  80:Core/Src/main.c **** void SystemClock_Config(void);
  81:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  82:Core/Src/main.c **** void cmd_sm_init(void);
  83:Core/Src/main.c **** void read_back_config(void);
  84:Core/Src/main.c **** /* USER CODE END PFP */
  85:Core/Src/main.c **** 
  86:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  87:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  88:Core/Src/main.c **** 
ARM GAS  /tmp/cc6OZ6uR.s 			page 3


  89:Core/Src/main.c **** /* USER CODE END 0 */
  90:Core/Src/main.c **** 
  91:Core/Src/main.c **** /**
  92:Core/Src/main.c ****   * @brief  The application entry point.
  93:Core/Src/main.c ****   * @retval int
  94:Core/Src/main.c ****   */
  95:Core/Src/main.c **** int main(void)
  96:Core/Src/main.c **** {
  97:Core/Src/main.c **** 
  98:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* USER CODE END 1 */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 105:Core/Src/main.c ****   HAL_Init();
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****   // Disable buffering for stdout:
 110:Core/Src/main.c ****   setvbuf(stdout, NULL, _IONBF, 0);
 111:Core/Src/main.c **** 
 112:Core/Src/main.c ****   /* USER CODE END Init */
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   /* Configure the system clock */
 115:Core/Src/main.c ****   SystemClock_Config();
 116:Core/Src/main.c **** 
 117:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****   /* USER CODE END SysInit */
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****   /* Initialize all configured peripherals */
 122:Core/Src/main.c ****   MX_GPIO_Init();
 123:Core/Src/main.c ****   MX_SPI1_Init();
 124:Core/Src/main.c ****   MX_TIM2_Init();
 125:Core/Src/main.c ****   MX_SPI2_Init();
 126:Core/Src/main.c ****   MX_CAN_Init();
 127:Core/Src/main.c ****   MX_USART3_UART_Init();
 128:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****   // Set up initial state for SPI IO pins:
 131:Core/Src/main.c ****   HAL_GPIO_WritePin(SPI1_CSn_GPIO_Port, SPI1_CSn_Pin, 1);
 132:Core/Src/main.c ****   HAL_GPIO_WritePin(SPI1_LD_GPIO_Port, SPI1_LD_Pin, 1);
 133:Core/Src/main.c **** 
 134:Core/Src/main.c ****   // PTN - SN pair status:
 135:Core/Src/main.c ****   bool ptn_sn_paired = false;
 136:Core/Src/main.c ****   uint8_t paired_sn_id = SN_ID_UNPAIRED;
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   // PTN ID Detection:
 139:Core/Src/main.c ****   uint8_t ptn_id = 0;
 140:Core/Src/main.c ****   if (HAL_GPIO_ReadPin(PTN_ID_Port, PTN_ID_Pin) == 1)
 141:Core/Src/main.c ****   {
 142:Core/Src/main.c ****     ptn_id = PTN_1;
 143:Core/Src/main.c ****   }
 144:Core/Src/main.c ****   else
 145:Core/Src/main.c ****   {
ARM GAS  /tmp/cc6OZ6uR.s 			page 4


 146:Core/Src/main.c ****     ptn_id = PTN_2;
 147:Core/Src/main.c ****   }
 148:Core/Src/main.c ****   
 149:Core/Src/main.c ****   // Initialize the ADF4351 and keep it off:
 150:Core/Src/main.c ****   cmd_sm_init();
 151:Core/Src/main.c ****   adf4350_out_altvoltage0_powerdown(1);
 152:Core/Src/main.c ****   HAL_GPIO_WritePin(PTN_RF_ON_LED_Port, PTN_RF_ON_LED_Pin, 0);
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****   // CAN Setup:
 155:Core/Src/main.c ****   CAN_FilterTypeDef can_filter = {
 156:Core/Src/main.c ****       .FilterIdHigh = (uint32_t)(PTN_REQUEST_ID << 5 | 0x0000),
 157:Core/Src/main.c ****       .FilterIdLow = 0,
 158:Core/Src/main.c ****       .FilterMaskIdHigh = (uint32_t)(PTN_RESET << 5 | 0x0000),
 159:Core/Src/main.c ****       .FilterMaskIdLow = 0,
 160:Core/Src/main.c ****       .FilterFIFOAssignment = CAN_FILTER_FIFO0,
 161:Core/Src/main.c ****       .FilterBank = 0,
 162:Core/Src/main.c ****       .FilterMode = CAN_FILTERMODE_IDLIST,
 163:Core/Src/main.c ****       .FilterScale = CAN_FILTERSCALE_32BIT,
 164:Core/Src/main.c ****       .FilterActivation = CAN_FILTER_ENABLE,
 165:Core/Src/main.c ****       .SlaveStartFilterBank = 0,
 166:Core/Src/main.c ****   };
 167:Core/Src/main.c **** 
 168:Core/Src/main.c ****   HAL_CAN_ConfigFilter(&hcan, &can_filter);
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****   HAL_CAN_Start(&hcan);
 171:Core/Src/main.c **** 
 172:Core/Src/main.c ****   CAN_TxHeaderTypeDef tx_header = {
 173:Core/Src/main.c ****       .StdId = PTN_RESPONSE_ID,
 174:Core/Src/main.c ****       .ExtId = 0,
 175:Core/Src/main.c ****       .IDE = CAN_ID_STD,
 176:Core/Src/main.c ****       .RTR = CAN_RTR_DATA,
 177:Core/Src/main.c ****       .DLC = CAN_MSG_FRAME_LEN_BYTES,
 178:Core/Src/main.c ****       .TransmitGlobalTime = DISABLE,
 179:Core/Src/main.c ****   };
 180:Core/Src/main.c **** 
 181:Core/Src/main.c ****   uint8_t can_tx_payload[CAN_MSG_FRAME_LEN_BYTES] = {0};
 182:Core/Src/main.c ****   uint8_t can_rx_payload[CAN_MSG_FRAME_LEN_BYTES] = {0};
 183:Core/Src/main.c **** 
 184:Core/Src/main.c ****   HAL_StatusTypeDef can_tx_status = HAL_OK;
 185:Core/Src/main.c ****   HAL_StatusTypeDef can_rx_status = HAL_OK;
 186:Core/Src/main.c **** 
 187:Core/Src/main.c ****   CAN_RxHeaderTypeDef rx_header = {0};
 188:Core/Src/main.c ****   uint32_t can_tx_mailbox = 0;
 189:Core/Src/main.c **** 
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****   // NRF24L01 Setup:
 192:Core/Src/main.c ****   uint8_t tx_payload[MAX_DATA_BYTES] = {0};
 193:Core/Src/main.c ****   uint8_t rf_payload[PAYLOAD_SZ_BYTES] = {0};
 194:Core/Src/main.c **** 
 195:Core/Src/main.c ****   // [REQUIRED] Make sure to power on the device
 196:Core/Src/main.c ****   tx_payload[0] = 0b00111111;
 197:Core/Src/main.c ****   tx_spi_cmd(&hspi2, W_REGISTER(CONFIG_REGISTER), tx_payload, 1);
 198:Core/Src/main.c ****   HAL_Delay(500);
 199:Core/Src/main.c ****   
 200:Core/Src/main.c ****   // [REQUIRED] Make sure to power on the device
 201:Core/Src/main.c ****   tx_payload[0] = 0b00111111;
 202:Core/Src/main.c ****   tx_spi_cmd(&hspi2, W_REGISTER(CONFIG_REGISTER), tx_payload, 1);
ARM GAS  /tmp/cc6OZ6uR.s 			page 5


 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****   // [REQUIRED] Set payload size for pipe 0
 205:Core/Src/main.c ****   tx_payload[0] = PAYLOAD_SZ_BYTES;
 206:Core/Src/main.c ****   tx_spi_cmd(&hspi2, W_REGISTER(RX_PW_P0), tx_payload, 1);
 207:Core/Src/main.c **** 
 208:Core/Src/main.c ****   // [REQUIRED] Set the RF configuration
 209:Core/Src/main.c ****   NrfRfSetup_t rf_config = {.data_power = ZERO_DBM, .data_rate = TWO_MBPS};
 210:Core/Src/main.c ****   nrf24l01_setup_rf(&hspi2, &rf_config);
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   tx_spi_cmd(&hspi2, FLUSH_RX, NULL, 0);
 213:Core/Src/main.c **** 
 214:Core/Src/main.c ****   // Read back the configs (for debugging):
 215:Core/Src/main.c ****   read_back_config();
 216:Core/Src/main.c **** 
 217:Core/Src/main.c ****   // Initialize PTN status variable:
 218:Core/Src/main.c ****   uint8_t ptn_status = PTN_OK;
 219:Core/Src/main.c **** 
 220:Core/Src/main.c ****   /* USER CODE END 2 */
 221:Core/Src/main.c **** 
 222:Core/Src/main.c ****   /* Infinite loop */
 223:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 224:Core/Src/main.c ****   while (1)
 225:Core/Src/main.c ****   {
 226:Core/Src/main.c ****     // Ensure that RF output is off:
 227:Core/Src/main.c ****     adf4350_out_altvoltage0_powerdown(1);
 228:Core/Src/main.c ****     HAL_GPIO_WritePin(PTN_RF_ON_LED_Port, PTN_RF_ON_LED_Pin, 0);
 229:Core/Src/main.c **** 
 230:Core/Src/main.c ****     // Wait for CAN message:
 231:Core/Src/main.c ****     printf("\n\rWaiting for CAN");
 232:Core/Src/main.c ****     while(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) <= 0);
 233:Core/Src/main.c ****     printf("\n\rCAN received");
 234:Core/Src/main.c ****     can_rx_status = HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &rx_header, can_rx_payload);
 235:Core/Src/main.c **** 
 236:Core/Src/main.c ****     // Decode the CAN message:
 237:Core/Src/main.c ****     const uint16_t ptn_can_id = rx_header.StdId;
 238:Core/Src/main.c ****     const uint16_t received_ptn_id = can_rx_payload[0];
 239:Core/Src/main.c ****     switch (ptn_can_id)
 240:Core/Src/main.c ****     {
 241:Core/Src/main.c ****       case (PTN_REQUEST_ID):
 242:Core/Src/main.c ****       {
 243:Core/Src/main.c ****         if (received_ptn_id == ptn_id)
 244:Core/Src/main.c ****         {
 245:Core/Src/main.c ****           goto request_handle;
 246:Core/Src/main.c ****         }
 247:Core/Src/main.c ****         else
 248:Core/Src/main.c ****         {
 249:Core/Src/main.c ****           goto end_while;
 250:Core/Src/main.c ****         }
 251:Core/Src/main.c ****       }
 252:Core/Src/main.c ****       break;
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****       case (PTN_RESET):
 255:Core/Src/main.c ****       {
 256:Core/Src/main.c ****         ptn_sn_paired = false;
 257:Core/Src/main.c ****         paired_sn_id = SN_ID_UNPAIRED;
 258:Core/Src/main.c ****         goto end_while;
 259:Core/Src/main.c ****       }
ARM GAS  /tmp/cc6OZ6uR.s 			page 6


 260:Core/Src/main.c ****       break;
 261:Core/Src/main.c **** 
 262:Core/Src/main.c ****       default:
 263:Core/Src/main.c ****       {
 264:Core/Src/main.c ****         goto end_while;
 265:Core/Src/main.c ****       }
 266:Core/Src/main.c ****       break;
 267:Core/Src/main.c ****     }
 268:Core/Src/main.c **** 
 269:Core/Src/main.c **** request_handle:
 270:Core/Src/main.c ****     // NRF24L01 chip enable (CE):
 271:Core/Src/main.c ****     HAL_GPIO_WritePin(CHIP_ENABLE_GPIO_Port, CHIP_ENABLE_Pin, 1);
 272:Core/Src/main.c ****     tx_spi_cmd(&hspi2, FLUSH_RX, NULL, 0);
 273:Core/Src/main.c **** 
 274:Core/Src/main.c ****     // When CAN message received, turn on RF power and frequency hopping:
 275:Core/Src/main.c ****     printf("\n\rRF power ON");
 276:Core/Src/main.c ****     HAL_GPIO_WritePin(PTN_RF_ON_LED_Port, PTN_RF_ON_LED_Pin, 1);
 277:Core/Src/main.c ****     adf4350_out_altvoltage0_powerdown(0);
 278:Core/Src/main.c ****     HAL_TIM_Base_Start_IT(&htim2);
 279:Core/Src/main.c **** 
 280:Core/Src/main.c ****     // Prepare to receive data from NRF24L01:
 281:Core/Src/main.c ****     int num_rx_msgs = 0;
 282:Core/Src/main.c ****     int num_uniq_msgs = 0;
 283:Core/Src/main.c ****     uint32_t prev_rand_id = 0;
 284:Core/Src/main.c **** 
 285:Core/Src/main.c ****     uint8_t cur_status = 0;
 286:Core/Src/main.c ****     uint8_t rx_fifo_empty = 1;
 287:Core/Src/main.c ****     uint8_t fifo_status = 0;
 288:Core/Src/main.c ****     uint8_t rxbuffer[RX_BUF_SZ_BYTES] = {0};
 289:Core/Src/main.c **** 
 290:Core/Src/main.c ****     uint32_t ref_time = HAL_GetTick();
 291:Core/Src/main.c ****     uint32_t millis_time = HAL_GetTick() - ref_time;
 292:Core/Src/main.c **** 
 293:Core/Src/main.c ****     
 294:Core/Src/main.c ****     // Poll the NRF24L01 until data is received. Start a timeout timer so RF output is not on indef
 295:Core/Src/main.c ****     printf("\n\rWaiting for NRF");
 296:Core/Src/main.c ****     while((!STATUS_RX_DR(nrf24l01_get_status(&hspi2))) && millis_time < NRF24L01_RX_TIMEOUT)
 297:Core/Src/main.c ****     {
 298:Core/Src/main.c ****       millis_time = HAL_GetTick() - ref_time;
 299:Core/Src/main.c ****     }
 300:Core/Src/main.c ****   
 301:Core/Src/main.c ****     // Power down the RF output:
 302:Core/Src/main.c ****     printf("\n\rRF power OFF");
 303:Core/Src/main.c ****     HAL_TIM_Base_Stop_IT(&htim2);
 304:Core/Src/main.c ****     adf4350_out_altvoltage0_powerdown(1);
 305:Core/Src/main.c ****     HAL_GPIO_WritePin(PTN_RF_ON_LED_Port, PTN_RF_ON_LED_Pin, 0);
 306:Core/Src/main.c **** 
 307:Core/Src/main.c ****     // If timeout timer did not expire (i.e., NRF24L01 received data), then go ahead and store the 
 308:Core/Src/main.c ****     sensor_msg_t rx_msg = {0};
 309:Core/Src/main.c ****     if (millis_time < NRF24L01_RX_TIMEOUT)
 310:Core/Src/main.c ****     {
 311:Core/Src/main.c ****       printf("\n\rNRF received data");
 312:Core/Src/main.c **** 
 313:Core/Src/main.c ****       ptn_status = PTN_OK;
 314:Core/Src/main.c **** 
 315:Core/Src/main.c ****       do
 316:Core/Src/main.c ****       {
ARM GAS  /tmp/cc6OZ6uR.s 			page 7


 317:Core/Src/main.c ****         // Step 1 - Read the RX payload:
 318:Core/Src/main.c ****         tx_rx_spi_cmd(&hspi2, R_RX_PAYLOAD, NULL, 0, rxbuffer, PAYLOAD_SZ_BYTES + 1);
 319:Core/Src/main.c **** 
 320:Core/Src/main.c ****         num_rx_msgs++;
 321:Core/Src/main.c **** 
 322:Core/Src/main.c ****         // Unpack the message into its components:
 323:Core/Src/main.c ****         memcpy((void*)(&rx_msg), (void*)(&rxbuffer), PAYLOAD_SZ_BYTES);
 324:Core/Src/main.c **** 
 325:Core/Src/main.c ****         if (rx_msg.msg_id != prev_rand_id)
 326:Core/Src/main.c ****         {
 327:Core/Src/main.c ****           num_uniq_msgs++;
 328:Core/Src/main.c ****           prev_rand_id = rx_msg.msg_id;
 329:Core/Src/main.c ****         }
 330:Core/Src/main.c **** 
 331:Core/Src/main.c ****         printf("[m: %d] [u: %d] Received message with id = 0x%04x, node_id = 0x%02x! pressure = %d,
 332:Core/Src/main.c ****             num_rx_msgs, num_uniq_msgs, rx_msg.msg_id, rx_msg.node_id, rx_msg.pressure, rx_msg.temp
 333:Core/Src/main.c **** 
 334:Core/Src/main.c ****         // Clear out the RX buffer:
 335:Core/Src/main.c ****         memset(&rxbuffer, 0, sizeof(rxbuffer));
 336:Core/Src/main.c **** 
 337:Core/Src/main.c ****         // Step 2 - Clear the RX_DR IRQ bit:
 338:Core/Src/main.c ****         tx_payload[0] = 0b01000000;
 339:Core/Src/main.c ****         tx_spi_cmd(&hspi2, W_REGISTER(STATUS), tx_payload, 1);
 340:Core/Src/main.c **** 
 341:Core/Src/main.c ****         // Step 3 - Check FIFO_STATUS to see if there's any more messages:
 342:Core/Src/main.c ****         tx_rx_spi_cmd(&hspi2, R_REGISTER(FIFO_STATUS), NULL, 0, rxbuffer, 1);
 343:Core/Src/main.c ****         fifo_status = rxbuffer[0];
 344:Core/Src/main.c ****         rx_fifo_empty = FIFO_STATUS_RX_EMPTY(fifo_status);
 345:Core/Src/main.c **** 
 346:Core/Src/main.c ****       } while (!rx_fifo_empty);
 347:Core/Src/main.c **** 
 348:Core/Src/main.c ****       // If the PTN is not paired to any SN, then pair the received SN to this PTN
 349:Core/Src/main.c ****       // The bool 'ptn_sn_paired' is only false after a reset command from the master ECU
 350:Core/Src/main.c ****       // 'ptn_sn_paired' will remain false unless a sensor node responds to this PTN 
 351:Core/Src/main.c ****       if (ptn_sn_paired == false)
 352:Core/Src/main.c ****       {
 353:Core/Src/main.c ****         paired_sn_id = rx_msg.node_id;
 354:Core/Src/main.c ****         ptn_sn_paired = true;
 355:Core/Src/main.c ****       }
 356:Core/Src/main.c **** 
 357:Core/Src/main.c ****       // Detect if there is a mismatch by comparing to the sensor node ID stored during pairing:
 358:Core/Src/main.c ****       if (paired_sn_id != rx_msg.node_id)
 359:Core/Src/main.c ****       {
 360:Core/Src/main.c ****         ptn_status = PTN_ERROR_MISMATCH;
 361:Core/Src/main.c ****       }
 362:Core/Src/main.c ****     }
 363:Core/Src/main.c ****     else  // Else, timeout timer expired, so set an error:
 364:Core/Src/main.c ****     {
 365:Core/Src/main.c ****       ptn_status = PTN_ERROR_TIMEOUT;
 366:Core/Src/main.c ****       printf("\n\rERROR: Timeout");
 367:Core/Src/main.c ****     }
 368:Core/Src/main.c **** 
 369:Core/Src/main.c ****     // NRF24L01 chip enable (CE):
 370:Core/Src/main.c ****     HAL_GPIO_WritePin(CHIP_ENABLE_GPIO_Port, CHIP_ENABLE_Pin, 0);
 371:Core/Src/main.c **** 
 372:Core/Src/main.c ****     // Pack and transmit CAN message:
 373:Core/Src/main.c ****     printf("\n\rSending back PTN RESPONSE");
ARM GAS  /tmp/cc6OZ6uR.s 			page 8


 374:Core/Src/main.c ****     *((uint16_t*)can_tx_payload) = rx_msg.pressure;
 375:Core/Src/main.c ****     *((uint16_t*)can_tx_payload + 1) = rx_msg.temperature;
 376:Core/Src/main.c ****     *((uint8_t*)can_tx_payload + 4) = ptn_id;
 377:Core/Src/main.c ****     *((uint8_t*)can_tx_payload + 5) = rx_msg.node_id;
 378:Core/Src/main.c ****     *((uint8_t*)can_tx_payload + 6) = ptn_status;
 379:Core/Src/main.c ****     *((uint8_t*)can_tx_payload + 7) = (uint8_t)ptn_sn_paired;
 380:Core/Src/main.c **** 
 381:Core/Src/main.c ****     while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) <= 0);
 382:Core/Src/main.c ****     can_tx_status = HAL_CAN_AddTxMessage(&hcan, &tx_header, can_tx_payload, &can_tx_mailbox);
 383:Core/Src/main.c **** 
 384:Core/Src/main.c **** 
 385:Core/Src/main.c **** end_while:
 386:Core/Src/main.c ****     // Ensure the RF output is off:
 387:Core/Src/main.c ****     adf4350_out_altvoltage0_powerdown(1);
 388:Core/Src/main.c ****     HAL_GPIO_WritePin(PTN_RF_ON_LED_Port, PTN_RF_ON_LED_Pin, 0);
 389:Core/Src/main.c ****     /* USER CODE END WHILE */
 390:Core/Src/main.c **** 
 391:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 392:Core/Src/main.c ****   }  
 393:Core/Src/main.c ****   /* USER CODE END 3 */
 394:Core/Src/main.c **** }
 395:Core/Src/main.c **** 
 396:Core/Src/main.c **** /**
 397:Core/Src/main.c ****   * @brief System Clock Configuration
 398:Core/Src/main.c ****   * @retval None
 399:Core/Src/main.c ****   */
 400:Core/Src/main.c **** void SystemClock_Config(void)
 401:Core/Src/main.c **** {
 402:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 403:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 404:Core/Src/main.c **** 
 405:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 406:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 407:Core/Src/main.c ****   */
 408:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 409:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 410:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 411:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 412:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 413:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 414:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 415:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 416:Core/Src/main.c ****   {
 417:Core/Src/main.c ****     Error_Handler();
 418:Core/Src/main.c ****   }
 419:Core/Src/main.c **** 
 420:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 421:Core/Src/main.c ****   */
 422:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 423:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 424:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 425:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 426:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 427:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 428:Core/Src/main.c **** 
 429:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 430:Core/Src/main.c ****   {
ARM GAS  /tmp/cc6OZ6uR.s 			page 9


 431:Core/Src/main.c ****     Error_Handler();
 432:Core/Src/main.c ****   }
 433:Core/Src/main.c **** }
 434:Core/Src/main.c **** 
 435:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 436:Core/Src/main.c **** 
 437:Core/Src/main.c **** 
 438:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
 439:Core/Src/main.c **** {
  28              		.loc 1 439 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 439 1 is_stmt 0 view .LVU1
  33 0000 10B5     		push	{r4, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 14, -4
 440:Core/Src/main.c ****   static uint8_t i = 0;
  38              		.loc 1 440 3 is_stmt 1 view .LVU2
 441:Core/Src/main.c ****   adf4350_out_altvoltage0_frequency(fhss_freqs[i]);
  39              		.loc 1 441 3 view .LVU3
  40              		.loc 1 441 47 is_stmt 0 view .LVU4
  41 0002 0A4C     		ldr	r4, .L3
  42 0004 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
  43 0006 0A4B     		ldr	r3, .L3+4
  44 0008 03EBC203 		add	r3, r3, r2, lsl #3
  45              		.loc 1 441 3 view .LVU5
  46 000c D3E90001 		ldrd	r0, [r3]
  47              	.LVL1:
  48              		.loc 1 441 3 view .LVU6
  49 0010 FFF7FEFF 		bl	adf4350_out_altvoltage0_frequency
  50              	.LVL2:
 442:Core/Src/main.c ****   i = (i + 1) % FHSS_NUM_FREQS;
  51              		.loc 1 442 3 is_stmt 1 view .LVU7
  52              		.loc 1 442 10 is_stmt 0 view .LVU8
  53 0014 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
  54 0016 0132     		adds	r2, r2, #1
  55              		.loc 1 442 15 view .LVU9
  56 0018 064B     		ldr	r3, .L3+8
  57 001a 83FB0213 		smull	r1, r3, r3, r2
  58 001e 5B11     		asrs	r3, r3, #5
  59 0020 6421     		movs	r1, #100
  60 0022 01FB1323 		mls	r3, r1, r3, r2
  61              		.loc 1 442 5 view .LVU10
  62 0026 2370     		strb	r3, [r4]
 443:Core/Src/main.c **** }
  63              		.loc 1 443 1 view .LVU11
  64 0028 10BD     		pop	{r4, pc}
  65              	.L4:
  66 002a 00BF     		.align	2
  67              	.L3:
  68 002c 00000000 		.word	.LANCHOR1
  69 0030 00000000 		.word	.LANCHOR0
  70 0034 1F85EB51 		.word	1374389535
  71              		.cfi_endproc
ARM GAS  /tmp/cc6OZ6uR.s 			page 10


  72              	.LFE70:
  74              		.section	.text.cmd_sm_init,"ax",%progbits
  75              		.align	1
  76              		.global	cmd_sm_init
  77              		.syntax unified
  78              		.thumb
  79              		.thumb_func
  80              		.fpu softvfp
  82              	cmd_sm_init:
  83              	.LFB71:
 444:Core/Src/main.c **** 
 445:Core/Src/main.c **** 
 446:Core/Src/main.c **** adf4350_init_param pll_config;
 447:Core/Src/main.c **** 
 448:Core/Src/main.c **** void cmd_sm_init()
 449:Core/Src/main.c **** {
  84              		.loc 1 449 1 is_stmt 1 view -0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88 0000 10B5     		push	{r4, lr}
  89              	.LCFI1:
  90              		.cfi_def_cfa_offset 8
  91              		.cfi_offset 4, -8
  92              		.cfi_offset 14, -4
  93 0002 8CB0     		sub	sp, sp, #48
  94              	.LCFI2:
  95              		.cfi_def_cfa_offset 56
 450:Core/Src/main.c ****   // initialize pll_config structure
 451:Core/Src/main.c ****   pll_config.clkin = 25e6;
  96              		.loc 1 451 3 view .LVU13
  97              		.loc 1 451 20 is_stmt 0 view .LVU14
  98 0004 1F4C     		ldr	r4, .L7
  99 0006 204B     		ldr	r3, .L7+4
 100 0008 2360     		str	r3, [r4]
 452:Core/Src/main.c ****   pll_config.channel_spacing = 100;
 101              		.loc 1 452 3 is_stmt 1 view .LVU15
 102              		.loc 1 452 30 is_stmt 0 view .LVU16
 103 000a 6423     		movs	r3, #100
 104 000c 6360     		str	r3, [r4, #4]
 453:Core/Src/main.c ****   pll_config.power_up_frequency = 146e6;
 105              		.loc 1 453 3 is_stmt 1 view .LVU17
 106              		.loc 1 453 33 is_stmt 0 view .LVU18
 107 000e 1F4B     		ldr	r3, .L7+8
 108 0010 A360     		str	r3, [r4, #8]
 454:Core/Src/main.c ****   pll_config.reference_div_factor = 1;
 109              		.loc 1 454 3 is_stmt 1 view .LVU19
 110              		.loc 1 454 35 is_stmt 0 view .LVU20
 111 0012 0123     		movs	r3, #1
 112 0014 E360     		str	r3, [r4, #12]
 455:Core/Src/main.c ****   pll_config.reference_doubler_enable = 0;
 113              		.loc 1 455 3 is_stmt 1 view .LVU21
 114              		.loc 1 455 39 is_stmt 0 view .LVU22
 115 0016 0020     		movs	r0, #0
 116 0018 2074     		strb	r0, [r4, #16]
 456:Core/Src/main.c ****   pll_config.reference_div2_enable = 0;
 117              		.loc 1 456 3 is_stmt 1 view .LVU23
ARM GAS  /tmp/cc6OZ6uR.s 			page 11


 118              		.loc 1 456 36 is_stmt 0 view .LVU24
 119 001a 6074     		strb	r0, [r4, #17]
 457:Core/Src/main.c ****   pll_config.phase_detector_polarity_positive_enable = 1;
 120              		.loc 1 457 3 is_stmt 1 view .LVU25
 121              		.loc 1 457 54 is_stmt 0 view .LVU26
 122 001c A374     		strb	r3, [r4, #18]
 458:Core/Src/main.c ****   pll_config.lock_detect_precision_6ns_enable = 0; // 10 ns
 123              		.loc 1 458 3 is_stmt 1 view .LVU27
 124              		.loc 1 458 47 is_stmt 0 view .LVU28
 125 001e E074     		strb	r0, [r4, #19]
 459:Core/Src/main.c ****   pll_config.lock_detect_function_integer_n_enable = 0; // Fractional pll
 126              		.loc 1 459 3 is_stmt 1 view .LVU29
 127              		.loc 1 459 52 is_stmt 0 view .LVU30
 128 0020 2075     		strb	r0, [r4, #20]
 460:Core/Src/main.c ****   pll_config.charge_pump_current = 7; //2.50
 129              		.loc 1 460 3 is_stmt 1 view .LVU31
 130              		.loc 1 460 34 is_stmt 0 view .LVU32
 131 0022 0722     		movs	r2, #7
 132 0024 A261     		str	r2, [r4, #24]
 461:Core/Src/main.c ****   pll_config.muxout_select = 6; // Digital Lock Detect Out
 133              		.loc 1 461 3 is_stmt 1 view .LVU33
 134              		.loc 1 461 28 is_stmt 0 view .LVU34
 135 0026 0622     		movs	r2, #6
 136 0028 E261     		str	r2, [r4, #28]
 462:Core/Src/main.c ****   pll_config.low_spur_mode_enable = 1; // higher noise, lower spurs.
 137              		.loc 1 462 3 is_stmt 1 view .LVU35
 138              		.loc 1 462 35 is_stmt 0 view .LVU36
 139 002a 84F82030 		strb	r3, [r4, #32]
 463:Core/Src/main.c ****   pll_config.cycle_slip_reduction_enable = 0;
 140              		.loc 1 463 3 is_stmt 1 view .LVU37
 141              		.loc 1 463 42 is_stmt 0 view .LVU38
 142 002e 84F82100 		strb	r0, [r4, #33]
 464:Core/Src/main.c ****   pll_config.charge_cancellation_enable = 0;
 143              		.loc 1 464 3 is_stmt 1 view .LVU39
 144              		.loc 1 464 41 is_stmt 0 view .LVU40
 145 0032 84F82200 		strb	r0, [r4, #34]
 465:Core/Src/main.c ****   pll_config.anti_backlash_3ns_enable = 0;
 146              		.loc 1 465 3 is_stmt 1 view .LVU41
 147              		.loc 1 465 39 is_stmt 0 view .LVU42
 148 0036 84F82300 		strb	r0, [r4, #35]
 466:Core/Src/main.c ****   pll_config.band_select_clock_mode_high_enable = 0; // low
 149              		.loc 1 466 3 is_stmt 1 view .LVU43
 150              		.loc 1 466 49 is_stmt 0 view .LVU44
 151 003a 84F82400 		strb	r0, [r4, #36]
 467:Core/Src/main.c ****   pll_config.clk_divider_12bit = 0;
 152              		.loc 1 467 3 is_stmt 1 view .LVU45
 153              		.loc 1 467 32 is_stmt 0 view .LVU46
 154 003e A062     		str	r0, [r4, #40]
 468:Core/Src/main.c ****   pll_config.clk_divider_mode = 0;
 155              		.loc 1 468 3 is_stmt 1 view .LVU47
 156              		.loc 1 468 31 is_stmt 0 view .LVU48
 157 0040 E062     		str	r0, [r4, #44]
 469:Core/Src/main.c ****   pll_config.aux_output_enable = 0;
 158              		.loc 1 469 3 is_stmt 1 view .LVU49
 159              		.loc 1 469 32 is_stmt 0 view .LVU50
 160 0042 84F83000 		strb	r0, [r4, #48]
 470:Core/Src/main.c ****   pll_config.aux_output_fundamental_enable = 0;
ARM GAS  /tmp/cc6OZ6uR.s 			page 12


 161              		.loc 1 470 3 is_stmt 1 view .LVU51
 162              		.loc 1 470 44 is_stmt 0 view .LVU52
 163 0046 84F83100 		strb	r0, [r4, #49]
 471:Core/Src/main.c ****   pll_config.mute_till_lock_enable = 1;
 164              		.loc 1 471 3 is_stmt 1 view .LVU53
 165              		.loc 1 471 36 is_stmt 0 view .LVU54
 166 004a 84F83230 		strb	r3, [r4, #50]
 472:Core/Src/main.c ****   pll_config.output_power = 2; // +2 dBm
 167              		.loc 1 472 3 is_stmt 1 view .LVU55
 168              		.loc 1 472 27 is_stmt 0 view .LVU56
 169 004e 0223     		movs	r3, #2
 170 0050 6363     		str	r3, [r4, #52]
 473:Core/Src/main.c ****   pll_config.aux_output_power = ADF4541_POWER_N4_DBM;
 171              		.loc 1 473 3 is_stmt 1 view .LVU57
 172              		.loc 1 473 31 is_stmt 0 view .LVU58
 173 0052 A063     		str	r0, [r4, #56]
 474:Core/Src/main.c ****   adf4350_out_altvoltage0_powerdown(0); // power down PLL
 174              		.loc 1 474 3 is_stmt 1 view .LVU59
 175 0054 FFF7FEFF 		bl	adf4350_out_altvoltage0_powerdown
 176              	.LVL3:
 475:Core/Src/main.c ****   adf4350_setup(pll_config);
 177              		.loc 1 475 3 view .LVU60
 178 0058 EC46     		mov	ip, sp
 179 005a 04F1100E 		add	lr, r4, #16
 180 005e BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 181 0062 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 182 0066 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 183 006a ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 184 006e 9EE80700 		ldm	lr, {r0, r1, r2}
 185 0072 8CE80700 		stm	ip, {r0, r1, r2}
 186 0076 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 187 007a FFF7FEFF 		bl	adf4350_setup
 188              	.LVL4:
 476:Core/Src/main.c **** }
 189              		.loc 1 476 1 is_stmt 0 view .LVU61
 190 007e 0CB0     		add	sp, sp, #48
 191              	.LCFI3:
 192              		.cfi_def_cfa_offset 8
 193              		@ sp needed
 194 0080 10BD     		pop	{r4, pc}
 195              	.L8:
 196 0082 00BF     		.align	2
 197              	.L7:
 198 0084 00000000 		.word	.LANCHOR2
 199 0088 40787D01 		.word	25000000
 200 008c 80C8B308 		.word	146000000
 201              		.cfi_endproc
 202              	.LFE71:
 204              		.section	.rodata.read_back_config.str1.4,"aMS",%progbits,1
 205              		.align	2
 206              	.LC3:
 207 0000 0A0D436F 		.ascii	"\012\015Config: %x\000"
 207      6E666967 
 207      3A202578 
 207      00
 208 000d 000000   		.align	2
 209              	.LC4:
ARM GAS  /tmp/cc6OZ6uR.s 			page 13


 210 0010 0A0D456E 		.ascii	"\012\015Enabled Data Pipes: %x\000"
 210      61626C65 
 210      64204461 
 210      74612050 
 210      69706573 
 211 0029 000000   		.align	2
 212              	.LC5:
 213 002c 0A0D5365 		.ascii	"\012\015Setup Retry: %x\000"
 213      74757020 
 213      52657472 
 213      793A2025 
 213      7800
 214 003e 0000     		.align	2
 215              	.LC6:
 216 0040 0A0D5246 		.ascii	"\012\015RF Channel: %x\000"
 216      20436861 
 216      6E6E656C 
 216      3A202578 
 216      00
 217 0051 000000   		.align	2
 218              	.LC7:
 219 0054 0A0D5246 		.ascii	"\012\015RF Setup: %x\000"
 219      20536574 
 219      75703A20 
 219      257800
 220 0063 00       		.align	2
 221              	.LC8:
 222 0064 0A0D5258 		.ascii	"\012\015RX Address High: %lx\012\015RX Address Low:"
 222      20416464 
 222      72657373 
 222      20486967 
 222      683A2025 
 223 008b 20256C78 		.ascii	" %lx\000"
 223      00
 224              		.align	2
 225              	.LC9:
 226 0090 0A0D5258 		.ascii	"\012\015RX_PW_P0: %x\000"
 226      5F50575F 
 226      50303A20 
 226      257800
 227 009f 00       		.align	2
 228              	.LC10:
 229 00a0 0A0D4665 		.ascii	"\012\015Feature: %x\000"
 229      61747572 
 229      653A2025 
 229      7800
 230              		.section	.text.read_back_config,"ax",%progbits
 231              		.align	1
 232              		.global	read_back_config
 233              		.syntax unified
 234              		.thumb
 235              		.thumb_func
 236              		.fpu softvfp
 238              	read_back_config:
 239              	.LFB72:
 477:Core/Src/main.c **** 
 478:Core/Src/main.c **** void read_back_config(void)
ARM GAS  /tmp/cc6OZ6uR.s 			page 14


 479:Core/Src/main.c **** {
 240              		.loc 1 479 1 is_stmt 1 view -0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 64
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 245              	.LCFI4:
 246              		.cfi_def_cfa_offset 28
 247              		.cfi_offset 4, -28
 248              		.cfi_offset 5, -24
 249              		.cfi_offset 6, -20
 250              		.cfi_offset 7, -16
 251              		.cfi_offset 8, -12
 252              		.cfi_offset 9, -8
 253              		.cfi_offset 14, -4
 254 0004 93B0     		sub	sp, sp, #76
 255              	.LCFI5:
 256              		.cfi_def_cfa_offset 104
 480:Core/Src/main.c ****   uint8_t rx_buffer[RX_BUF_SZ_BYTES] = {0};
 257              		.loc 1 480 3 view .LVU63
 258              		.loc 1 480 11 is_stmt 0 view .LVU64
 259 0006 0024     		movs	r4, #0
 260 0008 0294     		str	r4, [sp, #8]
 261 000a 3C22     		movs	r2, #60
 262 000c 2146     		mov	r1, r4
 263 000e 03A8     		add	r0, sp, #12
 264 0010 FFF7FEFF 		bl	memset
 265              	.LVL5:
 481:Core/Src/main.c **** 
 482:Core/Src/main.c ****   tx_rx_spi_cmd(&hspi2, R_REGISTER(CONFIG_REGISTER), NULL, 0, rx_buffer, 1);
 266              		.loc 1 482 3 is_stmt 1 view .LVU65
 267 0014 504F     		ldr	r7, .L11
 268 0016 4FF00108 		mov	r8, #1
 269 001a CDF80480 		str	r8, [sp, #4]
 270 001e 02AD     		add	r5, sp, #8
 271 0020 0095     		str	r5, [sp]
 272 0022 2346     		mov	r3, r4
 273 0024 2246     		mov	r2, r4
 274 0026 2146     		mov	r1, r4
 275 0028 3846     		mov	r0, r7
 276 002a FFF7FEFF 		bl	tx_rx_spi_cmd
 277              	.LVL6:
 483:Core/Src/main.c ****   uint8_t config = rx_buffer[0];
 278              		.loc 1 483 3 view .LVU66
 484:Core/Src/main.c ****   printf("\n\rConfig: %x", config);
 279              		.loc 1 484 3 view .LVU67
 280 002e 9DF80810 		ldrb	r1, [sp, #8]	@ zero_extendqisi2
 281 0032 4A48     		ldr	r0, .L11+4
 282 0034 FFF7FEFF 		bl	printf
 283              	.LVL7:
 485:Core/Src/main.c ****   memset(&rx_buffer, 0, sizeof(rx_buffer));
 284              		.loc 1 485 3 view .LVU68
 285 0038 4026     		movs	r6, #64
 286 003a 3246     		mov	r2, r6
 287 003c 2146     		mov	r1, r4
 288 003e 2846     		mov	r0, r5
 289 0040 FFF7FEFF 		bl	memset
ARM GAS  /tmp/cc6OZ6uR.s 			page 15


 290              	.LVL8:
 486:Core/Src/main.c **** 
 487:Core/Src/main.c ****   tx_rx_spi_cmd(&hspi2, R_REGISTER(EN_RXADDR), NULL, 0, rx_buffer, 1);
 291              		.loc 1 487 3 view .LVU69
 292 0044 CDF80480 		str	r8, [sp, #4]
 293 0048 0095     		str	r5, [sp]
 294 004a 2346     		mov	r3, r4
 295 004c 2246     		mov	r2, r4
 296 004e 0221     		movs	r1, #2
 297 0050 3846     		mov	r0, r7
 298 0052 FFF7FEFF 		bl	tx_rx_spi_cmd
 299              	.LVL9:
 488:Core/Src/main.c ****   uint8_t endp = rx_buffer[0];
 300              		.loc 1 488 3 view .LVU70
 489:Core/Src/main.c ****   printf("\n\rEnabled Data Pipes: %x", endp);
 301              		.loc 1 489 3 view .LVU71
 302 0056 9DF80810 		ldrb	r1, [sp, #8]	@ zero_extendqisi2
 303 005a 4148     		ldr	r0, .L11+8
 304 005c FFF7FEFF 		bl	printf
 305              	.LVL10:
 490:Core/Src/main.c ****   memset(&rx_buffer, 0, sizeof(rx_buffer));
 306              		.loc 1 490 3 view .LVU72
 307 0060 3246     		mov	r2, r6
 308 0062 2146     		mov	r1, r4
 309 0064 2846     		mov	r0, r5
 310 0066 FFF7FEFF 		bl	memset
 311              	.LVL11:
 491:Core/Src/main.c **** 
 492:Core/Src/main.c ****   tx_rx_spi_cmd(&hspi2, R_REGISTER(SETUP_RETR), NULL, 0, rx_buffer, 1);
 312              		.loc 1 492 3 view .LVU73
 313 006a CDF80480 		str	r8, [sp, #4]
 314 006e 0095     		str	r5, [sp]
 315 0070 2346     		mov	r3, r4
 316 0072 2246     		mov	r2, r4
 317 0074 0421     		movs	r1, #4
 318 0076 3846     		mov	r0, r7
 319 0078 FFF7FEFF 		bl	tx_rx_spi_cmd
 320              	.LVL12:
 493:Core/Src/main.c ****   uint8_t setup_retr = rx_buffer[0];
 321              		.loc 1 493 3 view .LVU74
 494:Core/Src/main.c ****   printf("\n\rSetup Retry: %x", setup_retr);
 322              		.loc 1 494 3 view .LVU75
 323 007c 9DF80810 		ldrb	r1, [sp, #8]	@ zero_extendqisi2
 324 0080 3848     		ldr	r0, .L11+12
 325 0082 FFF7FEFF 		bl	printf
 326              	.LVL13:
 495:Core/Src/main.c ****   memset(&rx_buffer, 0, sizeof(rx_buffer));
 327              		.loc 1 495 3 view .LVU76
 328 0086 3246     		mov	r2, r6
 329 0088 2146     		mov	r1, r4
 330 008a 2846     		mov	r0, r5
 331 008c FFF7FEFF 		bl	memset
 332              	.LVL14:
 496:Core/Src/main.c **** 
 497:Core/Src/main.c ****   tx_rx_spi_cmd(&hspi2, R_REGISTER(RF_CH), NULL, 0, rx_buffer, 1);
 333              		.loc 1 497 3 view .LVU77
 334 0090 CDF80480 		str	r8, [sp, #4]
ARM GAS  /tmp/cc6OZ6uR.s 			page 16


 335 0094 0095     		str	r5, [sp]
 336 0096 2346     		mov	r3, r4
 337 0098 2246     		mov	r2, r4
 338 009a 0521     		movs	r1, #5
 339 009c 3846     		mov	r0, r7
 340 009e FFF7FEFF 		bl	tx_rx_spi_cmd
 341              	.LVL15:
 498:Core/Src/main.c ****   uint8_t rfch = rx_buffer[0];
 342              		.loc 1 498 3 view .LVU78
 499:Core/Src/main.c ****   printf("\n\rRF Channel: %x", rfch);
 343              		.loc 1 499 3 view .LVU79
 344 00a2 9DF80810 		ldrb	r1, [sp, #8]	@ zero_extendqisi2
 345 00a6 3048     		ldr	r0, .L11+16
 346 00a8 FFF7FEFF 		bl	printf
 347              	.LVL16:
 500:Core/Src/main.c ****   memset(&rx_buffer, 0, sizeof(rx_buffer));
 348              		.loc 1 500 3 view .LVU80
 349 00ac 3246     		mov	r2, r6
 350 00ae 2146     		mov	r1, r4
 351 00b0 2846     		mov	r0, r5
 352 00b2 FFF7FEFF 		bl	memset
 353              	.LVL17:
 501:Core/Src/main.c **** 
 502:Core/Src/main.c ****   tx_rx_spi_cmd(&hspi2, R_REGISTER(RF_SETUP), NULL, 0, rx_buffer, 1);
 354              		.loc 1 502 3 view .LVU81
 355 00b6 CDF80480 		str	r8, [sp, #4]
 356 00ba 0095     		str	r5, [sp]
 357 00bc 2346     		mov	r3, r4
 358 00be 2246     		mov	r2, r4
 359 00c0 0621     		movs	r1, #6
 360 00c2 3846     		mov	r0, r7
 361 00c4 FFF7FEFF 		bl	tx_rx_spi_cmd
 362              	.LVL18:
 503:Core/Src/main.c ****   uint8_t rfsetup = rx_buffer[0];
 363              		.loc 1 503 3 view .LVU82
 504:Core/Src/main.c ****   printf("\n\rRF Setup: %x", rfsetup);
 364              		.loc 1 504 3 view .LVU83
 365 00c8 9DF80810 		ldrb	r1, [sp, #8]	@ zero_extendqisi2
 366 00cc 2748     		ldr	r0, .L11+20
 367 00ce FFF7FEFF 		bl	printf
 368              	.LVL19:
 505:Core/Src/main.c ****   memset(&rx_buffer, 0, sizeof(rx_buffer));
 369              		.loc 1 505 3 view .LVU84
 370 00d2 3246     		mov	r2, r6
 371 00d4 2146     		mov	r1, r4
 372 00d6 2846     		mov	r0, r5
 373 00d8 FFF7FEFF 		bl	memset
 374              	.LVL20:
 506:Core/Src/main.c **** 
 507:Core/Src/main.c ****   tx_rx_spi_cmd(&hspi2, R_REGISTER(RX_ADDR_P0), NULL, 0, rx_buffer, 5);
 375              		.loc 1 507 3 view .LVU85
 376 00dc 4FF00509 		mov	r9, #5
 377 00e0 CDF80490 		str	r9, [sp, #4]
 378 00e4 0095     		str	r5, [sp]
 379 00e6 2346     		mov	r3, r4
 380 00e8 2246     		mov	r2, r4
 381 00ea 0A21     		movs	r1, #10
ARM GAS  /tmp/cc6OZ6uR.s 			page 17


 382 00ec 3846     		mov	r0, r7
 383 00ee FFF7FEFF 		bl	tx_rx_spi_cmd
 384              	.LVL21:
 508:Core/Src/main.c ****   uint32_t rx_addr_p0_hi = *((uint32_t*)rx_buffer);
 385              		.loc 1 508 3 view .LVU86
 509:Core/Src/main.c ****   uint32_t rx_addr_p0_lo = *((uint32_t*)rx_buffer + 1);
 386              		.loc 1 509 3 view .LVU87
 510:Core/Src/main.c ****   printf("\n\rRX Address High: %lx\n\rRX Address Low: %lx", rx_addr_p0_hi, rx_addr_p0_lo);
 387              		.loc 1 510 3 view .LVU88
 388 00f2 039A     		ldr	r2, [sp, #12]
 389 00f4 0299     		ldr	r1, [sp, #8]
 390 00f6 1E48     		ldr	r0, .L11+24
 391 00f8 FFF7FEFF 		bl	printf
 392              	.LVL22:
 511:Core/Src/main.c ****   memset(&rx_buffer, 0, sizeof(rx_buffer));
 393              		.loc 1 511 3 view .LVU89
 394 00fc 3246     		mov	r2, r6
 395 00fe 2146     		mov	r1, r4
 396 0100 2846     		mov	r0, r5
 397 0102 FFF7FEFF 		bl	memset
 398              	.LVL23:
 512:Core/Src/main.c **** 
 513:Core/Src/main.c ****   tx_rx_spi_cmd(&hspi2, R_REGISTER(RX_PW_P0), NULL, 0, rx_buffer, 5);
 399              		.loc 1 513 3 view .LVU90
 400 0106 CDF80490 		str	r9, [sp, #4]
 401 010a 0095     		str	r5, [sp]
 402 010c 2346     		mov	r3, r4
 403 010e 2246     		mov	r2, r4
 404 0110 1121     		movs	r1, #17
 405 0112 3846     		mov	r0, r7
 406 0114 FFF7FEFF 		bl	tx_rx_spi_cmd
 407              	.LVL24:
 514:Core/Src/main.c ****   uint8_t rx_pw_p0 = rx_buffer[0];
 408              		.loc 1 514 3 view .LVU91
 515:Core/Src/main.c ****   printf("\n\rRX_PW_P0: %x", rx_pw_p0);
 409              		.loc 1 515 3 view .LVU92
 410 0118 9DF80810 		ldrb	r1, [sp, #8]	@ zero_extendqisi2
 411 011c 1548     		ldr	r0, .L11+28
 412 011e FFF7FEFF 		bl	printf
 413              	.LVL25:
 516:Core/Src/main.c ****   memset(&rx_buffer, 0, sizeof(rx_buffer));
 414              		.loc 1 516 3 view .LVU93
 415 0122 3246     		mov	r2, r6
 416 0124 2146     		mov	r1, r4
 417 0126 2846     		mov	r0, r5
 418 0128 FFF7FEFF 		bl	memset
 419              	.LVL26:
 517:Core/Src/main.c **** 
 518:Core/Src/main.c ****   tx_rx_spi_cmd(&hspi2, R_REGISTER(FEATURE), NULL, 0, rx_buffer, 1);
 420              		.loc 1 518 3 view .LVU94
 421 012c CDF80480 		str	r8, [sp, #4]
 422 0130 0095     		str	r5, [sp]
 423 0132 2346     		mov	r3, r4
 424 0134 2246     		mov	r2, r4
 425 0136 1D21     		movs	r1, #29
 426 0138 3846     		mov	r0, r7
 427 013a FFF7FEFF 		bl	tx_rx_spi_cmd
ARM GAS  /tmp/cc6OZ6uR.s 			page 18


 428              	.LVL27:
 519:Core/Src/main.c ****   uint8_t feature = rx_buffer[0];
 429              		.loc 1 519 3 view .LVU95
 520:Core/Src/main.c ****   printf("\n\rFeature: %x", feature);
 430              		.loc 1 520 3 view .LVU96
 431 013e 9DF80810 		ldrb	r1, [sp, #8]	@ zero_extendqisi2
 432 0142 0D48     		ldr	r0, .L11+32
 433 0144 FFF7FEFF 		bl	printf
 434              	.LVL28:
 521:Core/Src/main.c ****   memset(&rx_buffer, 0, sizeof(rx_buffer));
 435              		.loc 1 521 3 view .LVU97
 436 0148 3246     		mov	r2, r6
 437 014a 2146     		mov	r1, r4
 438 014c 2846     		mov	r0, r5
 439 014e FFF7FEFF 		bl	memset
 440              	.LVL29:
 522:Core/Src/main.c **** }
 441              		.loc 1 522 1 is_stmt 0 view .LVU98
 442 0152 13B0     		add	sp, sp, #76
 443              	.LCFI6:
 444              		.cfi_def_cfa_offset 28
 445              		@ sp needed
 446 0154 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 447              	.L12:
 448              		.align	2
 449              	.L11:
 450 0158 00000000 		.word	hspi2
 451 015c 00000000 		.word	.LC3
 452 0160 10000000 		.word	.LC4
 453 0164 2C000000 		.word	.LC5
 454 0168 40000000 		.word	.LC6
 455 016c 54000000 		.word	.LC7
 456 0170 64000000 		.word	.LC8
 457 0174 90000000 		.word	.LC9
 458 0178 A0000000 		.word	.LC10
 459              		.cfi_endproc
 460              	.LFE72:
 462              		.section	.text.__io_putchar,"ax",%progbits
 463              		.align	1
 464              		.global	__io_putchar
 465              		.syntax unified
 466              		.thumb
 467              		.thumb_func
 468              		.fpu softvfp
 470              	__io_putchar:
 471              	.LVL30:
 472              	.LFB73:
 523:Core/Src/main.c **** 
 524:Core/Src/main.c **** #ifdef __GNUC__
 525:Core/Src/main.c ****   /* With GCC, small printf (option LD Linker->Libraries->Small printf
 526:Core/Src/main.c ****      set to 'Yes') calls __io_putchar() */
 527:Core/Src/main.c **** int __io_putchar(int ch)
 528:Core/Src/main.c **** #else
 529:Core/Src/main.c **** int fputc(int ch, FILE *f)
 530:Core/Src/main.c **** #endif /* __GNUC__ */
 531:Core/Src/main.c **** {
 473              		.loc 1 531 1 is_stmt 1 view -0
ARM GAS  /tmp/cc6OZ6uR.s 			page 19


 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 8
 476              		@ frame_needed = 0, uses_anonymous_args = 0
 477              		.loc 1 531 1 is_stmt 0 view .LVU100
 478 0000 00B5     		push	{lr}
 479              	.LCFI7:
 480              		.cfi_def_cfa_offset 4
 481              		.cfi_offset 14, -4
 482 0002 83B0     		sub	sp, sp, #12
 483              	.LCFI8:
 484              		.cfi_def_cfa_offset 16
 485 0004 0190     		str	r0, [sp, #4]
 532:Core/Src/main.c ****   /* Place your implementation of fputc here */
 533:Core/Src/main.c ****   /* e.g. write a character to the UART3 and Loop until the end of transmission */
 534:Core/Src/main.c ****   HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 486              		.loc 1 534 3 is_stmt 1 view .LVU101
 487 0006 4FF0FF33 		mov	r3, #-1
 488 000a 0122     		movs	r2, #1
 489 000c 01A9     		add	r1, sp, #4
 490 000e 0348     		ldr	r0, .L15
 491              	.LVL31:
 492              		.loc 1 534 3 is_stmt 0 view .LVU102
 493 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 494              	.LVL32:
 535:Core/Src/main.c ****   return ch;
 495              		.loc 1 535 3 is_stmt 1 view .LVU103
 536:Core/Src/main.c **** }
 496              		.loc 1 536 1 is_stmt 0 view .LVU104
 497 0014 0198     		ldr	r0, [sp, #4]
 498 0016 03B0     		add	sp, sp, #12
 499              	.LCFI9:
 500              		.cfi_def_cfa_offset 4
 501              		@ sp needed
 502 0018 5DF804FB 		ldr	pc, [sp], #4
 503              	.L16:
 504              		.align	2
 505              	.L15:
 506 001c 00000000 		.word	huart3
 507              		.cfi_endproc
 508              	.LFE73:
 510              		.section	.text.Error_Handler,"ax",%progbits
 511              		.align	1
 512              		.global	Error_Handler
 513              		.syntax unified
 514              		.thumb
 515              		.thumb_func
 516              		.fpu softvfp
 518              	Error_Handler:
 519              	.LFB74:
 537:Core/Src/main.c **** 
 538:Core/Src/main.c **** /* USER CODE END 4 */
 539:Core/Src/main.c **** 
 540:Core/Src/main.c **** /**
 541:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 542:Core/Src/main.c ****   * @retval None
 543:Core/Src/main.c ****   */
 544:Core/Src/main.c **** void Error_Handler(void)
ARM GAS  /tmp/cc6OZ6uR.s 			page 20


 545:Core/Src/main.c **** {
 520              		.loc 1 545 1 is_stmt 1 view -0
 521              		.cfi_startproc
 522              		@ Volatile: function does not return.
 523              		@ args = 0, pretend = 0, frame = 0
 524              		@ frame_needed = 0, uses_anonymous_args = 0
 525              		@ link register save eliminated.
 546:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 547:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 548:Core/Src/main.c ****   __disable_irq();
 526              		.loc 1 548 3 view .LVU106
 527              	.LBB4:
 528              	.LBI4:
 529              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
ARM GAS  /tmp/cc6OZ6uR.s 			page 21


  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
ARM GAS  /tmp/cc6OZ6uR.s 			page 22


 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 530              		.loc 2 140 27 view .LVU107
 531              	.LBB5:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 532              		.loc 2 142 3 view .LVU108
 533              		.syntax unified
 534              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 535 0000 72B6     		cpsid i
 536              	@ 0 "" 2
 537              		.thumb
 538              		.syntax unified
 539              	.L18:
 540              	.LBE5:
 541              	.LBE4:
 549:Core/Src/main.c ****   while (1)
 542              		.loc 1 549 3 discriminator 1 view .LVU109
 550:Core/Src/main.c ****   {
ARM GAS  /tmp/cc6OZ6uR.s 			page 23


 551:Core/Src/main.c ****   }
 543              		.loc 1 551 3 discriminator 1 view .LVU110
 549:Core/Src/main.c ****   while (1)
 544              		.loc 1 549 9 discriminator 1 view .LVU111
 545 0002 FEE7     		b	.L18
 546              		.cfi_endproc
 547              	.LFE74:
 549              		.section	.text.SystemClock_Config,"ax",%progbits
 550              		.align	1
 551              		.global	SystemClock_Config
 552              		.syntax unified
 553              		.thumb
 554              		.thumb_func
 555              		.fpu softvfp
 557              	SystemClock_Config:
 558              	.LFB69:
 401:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 559              		.loc 1 401 1 view -0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 64
 562              		@ frame_needed = 0, uses_anonymous_args = 0
 563 0000 00B5     		push	{lr}
 564              	.LCFI10:
 565              		.cfi_def_cfa_offset 4
 566              		.cfi_offset 14, -4
 567 0002 91B0     		sub	sp, sp, #68
 568              	.LCFI11:
 569              		.cfi_def_cfa_offset 72
 402:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 570              		.loc 1 402 3 view .LVU113
 402:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 571              		.loc 1 402 22 is_stmt 0 view .LVU114
 572 0004 2822     		movs	r2, #40
 573 0006 0021     		movs	r1, #0
 574 0008 06A8     		add	r0, sp, #24
 575 000a FFF7FEFF 		bl	memset
 576              	.LVL33:
 403:Core/Src/main.c **** 
 577              		.loc 1 403 3 is_stmt 1 view .LVU115
 403:Core/Src/main.c **** 
 578              		.loc 1 403 22 is_stmt 0 view .LVU116
 579 000e 0023     		movs	r3, #0
 580 0010 0193     		str	r3, [sp, #4]
 581 0012 0293     		str	r3, [sp, #8]
 582 0014 0393     		str	r3, [sp, #12]
 583 0016 0493     		str	r3, [sp, #16]
 584 0018 0593     		str	r3, [sp, #20]
 408:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 585              		.loc 1 408 3 is_stmt 1 view .LVU117
 408:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 586              		.loc 1 408 36 is_stmt 0 view .LVU118
 587 001a 0122     		movs	r2, #1
 588 001c 0692     		str	r2, [sp, #24]
 409:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 589              		.loc 1 409 3 is_stmt 1 view .LVU119
 409:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 590              		.loc 1 409 30 is_stmt 0 view .LVU120
ARM GAS  /tmp/cc6OZ6uR.s 			page 24


 591 001e 4FF48033 		mov	r3, #65536
 592 0022 0793     		str	r3, [sp, #28]
 410:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 593              		.loc 1 410 3 is_stmt 1 view .LVU121
 410:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 594              		.loc 1 410 36 is_stmt 0 view .LVU122
 595 0024 4FF40031 		mov	r1, #131072
 596 0028 0891     		str	r1, [sp, #32]
 411:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 597              		.loc 1 411 3 is_stmt 1 view .LVU123
 411:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 598              		.loc 1 411 30 is_stmt 0 view .LVU124
 599 002a 0A92     		str	r2, [sp, #40]
 412:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 600              		.loc 1 412 3 is_stmt 1 view .LVU125
 412:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 601              		.loc 1 412 34 is_stmt 0 view .LVU126
 602 002c 0222     		movs	r2, #2
 603 002e 0D92     		str	r2, [sp, #52]
 413:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 604              		.loc 1 413 3 is_stmt 1 view .LVU127
 413:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 605              		.loc 1 413 35 is_stmt 0 view .LVU128
 606 0030 0E93     		str	r3, [sp, #56]
 414:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 607              		.loc 1 414 3 is_stmt 1 view .LVU129
 414:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 608              		.loc 1 414 32 is_stmt 0 view .LVU130
 609 0032 4FF4E013 		mov	r3, #1835008
 610 0036 0F93     		str	r3, [sp, #60]
 415:Core/Src/main.c ****   {
 611              		.loc 1 415 3 is_stmt 1 view .LVU131
 415:Core/Src/main.c ****   {
 612              		.loc 1 415 7 is_stmt 0 view .LVU132
 613 0038 06A8     		add	r0, sp, #24
 614 003a FFF7FEFF 		bl	HAL_RCC_OscConfig
 615              	.LVL34:
 415:Core/Src/main.c ****   {
 616              		.loc 1 415 6 view .LVU133
 617 003e 80B9     		cbnz	r0, .L23
 422:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 618              		.loc 1 422 3 is_stmt 1 view .LVU134
 422:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 619              		.loc 1 422 31 is_stmt 0 view .LVU135
 620 0040 0F23     		movs	r3, #15
 621 0042 0193     		str	r3, [sp, #4]
 424:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 622              		.loc 1 424 3 is_stmt 1 view .LVU136
 424:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 623              		.loc 1 424 34 is_stmt 0 view .LVU137
 624 0044 0221     		movs	r1, #2
 625 0046 0291     		str	r1, [sp, #8]
 425:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 626              		.loc 1 425 3 is_stmt 1 view .LVU138
 425:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 627              		.loc 1 425 35 is_stmt 0 view .LVU139
 628 0048 0023     		movs	r3, #0
ARM GAS  /tmp/cc6OZ6uR.s 			page 25


 629 004a 0393     		str	r3, [sp, #12]
 426:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 630              		.loc 1 426 3 is_stmt 1 view .LVU140
 426:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 631              		.loc 1 426 36 is_stmt 0 view .LVU141
 632 004c 4FF48062 		mov	r2, #1024
 633 0050 0492     		str	r2, [sp, #16]
 427:Core/Src/main.c **** 
 634              		.loc 1 427 3 is_stmt 1 view .LVU142
 427:Core/Src/main.c **** 
 635              		.loc 1 427 36 is_stmt 0 view .LVU143
 636 0052 0593     		str	r3, [sp, #20]
 429:Core/Src/main.c ****   {
 637              		.loc 1 429 3 is_stmt 1 view .LVU144
 429:Core/Src/main.c ****   {
 638              		.loc 1 429 7 is_stmt 0 view .LVU145
 639 0054 01A8     		add	r0, sp, #4
 640 0056 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 641              	.LVL35:
 429:Core/Src/main.c ****   {
 642              		.loc 1 429 6 view .LVU146
 643 005a 20B9     		cbnz	r0, .L24
 433:Core/Src/main.c **** 
 644              		.loc 1 433 1 view .LVU147
 645 005c 11B0     		add	sp, sp, #68
 646              	.LCFI12:
 647              		.cfi_remember_state
 648              		.cfi_def_cfa_offset 4
 649              		@ sp needed
 650 005e 5DF804FB 		ldr	pc, [sp], #4
 651              	.L23:
 652              	.LCFI13:
 653              		.cfi_restore_state
 417:Core/Src/main.c ****   }
 654              		.loc 1 417 5 is_stmt 1 view .LVU148
 655 0062 FFF7FEFF 		bl	Error_Handler
 656              	.LVL36:
 657              	.L24:
 431:Core/Src/main.c ****   }
 658              		.loc 1 431 5 view .LVU149
 659 0066 FFF7FEFF 		bl	Error_Handler
 660              	.LVL37:
 661              		.cfi_endproc
 662              	.LFE69:
 664              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 665              		.align	2
 666              	.LC11:
 667 0000 0A0D5761 		.ascii	"\012\015Waiting for CAN\000"
 667      6974696E 
 667      6720666F 
 667      72204341 
 667      4E00
 668 0012 0000     		.align	2
 669              	.LC12:
 670 0014 0A0D4341 		.ascii	"\012\015CAN received\000"
 670      4E207265 
 670      63656976 
ARM GAS  /tmp/cc6OZ6uR.s 			page 26


 670      656400
 671 0023 00       		.align	2
 672              	.LC13:
 673 0024 0A0D5246 		.ascii	"\012\015RF power ON\000"
 673      20706F77 
 673      6572204F 
 673      4E00
 674 0032 0000     		.align	2
 675              	.LC14:
 676 0034 0A0D5761 		.ascii	"\012\015Waiting for NRF\000"
 676      6974696E 
 676      6720666F 
 676      72204E52 
 676      4600
 677 0046 0000     		.align	2
 678              	.LC15:
 679 0048 0A0D5246 		.ascii	"\012\015RF power OFF\000"
 679      20706F77 
 679      6572204F 
 679      464600
 680 0057 00       		.align	2
 681              	.LC16:
 682 0058 0A0D4E52 		.ascii	"\012\015NRF received data\000"
 682      46207265 
 682      63656976 
 682      65642064 
 682      61746100 
 683              		.align	2
 684              	.LC17:
 685 006c 5B6D3A20 		.ascii	"[m: %d] [u: %d] Received message with id = 0x%04x, "
 685      25645D20 
 685      5B753A20 
 685      25645D20 
 685      52656365 
 686 009f 6E6F6465 		.ascii	"node_id = 0x%02x! pressure = %d, temp = %d\015\012\000"
 686      5F696420 
 686      3D203078 
 686      25303278 
 686      21207072 
 687              		.align	2
 688              	.LC18:
 689 00cc 0A0D4552 		.ascii	"\012\015ERROR: Timeout\000"
 689      524F523A 
 689      2054696D 
 689      656F7574 
 689      00
 690 00dd 000000   		.align	2
 691              	.LC19:
 692 00e0 0A0D5365 		.ascii	"\012\015Sending back PTN RESPONSE\000"
 692      6E64696E 
 692      67206261 
 692      636B2050 
 692      544E2052 
 693              		.section	.text.main,"ax",%progbits
 694              		.align	1
 695              		.global	main
 696              		.syntax unified
ARM GAS  /tmp/cc6OZ6uR.s 			page 27


 697              		.thumb
 698              		.thumb_func
 699              		.fpu softvfp
 701              	main:
 702              	.LFB68:
  96:Core/Src/main.c **** 
 703              		.loc 1 96 1 view -0
 704              		.cfi_startproc
 705              		@ args = 0, pretend = 0, frame = 240
 706              		@ frame_needed = 0, uses_anonymous_args = 0
 707 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 708              	.LCFI14:
 709              		.cfi_def_cfa_offset 36
 710              		.cfi_offset 4, -36
 711              		.cfi_offset 5, -32
 712              		.cfi_offset 6, -28
 713              		.cfi_offset 7, -24
 714              		.cfi_offset 8, -20
 715              		.cfi_offset 9, -16
 716              		.cfi_offset 10, -12
 717              		.cfi_offset 11, -8
 718              		.cfi_offset 14, -4
 719 0004 C1B0     		sub	sp, sp, #260
 720              	.LCFI15:
 721              		.cfi_def_cfa_offset 296
 105:Core/Src/main.c **** 
 722              		.loc 1 105 3 view .LVU151
 723 0006 FFF7FEFF 		bl	HAL_Init
 724              	.LVL38:
 110:Core/Src/main.c **** 
 725              		.loc 1 110 3 view .LVU152
 110:Core/Src/main.c **** 
 726              		.loc 1 110 11 is_stmt 0 view .LVU153
 727 000a A94B     		ldr	r3, .L48
 728 000c 1868     		ldr	r0, [r3]
 110:Core/Src/main.c **** 
 729              		.loc 1 110 3 view .LVU154
 730 000e 0023     		movs	r3, #0
 731 0010 0222     		movs	r2, #2
 732 0012 1946     		mov	r1, r3
 733 0014 8068     		ldr	r0, [r0, #8]
 734 0016 FFF7FEFF 		bl	setvbuf
 735              	.LVL39:
 115:Core/Src/main.c **** 
 736              		.loc 1 115 3 is_stmt 1 view .LVU155
 737 001a FFF7FEFF 		bl	SystemClock_Config
 738              	.LVL40:
 122:Core/Src/main.c ****   MX_SPI1_Init();
 739              		.loc 1 122 3 view .LVU156
 740 001e FFF7FEFF 		bl	MX_GPIO_Init
 741              	.LVL41:
 123:Core/Src/main.c ****   MX_TIM2_Init();
 742              		.loc 1 123 3 view .LVU157
 743 0022 FFF7FEFF 		bl	MX_SPI1_Init
 744              	.LVL42:
 124:Core/Src/main.c ****   MX_SPI2_Init();
 745              		.loc 1 124 3 view .LVU158
ARM GAS  /tmp/cc6OZ6uR.s 			page 28


 746 0026 FFF7FEFF 		bl	MX_TIM2_Init
 747              	.LVL43:
 125:Core/Src/main.c ****   MX_CAN_Init();
 748              		.loc 1 125 3 view .LVU159
 749 002a FFF7FEFF 		bl	MX_SPI2_Init
 750              	.LVL44:
 126:Core/Src/main.c ****   MX_USART3_UART_Init();
 751              		.loc 1 126 3 view .LVU160
 752 002e FFF7FEFF 		bl	MX_CAN_Init
 753              	.LVL45:
 127:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 754              		.loc 1 127 3 view .LVU161
 755 0032 FFF7FEFF 		bl	MX_USART3_UART_Init
 756              	.LVL46:
 131:Core/Src/main.c ****   HAL_GPIO_WritePin(SPI1_LD_GPIO_Port, SPI1_LD_Pin, 1);
 757              		.loc 1 131 3 view .LVU162
 758 0036 9F4C     		ldr	r4, .L48+4
 759 0038 0122     		movs	r2, #1
 760 003a 1021     		movs	r1, #16
 761 003c 2046     		mov	r0, r4
 762 003e FFF7FEFF 		bl	HAL_GPIO_WritePin
 763              	.LVL47:
 132:Core/Src/main.c **** 
 764              		.loc 1 132 3 view .LVU163
 765 0042 0122     		movs	r2, #1
 766 0044 1021     		movs	r1, #16
 767 0046 2046     		mov	r0, r4
 768 0048 FFF7FEFF 		bl	HAL_GPIO_WritePin
 769              	.LVL48:
 135:Core/Src/main.c ****   uint8_t paired_sn_id = SN_ID_UNPAIRED;
 770              		.loc 1 135 3 view .LVU164
 136:Core/Src/main.c **** 
 771              		.loc 1 136 3 view .LVU165
 139:Core/Src/main.c ****   if (HAL_GPIO_ReadPin(PTN_ID_Port, PTN_ID_Pin) == 1)
 772              		.loc 1 139 3 view .LVU166
 140:Core/Src/main.c ****   {
 773              		.loc 1 140 3 view .LVU167
 140:Core/Src/main.c ****   {
 774              		.loc 1 140 7 is_stmt 0 view .LVU168
 775 004c 0121     		movs	r1, #1
 776 004e 2046     		mov	r0, r4
 777 0050 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 778              	.LVL49:
 779 0054 0546     		mov	r5, r0
 140:Core/Src/main.c ****   {
 780              		.loc 1 140 6 view .LVU169
 781 0056 0128     		cmp	r0, #1
 782 0058 00D0     		beq	.L26
 146:Core/Src/main.c ****   }
 783              		.loc 1 146 12 view .LVU170
 784 005a 0225     		movs	r5, #2
 785              	.L26:
 786              	.LVL50:
 150:Core/Src/main.c ****   adf4350_out_altvoltage0_powerdown(1);
 787              		.loc 1 150 3 is_stmt 1 view .LVU171
 788 005c FFF7FEFF 		bl	cmd_sm_init
 789              	.LVL51:
ARM GAS  /tmp/cc6OZ6uR.s 			page 29


 151:Core/Src/main.c ****   HAL_GPIO_WritePin(PTN_RF_ON_LED_Port, PTN_RF_ON_LED_Pin, 0);
 790              		.loc 1 151 3 view .LVU172
 791 0060 0120     		movs	r0, #1
 792 0062 FFF7FEFF 		bl	adf4350_out_altvoltage0_powerdown
 793              	.LVL52:
 152:Core/Src/main.c **** 
 794              		.loc 1 152 3 view .LVU173
 795 0066 0022     		movs	r2, #0
 796 0068 4FF48061 		mov	r1, #1024
 797 006c 9148     		ldr	r0, .L48+4
 798 006e FFF7FEFF 		bl	HAL_GPIO_WritePin
 799              	.LVL53:
 155:Core/Src/main.c ****       .FilterIdHigh = (uint32_t)(PTN_REQUEST_ID << 5 | 0x0000),
 800              		.loc 1 155 3 view .LVU174
 155:Core/Src/main.c ****       .FilterIdHigh = (uint32_t)(PTN_REQUEST_ID << 5 | 0x0000),
 801              		.loc 1 155 21 is_stmt 0 view .LVU175
 802 0072 914F     		ldr	r7, .L48+8
 803 0074 36AC     		add	r4, sp, #216
 804 0076 3E46     		mov	r6, r7
 805 0078 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 806 007a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 807 007c 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 808 007e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 809 0080 96E80300 		ldm	r6, {r0, r1}
 810 0084 84E80300 		stm	r4, {r0, r1}
 168:Core/Src/main.c **** 
 811              		.loc 1 168 3 is_stmt 1 view .LVU176
 812 0088 8C4C     		ldr	r4, .L48+12
 813 008a 36A9     		add	r1, sp, #216
 814 008c 2046     		mov	r0, r4
 815 008e FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 816              	.LVL54:
 170:Core/Src/main.c **** 
 817              		.loc 1 170 3 view .LVU177
 818 0092 2046     		mov	r0, r4
 819 0094 FFF7FEFF 		bl	HAL_CAN_Start
 820              	.LVL55:
 172:Core/Src/main.c ****       .StdId = PTN_RESPONSE_ID,
 821              		.loc 1 172 3 view .LVU178
 172:Core/Src/main.c ****       .StdId = PTN_RESPONSE_ID,
 822              		.loc 1 172 23 is_stmt 0 view .LVU179
 823 0098 30AC     		add	r4, sp, #192
 824 009a 07F12806 		add	r6, r7, #40
 825 009e 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 826 00a0 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 827 00a2 96E80300 		ldm	r6, {r0, r1}
 828 00a6 84E80300 		stm	r4, {r0, r1}
 181:Core/Src/main.c ****   uint8_t can_rx_payload[CAN_MSG_FRAME_LEN_BYTES] = {0};
 829              		.loc 1 181 3 is_stmt 1 view .LVU180
 181:Core/Src/main.c ****   uint8_t can_rx_payload[CAN_MSG_FRAME_LEN_BYTES] = {0};
 830              		.loc 1 181 11 is_stmt 0 view .LVU181
 831 00aa 0026     		movs	r6, #0
 832 00ac 2E96     		str	r6, [sp, #184]
 833 00ae 2F96     		str	r6, [sp, #188]
 182:Core/Src/main.c **** 
 834              		.loc 1 182 3 is_stmt 1 view .LVU182
 182:Core/Src/main.c **** 
ARM GAS  /tmp/cc6OZ6uR.s 			page 30


 835              		.loc 1 182 11 is_stmt 0 view .LVU183
 836 00b0 2C96     		str	r6, [sp, #176]
 837 00b2 2D96     		str	r6, [sp, #180]
 184:Core/Src/main.c ****   HAL_StatusTypeDef can_rx_status = HAL_OK;
 838              		.loc 1 184 3 is_stmt 1 view .LVU184
 839              	.LVL56:
 185:Core/Src/main.c **** 
 840              		.loc 1 185 3 view .LVU185
 187:Core/Src/main.c ****   uint32_t can_tx_mailbox = 0;
 841              		.loc 1 187 3 view .LVU186
 187:Core/Src/main.c ****   uint32_t can_tx_mailbox = 0;
 842              		.loc 1 187 23 is_stmt 0 view .LVU187
 843 00b4 2596     		str	r6, [sp, #148]
 844 00b6 2696     		str	r6, [sp, #152]
 845 00b8 2796     		str	r6, [sp, #156]
 846 00ba 2896     		str	r6, [sp, #160]
 847 00bc 2996     		str	r6, [sp, #164]
 848 00be 2A96     		str	r6, [sp, #168]
 849 00c0 2B96     		str	r6, [sp, #172]
 188:Core/Src/main.c **** 
 850              		.loc 1 188 3 is_stmt 1 view .LVU188
 188:Core/Src/main.c **** 
 851              		.loc 1 188 12 is_stmt 0 view .LVU189
 852 00c2 2496     		str	r6, [sp, #144]
 192:Core/Src/main.c ****   uint8_t rf_payload[PAYLOAD_SZ_BYTES] = {0};
 853              		.loc 1 192 3 is_stmt 1 view .LVU190
 192:Core/Src/main.c ****   uint8_t rf_payload[PAYLOAD_SZ_BYTES] = {0};
 854              		.loc 1 192 11 is_stmt 0 view .LVU191
 855 00c4 1C96     		str	r6, [sp, #112]
 856 00c6 1D96     		str	r6, [sp, #116]
 857 00c8 1E96     		str	r6, [sp, #120]
 858 00ca 1F96     		str	r6, [sp, #124]
 859 00cc 2096     		str	r6, [sp, #128]
 860 00ce 2196     		str	r6, [sp, #132]
 861 00d0 2296     		str	r6, [sp, #136]
 862 00d2 2396     		str	r6, [sp, #140]
 193:Core/Src/main.c **** 
 863              		.loc 1 193 3 is_stmt 1 view .LVU192
 193:Core/Src/main.c **** 
 864              		.loc 1 193 11 is_stmt 0 view .LVU193
 865 00d4 1A96     		str	r6, [sp, #104]
 866 00d6 1B96     		str	r6, [sp, #108]
 196:Core/Src/main.c ****   tx_spi_cmd(&hspi2, W_REGISTER(CONFIG_REGISTER), tx_payload, 1);
 867              		.loc 1 196 3 is_stmt 1 view .LVU194
 196:Core/Src/main.c ****   tx_spi_cmd(&hspi2, W_REGISTER(CONFIG_REGISTER), tx_payload, 1);
 868              		.loc 1 196 17 is_stmt 0 view .LVU195
 869 00d8 4FF03F08 		mov	r8, #63
 870 00dc 8DF87080 		strb	r8, [sp, #112]
 197:Core/Src/main.c ****   HAL_Delay(500);
 871              		.loc 1 197 3 is_stmt 1 view .LVU196
 872 00e0 774C     		ldr	r4, .L48+16
 873 00e2 0123     		movs	r3, #1
 874 00e4 1CAA     		add	r2, sp, #112
 875 00e6 2021     		movs	r1, #32
 876 00e8 2046     		mov	r0, r4
 877 00ea FFF7FEFF 		bl	tx_spi_cmd
 878              	.LVL57:
ARM GAS  /tmp/cc6OZ6uR.s 			page 31


 198:Core/Src/main.c ****   
 879              		.loc 1 198 3 view .LVU197
 880 00ee 4FF4FA70 		mov	r0, #500
 881 00f2 FFF7FEFF 		bl	HAL_Delay
 882              	.LVL58:
 201:Core/Src/main.c ****   tx_spi_cmd(&hspi2, W_REGISTER(CONFIG_REGISTER), tx_payload, 1);
 883              		.loc 1 201 3 view .LVU198
 201:Core/Src/main.c ****   tx_spi_cmd(&hspi2, W_REGISTER(CONFIG_REGISTER), tx_payload, 1);
 884              		.loc 1 201 17 is_stmt 0 view .LVU199
 885 00f6 8DF87080 		strb	r8, [sp, #112]
 202:Core/Src/main.c **** 
 886              		.loc 1 202 3 is_stmt 1 view .LVU200
 887 00fa 0123     		movs	r3, #1
 888 00fc 1CAA     		add	r2, sp, #112
 889 00fe 2021     		movs	r1, #32
 890 0100 2046     		mov	r0, r4
 891 0102 FFF7FEFF 		bl	tx_spi_cmd
 892              	.LVL59:
 205:Core/Src/main.c ****   tx_spi_cmd(&hspi2, W_REGISTER(RX_PW_P0), tx_payload, 1);
 893              		.loc 1 205 3 view .LVU201
 205:Core/Src/main.c ****   tx_spi_cmd(&hspi2, W_REGISTER(RX_PW_P0), tx_payload, 1);
 894              		.loc 1 205 17 is_stmt 0 view .LVU202
 895 0106 0823     		movs	r3, #8
 896 0108 8DF87030 		strb	r3, [sp, #112]
 206:Core/Src/main.c **** 
 897              		.loc 1 206 3 is_stmt 1 view .LVU203
 898 010c 0123     		movs	r3, #1
 899 010e 1CAA     		add	r2, sp, #112
 900 0110 3121     		movs	r1, #49
 901 0112 2046     		mov	r0, r4
 902 0114 FFF7FEFF 		bl	tx_spi_cmd
 903              	.LVL60:
 209:Core/Src/main.c ****   nrf24l01_setup_rf(&hspi2, &rf_config);
 904              		.loc 1 209 3 view .LVU204
 209:Core/Src/main.c ****   nrf24l01_setup_rf(&hspi2, &rf_config);
 905              		.loc 1 209 16 is_stmt 0 view .LVU205
 906 0118 B7F84030 		ldrh	r3, [r7, #64]
 907 011c ADF86430 		strh	r3, [sp, #100]	@ movhi
 210:Core/Src/main.c **** 
 908              		.loc 1 210 3 is_stmt 1 view .LVU206
 909 0120 19A9     		add	r1, sp, #100
 910 0122 2046     		mov	r0, r4
 911 0124 FFF7FEFF 		bl	nrf24l01_setup_rf
 912              	.LVL61:
 212:Core/Src/main.c **** 
 913              		.loc 1 212 3 view .LVU207
 914 0128 3346     		mov	r3, r6
 915 012a 3246     		mov	r2, r6
 916 012c E221     		movs	r1, #226
 917 012e 2046     		mov	r0, r4
 918 0130 FFF7FEFF 		bl	tx_spi_cmd
 919              	.LVL62:
 215:Core/Src/main.c **** 
 920              		.loc 1 215 3 view .LVU208
 921 0134 FFF7FEFF 		bl	read_back_config
 922              	.LVL63:
 218:Core/Src/main.c **** 
ARM GAS  /tmp/cc6OZ6uR.s 			page 32


 923              		.loc 1 218 3 view .LVU209
 136:Core/Src/main.c **** 
 924              		.loc 1 136 11 is_stmt 0 view .LVU210
 925 0138 3446     		mov	r4, r6
 135:Core/Src/main.c ****   uint8_t paired_sn_id = SN_ID_UNPAIRED;
 926              		.loc 1 135 8 view .LVU211
 927 013a B346     		mov	fp, r6
 928 013c 0AE0     		b	.L39
 929              	.LVL64:
 930              	.L28:
 931              	.LBB6:
 243:Core/Src/main.c ****         {
 932              		.loc 1 243 9 is_stmt 1 view .LVU212
 243:Core/Src/main.c ****         {
 933              		.loc 1 243 12 is_stmt 0 view .LVU213
 934 013e A942     		cmp	r1, r5
 935 0140 31D0     		beq	.L44
 936              	.LVL65:
 937              	.L29:
 387:Core/Src/main.c ****     HAL_GPIO_WritePin(PTN_RF_ON_LED_Port, PTN_RF_ON_LED_Pin, 0);
 938              		.loc 1 387 5 is_stmt 1 view .LVU214
 939 0142 0120     		movs	r0, #1
 940 0144 FFF7FEFF 		bl	adf4350_out_altvoltage0_powerdown
 941              	.LVL66:
 388:Core/Src/main.c ****     /* USER CODE END WHILE */
 942              		.loc 1 388 5 view .LVU215
 943 0148 0022     		movs	r2, #0
 944 014a 4FF48061 		mov	r1, #1024
 945 014e 5948     		ldr	r0, .L48+4
 946 0150 FFF7FEFF 		bl	HAL_GPIO_WritePin
 947              	.LVL67:
 948              	.LBE6:
 224:Core/Src/main.c ****   {
 949              		.loc 1 224 9 view .LVU216
 950              	.L39:
 224:Core/Src/main.c ****   {
 951              		.loc 1 224 3 view .LVU217
 952              	.LBB7:
 227:Core/Src/main.c ****     HAL_GPIO_WritePin(PTN_RF_ON_LED_Port, PTN_RF_ON_LED_Pin, 0);
 953              		.loc 1 227 5 view .LVU218
 954 0154 0120     		movs	r0, #1
 955 0156 FFF7FEFF 		bl	adf4350_out_altvoltage0_powerdown
 956              	.LVL68:
 228:Core/Src/main.c **** 
 957              		.loc 1 228 5 view .LVU219
 958 015a 0022     		movs	r2, #0
 959 015c 4FF48061 		mov	r1, #1024
 960 0160 5448     		ldr	r0, .L48+4
 961 0162 FFF7FEFF 		bl	HAL_GPIO_WritePin
 962              	.LVL69:
 231:Core/Src/main.c ****     while(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) <= 0);
 963              		.loc 1 231 5 view .LVU220
 964 0166 5748     		ldr	r0, .L48+20
 965 0168 FFF7FEFF 		bl	printf
 966              	.LVL70:
 232:Core/Src/main.c ****     printf("\n\rCAN received");
 967              		.loc 1 232 5 view .LVU221
ARM GAS  /tmp/cc6OZ6uR.s 			page 33


 968              	.L27:
 232:Core/Src/main.c ****     printf("\n\rCAN received");
 969              		.loc 1 232 64 discriminator 1 view .LVU222
 232:Core/Src/main.c ****     printf("\n\rCAN received");
 970              		.loc 1 232 10 discriminator 1 view .LVU223
 232:Core/Src/main.c ****     printf("\n\rCAN received");
 971              		.loc 1 232 11 is_stmt 0 discriminator 1 view .LVU224
 972 016c 0021     		movs	r1, #0
 973 016e 5348     		ldr	r0, .L48+12
 974 0170 FFF7FEFF 		bl	HAL_CAN_GetRxFifoFillLevel
 975              	.LVL71:
 232:Core/Src/main.c ****     printf("\n\rCAN received");
 976              		.loc 1 232 10 discriminator 1 view .LVU225
 977 0174 0028     		cmp	r0, #0
 978 0176 F9D0     		beq	.L27
 233:Core/Src/main.c ****     can_rx_status = HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &rx_header, can_rx_payload);
 979              		.loc 1 233 5 is_stmt 1 view .LVU226
 980 0178 5348     		ldr	r0, .L48+24
 981 017a FFF7FEFF 		bl	printf
 982              	.LVL72:
 234:Core/Src/main.c **** 
 983              		.loc 1 234 5 view .LVU227
 234:Core/Src/main.c **** 
 984              		.loc 1 234 21 is_stmt 0 view .LVU228
 985 017e 2CAB     		add	r3, sp, #176
 986 0180 25AA     		add	r2, sp, #148
 987 0182 0021     		movs	r1, #0
 988 0184 4D48     		ldr	r0, .L48+12
 989 0186 FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 990              	.LVL73:
 237:Core/Src/main.c ****     const uint16_t received_ptn_id = can_rx_payload[0];
 991              		.loc 1 237 5 is_stmt 1 view .LVU229
 238:Core/Src/main.c ****     switch (ptn_can_id)
 992              		.loc 1 238 5 view .LVU230
 238:Core/Src/main.c ****     switch (ptn_can_id)
 993              		.loc 1 238 52 is_stmt 0 view .LVU231
 994 018a 9DF8B010 		ldrb	r1, [sp, #176]	@ zero_extendqisi2
 995              	.LVL74:
 239:Core/Src/main.c ****     {
 996              		.loc 1 239 5 is_stmt 1 view .LVU232
 997 018e BDF89430 		ldrh	r3, [sp, #148]
 998 0192 40F20112 		movw	r2, #257
 999 0196 9342     		cmp	r3, r2
 1000 0198 D1D0     		beq	.L28
 1001 019a B3F5817F 		cmp	r3, #258
 1002 019e D0D1     		bne	.L29
 1003 01a0 0024     		movs	r4, #0
 1004              	.LVL75:
 239:Core/Src/main.c ****     {
 1005              		.loc 1 239 5 is_stmt 0 view .LVU233
 1006 01a2 A346     		mov	fp, r4
 1007              	.LVL76:
 239:Core/Src/main.c ****     {
 1008              		.loc 1 239 5 view .LVU234
 1009 01a4 CDE7     		b	.L29
 1010              	.LVL77:
 1011              	.L44:
ARM GAS  /tmp/cc6OZ6uR.s 			page 34


 245:Core/Src/main.c ****         }
 1012              		.loc 1 245 11 is_stmt 1 view .LVU235
 1013              	.LDL1:
 266:Core/Src/main.c ****     }
 1014              		.loc 1 266 7 view .LVU236
 271:Core/Src/main.c ****     tx_spi_cmd(&hspi2, FLUSH_RX, NULL, 0);
 1015              		.loc 1 271 5 view .LVU237
 1016 01a6 434E     		ldr	r6, .L48+4
 1017 01a8 0122     		movs	r2, #1
 1018 01aa 4FF48071 		mov	r1, #256
 1019              	.LVL78:
 271:Core/Src/main.c ****     tx_spi_cmd(&hspi2, FLUSH_RX, NULL, 0);
 1020              		.loc 1 271 5 is_stmt 0 view .LVU238
 1021 01ae 3046     		mov	r0, r6
 1022 01b0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1023              	.LVL79:
 272:Core/Src/main.c **** 
 1024              		.loc 1 272 5 is_stmt 1 view .LVU239
 1025 01b4 0023     		movs	r3, #0
 1026 01b6 1A46     		mov	r2, r3
 1027 01b8 E221     		movs	r1, #226
 1028 01ba 4148     		ldr	r0, .L48+16
 1029 01bc FFF7FEFF 		bl	tx_spi_cmd
 1030              	.LVL80:
 275:Core/Src/main.c ****     HAL_GPIO_WritePin(PTN_RF_ON_LED_Port, PTN_RF_ON_LED_Pin, 1);
 1031              		.loc 1 275 5 view .LVU240
 1032 01c0 4248     		ldr	r0, .L48+28
 1033 01c2 FFF7FEFF 		bl	printf
 1034              	.LVL81:
 276:Core/Src/main.c ****     adf4350_out_altvoltage0_powerdown(0);
 1035              		.loc 1 276 5 view .LVU241
 1036 01c6 0122     		movs	r2, #1
 1037 01c8 4FF48061 		mov	r1, #1024
 1038 01cc 3046     		mov	r0, r6
 1039 01ce FFF7FEFF 		bl	HAL_GPIO_WritePin
 1040              	.LVL82:
 277:Core/Src/main.c ****     HAL_TIM_Base_Start_IT(&htim2);
 1041              		.loc 1 277 5 view .LVU242
 1042 01d2 0020     		movs	r0, #0
 1043 01d4 FFF7FEFF 		bl	adf4350_out_altvoltage0_powerdown
 1044              	.LVL83:
 278:Core/Src/main.c **** 
 1045              		.loc 1 278 5 view .LVU243
 1046 01d8 3D48     		ldr	r0, .L48+32
 1047 01da FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1048              	.LVL84:
 281:Core/Src/main.c ****     int num_uniq_msgs = 0;
 1049              		.loc 1 281 5 view .LVU244
 282:Core/Src/main.c ****     uint32_t prev_rand_id = 0;
 1050              		.loc 1 282 5 view .LVU245
 283:Core/Src/main.c **** 
 1051              		.loc 1 283 5 view .LVU246
 285:Core/Src/main.c ****     uint8_t rx_fifo_empty = 1;
 1052              		.loc 1 285 5 view .LVU247
 286:Core/Src/main.c ****     uint8_t fifo_status = 0;
 1053              		.loc 1 286 5 view .LVU248
 287:Core/Src/main.c ****     uint8_t rxbuffer[RX_BUF_SZ_BYTES] = {0};
ARM GAS  /tmp/cc6OZ6uR.s 			page 35


 1054              		.loc 1 287 5 view .LVU249
 288:Core/Src/main.c **** 
 1055              		.loc 1 288 5 view .LVU250
 288:Core/Src/main.c **** 
 1056              		.loc 1 288 13 is_stmt 0 view .LVU251
 1057 01de 0021     		movs	r1, #0
 1058 01e0 0991     		str	r1, [sp, #36]
 1059 01e2 3C22     		movs	r2, #60
 1060 01e4 0AA8     		add	r0, sp, #40
 1061 01e6 FFF7FEFF 		bl	memset
 1062              	.LVL85:
 290:Core/Src/main.c ****     uint32_t millis_time = HAL_GetTick() - ref_time;
 1063              		.loc 1 290 5 is_stmt 1 view .LVU252
 290:Core/Src/main.c ****     uint32_t millis_time = HAL_GetTick() - ref_time;
 1064              		.loc 1 290 25 is_stmt 0 view .LVU253
 1065 01ea FFF7FEFF 		bl	HAL_GetTick
 1066              	.LVL86:
 1067 01ee 0746     		mov	r7, r0
 1068              	.LVL87:
 291:Core/Src/main.c **** 
 1069              		.loc 1 291 5 is_stmt 1 view .LVU254
 291:Core/Src/main.c **** 
 1070              		.loc 1 291 28 is_stmt 0 view .LVU255
 1071 01f0 FFF7FEFF 		bl	HAL_GetTick
 1072              	.LVL88:
 291:Core/Src/main.c **** 
 1073              		.loc 1 291 14 view .LVU256
 1074 01f4 C61B     		subs	r6, r0, r7
 1075              	.LVL89:
 295:Core/Src/main.c ****     while((!STATUS_RX_DR(nrf24l01_get_status(&hspi2))) && millis_time < NRF24L01_RX_TIMEOUT)
 1076              		.loc 1 295 5 is_stmt 1 view .LVU257
 1077 01f6 3748     		ldr	r0, .L48+36
 1078 01f8 FFF7FEFF 		bl	printf
 1079              	.LVL90:
 296:Core/Src/main.c ****     {
 1080              		.loc 1 296 5 view .LVU258
 296:Core/Src/main.c ****     {
 1081              		.loc 1 296 10 is_stmt 0 view .LVU259
 1082 01fc 02E0     		b	.L30
 1083              	.L32:
 298:Core/Src/main.c ****     }
 1084              		.loc 1 298 7 is_stmt 1 view .LVU260
 298:Core/Src/main.c ****     }
 1085              		.loc 1 298 21 is_stmt 0 view .LVU261
 1086 01fe FFF7FEFF 		bl	HAL_GetTick
 1087              	.LVL91:
 298:Core/Src/main.c ****     }
 1088              		.loc 1 298 19 view .LVU262
 1089 0202 C61B     		subs	r6, r0, r7
 1090              	.LVL92:
 1091              	.L30:
 296:Core/Src/main.c ****     {
 1092              		.loc 1 296 10 is_stmt 1 view .LVU263
 296:Core/Src/main.c ****     {
 1093              		.loc 1 296 13 is_stmt 0 view .LVU264
 1094 0204 2E48     		ldr	r0, .L48+16
 1095 0206 FFF7FEFF 		bl	nrf24l01_get_status
ARM GAS  /tmp/cc6OZ6uR.s 			page 36


 1096              	.LVL93:
 296:Core/Src/main.c ****     {
 1097              		.loc 1 296 10 view .LVU265
 1098 020a 10F0400F 		tst	r0, #64
 1099 020e 03D1     		bne	.L31
 296:Core/Src/main.c ****     {
 1100              		.loc 1 296 56 discriminator 1 view .LVU266
 1101 0210 41F28733 		movw	r3, #4999
 1102 0214 9E42     		cmp	r6, r3
 1103 0216 F2D9     		bls	.L32
 1104              	.L31:
 302:Core/Src/main.c ****     HAL_TIM_Base_Stop_IT(&htim2);
 1105              		.loc 1 302 5 is_stmt 1 view .LVU267
 1106 0218 2F48     		ldr	r0, .L48+40
 1107 021a FFF7FEFF 		bl	printf
 1108              	.LVL94:
 303:Core/Src/main.c ****     adf4350_out_altvoltage0_powerdown(1);
 1109              		.loc 1 303 5 view .LVU268
 1110 021e 2C48     		ldr	r0, .L48+32
 1111 0220 FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
 1112              	.LVL95:
 304:Core/Src/main.c ****     HAL_GPIO_WritePin(PTN_RF_ON_LED_Port, PTN_RF_ON_LED_Pin, 0);
 1113              		.loc 1 304 5 view .LVU269
 1114 0224 0120     		movs	r0, #1
 1115 0226 FFF7FEFF 		bl	adf4350_out_altvoltage0_powerdown
 1116              	.LVL96:
 305:Core/Src/main.c **** 
 1117              		.loc 1 305 5 view .LVU270
 1118 022a 0022     		movs	r2, #0
 1119 022c 4FF48061 		mov	r1, #1024
 1120 0230 2048     		ldr	r0, .L48+4
 1121 0232 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1122              	.LVL97:
 308:Core/Src/main.c ****     if (millis_time < NRF24L01_RX_TIMEOUT)
 1123              		.loc 1 308 5 view .LVU271
 308:Core/Src/main.c ****     if (millis_time < NRF24L01_RX_TIMEOUT)
 1124              		.loc 1 308 18 is_stmt 0 view .LVU272
 1125 0236 0023     		movs	r3, #0
 1126 0238 0793     		str	r3, [sp, #28]
 1127 023a 0893     		str	r3, [sp, #32]
 309:Core/Src/main.c ****     {
 1128              		.loc 1 309 5 is_stmt 1 view .LVU273
 309:Core/Src/main.c ****     {
 1129              		.loc 1 309 8 is_stmt 0 view .LVU274
 1130 023c 41F28733 		movw	r3, #4999
 1131 0240 9E42     		cmp	r6, r3
 1132 0242 2AD9     		bls	.L45
 365:Core/Src/main.c ****       printf("\n\rERROR: Timeout");
 1133              		.loc 1 365 7 is_stmt 1 view .LVU275
 1134              	.LVL98:
 366:Core/Src/main.c ****     }
 1135              		.loc 1 366 7 view .LVU276
 1136 0244 2548     		ldr	r0, .L48+44
 1137 0246 FFF7FEFF 		bl	printf
 1138              	.LVL99:
 365:Core/Src/main.c ****       printf("\n\rERROR: Timeout");
 1139              		.loc 1 365 18 is_stmt 0 view .LVU277
ARM GAS  /tmp/cc6OZ6uR.s 			page 37


 1140 024a 0126     		movs	r6, #1
 1141              	.LVL100:
 1142              	.L37:
 370:Core/Src/main.c **** 
 1143              		.loc 1 370 5 is_stmt 1 view .LVU278
 1144 024c 0022     		movs	r2, #0
 1145 024e 4FF48071 		mov	r1, #256
 1146 0252 1848     		ldr	r0, .L48+4
 1147 0254 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1148              	.LVL101:
 373:Core/Src/main.c ****     *((uint16_t*)can_tx_payload) = rx_msg.pressure;
 1149              		.loc 1 373 5 view .LVU279
 1150 0258 2148     		ldr	r0, .L48+48
 1151 025a FFF7FEFF 		bl	printf
 1152              	.LVL102:
 374:Core/Src/main.c ****     *((uint16_t*)can_tx_payload + 1) = rx_msg.temperature;
 1153              		.loc 1 374 5 view .LVU280
 374:Core/Src/main.c ****     *((uint16_t*)can_tx_payload + 1) = rx_msg.temperature;
 1154              		.loc 1 374 42 is_stmt 0 view .LVU281
 1155 025e BDF81D30 		ldrh	r3, [sp, #29]	@ unaligned
 374:Core/Src/main.c ****     *((uint16_t*)can_tx_payload + 1) = rx_msg.temperature;
 1156              		.loc 1 374 34 view .LVU282
 1157 0262 ADF8B830 		strh	r3, [sp, #184]	@ movhi
 375:Core/Src/main.c ****     *((uint8_t*)can_tx_payload + 4) = ptn_id;
 1158              		.loc 1 375 5 is_stmt 1 view .LVU283
 375:Core/Src/main.c ****     *((uint8_t*)can_tx_payload + 4) = ptn_id;
 1159              		.loc 1 375 46 is_stmt 0 view .LVU284
 1160 0266 BDF91F30 		ldrsh	r3, [sp, #31]	@ unaligned
 375:Core/Src/main.c ****     *((uint8_t*)can_tx_payload + 4) = ptn_id;
 1161              		.loc 1 375 38 view .LVU285
 1162 026a ADF8BA30 		strh	r3, [sp, #186]	@ movhi
 376:Core/Src/main.c ****     *((uint8_t*)can_tx_payload + 5) = rx_msg.node_id;
 1163              		.loc 1 376 5 is_stmt 1 view .LVU286
 376:Core/Src/main.c ****     *((uint8_t*)can_tx_payload + 5) = rx_msg.node_id;
 1164              		.loc 1 376 37 is_stmt 0 view .LVU287
 1165 026e 8DF8BC50 		strb	r5, [sp, #188]
 377:Core/Src/main.c ****     *((uint8_t*)can_tx_payload + 6) = ptn_status;
 1166              		.loc 1 377 5 is_stmt 1 view .LVU288
 377:Core/Src/main.c ****     *((uint8_t*)can_tx_payload + 6) = ptn_status;
 1167              		.loc 1 377 45 is_stmt 0 view .LVU289
 1168 0272 9DF81C30 		ldrb	r3, [sp, #28]	@ zero_extendqisi2
 377:Core/Src/main.c ****     *((uint8_t*)can_tx_payload + 6) = ptn_status;
 1169              		.loc 1 377 37 view .LVU290
 1170 0276 8DF8BD30 		strb	r3, [sp, #189]
 378:Core/Src/main.c ****     *((uint8_t*)can_tx_payload + 7) = (uint8_t)ptn_sn_paired;
 1171              		.loc 1 378 5 is_stmt 1 view .LVU291
 378:Core/Src/main.c ****     *((uint8_t*)can_tx_payload + 7) = (uint8_t)ptn_sn_paired;
 1172              		.loc 1 378 37 is_stmt 0 view .LVU292
 1173 027a 8DF8BE60 		strb	r6, [sp, #190]
 379:Core/Src/main.c **** 
 1174              		.loc 1 379 5 is_stmt 1 view .LVU293
 379:Core/Src/main.c **** 
 1175              		.loc 1 379 37 is_stmt 0 view .LVU294
 1176 027e 8DF8BFB0 		strb	fp, [sp, #191]
 381:Core/Src/main.c ****     can_tx_status = HAL_CAN_AddTxMessage(&hcan, &tx_header, can_tx_payload, &can_tx_mailbox);
 1177              		.loc 1 381 5 is_stmt 1 view .LVU295
 1178              	.L38:
ARM GAS  /tmp/cc6OZ6uR.s 			page 38


 381:Core/Src/main.c ****     can_tx_status = HAL_CAN_AddTxMessage(&hcan, &tx_header, can_tx_payload, &can_tx_mailbox);
 1179              		.loc 1 381 56 discriminator 1 view .LVU296
 381:Core/Src/main.c ****     can_tx_status = HAL_CAN_AddTxMessage(&hcan, &tx_header, can_tx_payload, &can_tx_mailbox);
 1180              		.loc 1 381 11 discriminator 1 view .LVU297
 381:Core/Src/main.c ****     can_tx_status = HAL_CAN_AddTxMessage(&hcan, &tx_header, can_tx_payload, &can_tx_mailbox);
 1181              		.loc 1 381 12 is_stmt 0 discriminator 1 view .LVU298
 1182 0282 0E48     		ldr	r0, .L48+12
 1183 0284 FFF7FEFF 		bl	HAL_CAN_GetTxMailboxesFreeLevel
 1184              	.LVL103:
 381:Core/Src/main.c ****     can_tx_status = HAL_CAN_AddTxMessage(&hcan, &tx_header, can_tx_payload, &can_tx_mailbox);
 1185              		.loc 1 381 11 discriminator 1 view .LVU299
 1186 0288 0028     		cmp	r0, #0
 1187 028a FAD0     		beq	.L38
 382:Core/Src/main.c **** 
 1188              		.loc 1 382 5 is_stmt 1 view .LVU300
 382:Core/Src/main.c **** 
 1189              		.loc 1 382 21 is_stmt 0 view .LVU301
 1190 028c 24AB     		add	r3, sp, #144
 1191 028e 2EAA     		add	r2, sp, #184
 1192 0290 30A9     		add	r1, sp, #192
 1193 0292 0A48     		ldr	r0, .L48+12
 1194 0294 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1195              	.LVL104:
 1196 0298 53E7     		b	.L29
 1197              	.LVL105:
 1198              	.L45:
 311:Core/Src/main.c **** 
 1199              		.loc 1 311 7 is_stmt 1 view .LVU302
 1200 029a 1248     		ldr	r0, .L48+52
 1201 029c FFF7FEFF 		bl	printf
 1202              	.LVL106:
 313:Core/Src/main.c **** 
 1203              		.loc 1 313 7 view .LVU303
 283:Core/Src/main.c **** 
 1204              		.loc 1 283 14 is_stmt 0 view .LVU304
 1205 02a0 4FF00008 		mov	r8, #0
 282:Core/Src/main.c ****     uint32_t prev_rand_id = 0;
 1206              		.loc 1 282 9 view .LVU305
 1207 02a4 C146     		mov	r9, r8
 281:Core/Src/main.c ****     int num_uniq_msgs = 0;
 1208              		.loc 1 281 9 view .LVU306
 1209 02a6 4646     		mov	r6, r8
 1210              	.LVL107:
 281:Core/Src/main.c ****     int num_uniq_msgs = 0;
 1211              		.loc 1 281 9 view .LVU307
 1212 02a8 0595     		str	r5, [sp, #20]
 1213 02aa A246     		mov	r10, r4
 1214 02ac 48E0     		b	.L35
 1215              	.L49:
 1216 02ae 00BF     		.align	2
 1217              	.L48:
 1218 02b0 00000000 		.word	_impure_ptr
 1219 02b4 00080140 		.word	1073809408
 1220 02b8 00000000 		.word	.LANCHOR3
 1221 02bc 00000000 		.word	hcan
 1222 02c0 00000000 		.word	hspi2
 1223 02c4 00000000 		.word	.LC11
ARM GAS  /tmp/cc6OZ6uR.s 			page 39


 1224 02c8 14000000 		.word	.LC12
 1225 02cc 24000000 		.word	.LC13
 1226 02d0 00000000 		.word	htim2
 1227 02d4 34000000 		.word	.LC14
 1228 02d8 48000000 		.word	.LC15
 1229 02dc CC000000 		.word	.LC18
 1230 02e0 E0000000 		.word	.LC19
 1231 02e4 58000000 		.word	.LC16
 1232              	.LVL108:
 1233              	.L34:
 331:Core/Src/main.c ****             num_rx_msgs, num_uniq_msgs, rx_msg.msg_id, rx_msg.node_id, rx_msg.pressure, rx_msg.temp
 1234              		.loc 1 331 9 is_stmt 1 view .LVU308
 332:Core/Src/main.c **** 
 1235              		.loc 1 332 62 is_stmt 0 view .LVU309
 1236 02e8 9DF81C50 		ldrb	r5, [sp, #28]	@ zero_extendqisi2
 332:Core/Src/main.c **** 
 1237              		.loc 1 332 78 view .LVU310
 1238 02ec BDF81D20 		ldrh	r2, [sp, #29]	@ unaligned
 332:Core/Src/main.c **** 
 1239              		.loc 1 332 95 view .LVU311
 1240 02f0 BDF91F10 		ldrsh	r1, [sp, #31]	@ unaligned
 331:Core/Src/main.c ****             num_rx_msgs, num_uniq_msgs, rx_msg.msg_id, rx_msg.node_id, rx_msg.pressure, rx_msg.temp
 1241              		.loc 1 331 9 view .LVU312
 1242 02f4 0291     		str	r1, [sp, #8]
 1243 02f6 0192     		str	r2, [sp, #4]
 1244 02f8 0095     		str	r5, [sp]
 1245 02fa 4A46     		mov	r2, r9
 1246 02fc 3146     		mov	r1, r6
 1247 02fe 2448     		ldr	r0, .L50
 1248 0300 FFF7FEFF 		bl	printf
 1249              	.LVL109:
 335:Core/Src/main.c **** 
 1250              		.loc 1 335 9 is_stmt 1 view .LVU313
 1251 0304 09AC     		add	r4, sp, #36
 1252 0306 4027     		movs	r7, #64
 1253 0308 3A46     		mov	r2, r7
 1254 030a 0021     		movs	r1, #0
 1255 030c 2046     		mov	r0, r4
 1256 030e FFF7FEFF 		bl	memset
 1257              	.LVL110:
 338:Core/Src/main.c ****         tx_spi_cmd(&hspi2, W_REGISTER(STATUS), tx_payload, 1);
 1258              		.loc 1 338 9 view .LVU314
 338:Core/Src/main.c ****         tx_spi_cmd(&hspi2, W_REGISTER(STATUS), tx_payload, 1);
 1259              		.loc 1 338 23 is_stmt 0 view .LVU315
 1260 0312 8DF87070 		strb	r7, [sp, #112]
 339:Core/Src/main.c **** 
 1261              		.loc 1 339 9 is_stmt 1 view .LVU316
 1262 0316 1F4F     		ldr	r7, .L50+4
 1263 0318 0123     		movs	r3, #1
 1264 031a 1CAA     		add	r2, sp, #112
 1265 031c 2721     		movs	r1, #39
 1266 031e 3846     		mov	r0, r7
 1267 0320 FFF7FEFF 		bl	tx_spi_cmd
 1268              	.LVL111:
 342:Core/Src/main.c ****         fifo_status = rxbuffer[0];
 1269              		.loc 1 342 9 view .LVU317
 1270 0324 0123     		movs	r3, #1
ARM GAS  /tmp/cc6OZ6uR.s 			page 40


 1271 0326 0193     		str	r3, [sp, #4]
 1272 0328 0094     		str	r4, [sp]
 1273 032a 0023     		movs	r3, #0
 1274 032c 1A46     		mov	r2, r3
 1275 032e 1721     		movs	r1, #23
 1276 0330 3846     		mov	r0, r7
 1277 0332 FFF7FEFF 		bl	tx_rx_spi_cmd
 1278              	.LVL112:
 343:Core/Src/main.c ****         rx_fifo_empty = FIFO_STATUS_RX_EMPTY(fifo_status);
 1279              		.loc 1 343 9 view .LVU318
 343:Core/Src/main.c ****         rx_fifo_empty = FIFO_STATUS_RX_EMPTY(fifo_status);
 1280              		.loc 1 343 21 is_stmt 0 view .LVU319
 1281 0336 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 1282              	.LVL113:
 344:Core/Src/main.c **** 
 1283              		.loc 1 344 9 is_stmt 1 view .LVU320
 346:Core/Src/main.c **** 
 1284              		.loc 1 346 15 view .LVU321
 346:Core/Src/main.c **** 
 1285              		.loc 1 346 7 is_stmt 0 view .LVU322
 1286 033a 13F0010F 		tst	r3, #1
 1287 033e 17D1     		bne	.L46
 1288              	.LVL114:
 1289              	.L35:
 315:Core/Src/main.c ****       {
 1290              		.loc 1 315 7 is_stmt 1 view .LVU323
 318:Core/Src/main.c **** 
 1291              		.loc 1 318 9 view .LVU324
 1292 0340 0923     		movs	r3, #9
 1293 0342 0193     		str	r3, [sp, #4]
 1294 0344 09AC     		add	r4, sp, #36
 1295 0346 0094     		str	r4, [sp]
 1296 0348 0023     		movs	r3, #0
 1297 034a 1A46     		mov	r2, r3
 1298 034c 6121     		movs	r1, #97
 1299 034e 1148     		ldr	r0, .L50+4
 1300 0350 FFF7FEFF 		bl	tx_rx_spi_cmd
 1301              	.LVL115:
 320:Core/Src/main.c **** 
 1302              		.loc 1 320 9 view .LVU325
 320:Core/Src/main.c **** 
 1303              		.loc 1 320 20 is_stmt 0 view .LVU326
 1304 0354 0136     		adds	r6, r6, #1
 1305              	.LVL116:
 323:Core/Src/main.c **** 
 1306              		.loc 1 323 9 is_stmt 1 view .LVU327
 1307 0356 07AB     		add	r3, sp, #28
 1308 0358 94E80300 		ldm	r4, {r0, r1}
 1309 035c 83E80300 		stm	r3, {r0, r1}
 325:Core/Src/main.c ****         {
 1310              		.loc 1 325 9 view .LVU328
 325:Core/Src/main.c ****         {
 1311              		.loc 1 325 19 is_stmt 0 view .LVU329
 1312 0360 BDF82130 		ldrh	r3, [sp, #33]	@ unaligned
 325:Core/Src/main.c ****         {
 1313              		.loc 1 325 12 view .LVU330
 1314 0364 4345     		cmp	r3, r8
ARM GAS  /tmp/cc6OZ6uR.s 			page 41


 1315 0366 BFD0     		beq	.L34
 327:Core/Src/main.c ****           prev_rand_id = rx_msg.msg_id;
 1316              		.loc 1 327 11 is_stmt 1 view .LVU331
 327:Core/Src/main.c ****           prev_rand_id = rx_msg.msg_id;
 1317              		.loc 1 327 24 is_stmt 0 view .LVU332
 1318 0368 09F10109 		add	r9, r9, #1
 1319              	.LVL117:
 328:Core/Src/main.c ****         }
 1320              		.loc 1 328 11 is_stmt 1 view .LVU333
 328:Core/Src/main.c ****         }
 1321              		.loc 1 328 24 is_stmt 0 view .LVU334
 1322 036c 9846     		mov	r8, r3
 1323 036e BBE7     		b	.L34
 1324              	.LVL118:
 1325              	.L46:
 351:Core/Src/main.c ****       {
 1326              		.loc 1 351 10 view .LVU335
 1327 0370 5446     		mov	r4, r10
 1328 0372 AA46     		mov	r10, r5
 1329 0374 059D     		ldr	r5, [sp, #20]
 351:Core/Src/main.c ****       {
 1330              		.loc 1 351 7 is_stmt 1 view .LVU336
 351:Core/Src/main.c ****       {
 1331              		.loc 1 351 10 is_stmt 0 view .LVU337
 1332 0376 BBF1000F 		cmp	fp, #0
 1333 037a 02D1     		bne	.L36
 353:Core/Src/main.c ****         ptn_sn_paired = true;
 1334              		.loc 1 353 22 view .LVU338
 1335 037c 5446     		mov	r4, r10
 354:Core/Src/main.c ****       }
 1336              		.loc 1 354 23 view .LVU339
 1337 037e 4FF0010B 		mov	fp, #1
 1338              	.LVL119:
 1339              	.L36:
 358:Core/Src/main.c ****       {
 1340              		.loc 1 358 7 is_stmt 1 view .LVU340
 358:Core/Src/main.c ****       {
 1341              		.loc 1 358 10 is_stmt 0 view .LVU341
 1342 0382 A245     		cmp	r10, r4
 1343 0384 01D0     		beq	.L47
 360:Core/Src/main.c ****       }
 1344              		.loc 1 360 20 view .LVU342
 1345 0386 0226     		movs	r6, #2
 1346              	.LVL120:
 360:Core/Src/main.c ****       }
 1347              		.loc 1 360 20 view .LVU343
 1348 0388 60E7     		b	.L37
 1349              	.LVL121:
 1350              	.L47:
 313:Core/Src/main.c **** 
 1351              		.loc 1 313 18 view .LVU344
 1352 038a 0026     		movs	r6, #0
 1353              	.LVL122:
 313:Core/Src/main.c **** 
 1354              		.loc 1 313 18 view .LVU345
 1355 038c 5EE7     		b	.L37
 1356              	.L51:
ARM GAS  /tmp/cc6OZ6uR.s 			page 42


 1357 038e 00BF     		.align	2
 1358              	.L50:
 1359 0390 6C000000 		.word	.LC17
 1360 0394 00000000 		.word	hspi2
 1361              	.LBE7:
 1362              		.cfi_endproc
 1363              	.LFE68:
 1365              		.global	pll_config
 1366              		.global	fhss_freqs
 1367              		.section	.rodata
 1368              		.align	2
 1369              		.set	.LANCHOR3,. + 0
 1370              	.LC0:
 1371 0000 20200000 		.word	8224
 1372 0004 00000000 		.word	0
 1373 0008 40200000 		.word	8256
 1374 000c 00000000 		.word	0
 1375 0010 00000000 		.word	0
 1376 0014 00000000 		.word	0
 1377 0018 01000000 		.word	1
 1378 001c 01000000 		.word	1
 1379 0020 01000000 		.word	1
 1380 0024 00000000 		.word	0
 1381              	.LC1:
 1382 0028 00010000 		.word	256
 1383 002c 00000000 		.word	0
 1384 0030 00000000 		.word	0
 1385 0034 00000000 		.word	0
 1386 0038 08000000 		.word	8
 1387 003c 00       		.byte	0
 1388 003d 000000   		.space	3
 1389              	.LC2:
 1390 0040 01       		.byte	1
 1391 0041 03       		.byte	3
 1392              		.section	.bss.i.0,"aw",%nobits
 1393              		.set	.LANCHOR1,. + 0
 1396              	i.0:
 1397 0000 00       		.space	1
 1398              		.section	.bss.pll_config,"aw",%nobits
 1399              		.align	2
 1400              		.set	.LANCHOR2,. + 0
 1403              	pll_config:
 1404 0000 00000000 		.space	60
 1404      00000000 
 1404      00000000 
 1404      00000000 
 1404      00000000 
 1405              		.section	.rodata.fhss_freqs,"a"
 1406              		.align	3
 1407              		.set	.LANCHOR0,. + 0
 1410              	fhss_freqs:
 1411 0000 CB669236 		.word	915564235
 1412 0004 00000000 		.word	0
 1413 0008 DDAAE835 		.word	904440541
 1414 000c 00000000 		.word	0
 1415 0010 38F4D435 		.word	903148600
 1416 0014 00000000 		.word	0
ARM GAS  /tmp/cc6OZ6uR.s 			page 43


 1417 0018 3869E535 		.word	904227128
 1418 001c 00000000 		.word	0
 1419 0020 0D0BB036 		.word	917506829
 1420 0024 00000000 		.word	0
 1421 0028 D54F3436 		.word	909397973
 1422 002c 00000000 		.word	0
 1423 0030 1B612B36 		.word	908812571
 1424 0034 00000000 		.word	0
 1425 0038 0DA89036 		.word	915449869
 1426 003c 00000000 		.word	0
 1427 0040 73B7CA36 		.word	919254899
 1428 0044 00000000 		.word	0
 1429 0048 39613937 		.word	926507321
 1430 004c 00000000 		.word	0
 1431 0050 EFED2E37 		.word	925822447
 1432 0054 00000000 		.word	0
 1433 0058 B3E40437 		.word	923067571
 1434 005c 00000000 		.word	0
 1435 0060 F930DB35 		.word	903557369
 1436 0064 00000000 		.word	0
 1437 0068 F699A336 		.word	916691446
 1438 006c 00000000 		.word	0
 1439 0070 533F6236 		.word	912408403
 1440 0074 00000000 		.word	0
 1441 0078 CE1F9636 		.word	915808206
 1442 007c 00000000 		.word	0
 1443 0080 D999DF35 		.word	903846361
 1444 0084 00000000 		.word	0
 1445 0088 18EF8F36 		.word	915402520
 1446 008c 00000000 		.word	0
 1447 0090 82980536 		.word	906336386
 1448 0094 00000000 		.word	0
 1449 0098 74FFC335 		.word	902037364
 1450 009c 00000000 		.word	0
 1451 00a0 EC243336 		.word	909321452
 1452 00a4 00000000 		.word	0
 1453 00a8 0F421336 		.word	907231759
 1454 00ac 00000000 		.word	0
 1455 00b0 E39BC336 		.word	918789091
 1456 00b4 00000000 		.word	0
 1457 00b8 63A7FC35 		.word	905750371
 1458 00bc 00000000 		.word	0
 1459 00c0 37830437 		.word	923042615
 1460 00c4 00000000 		.word	0
 1461 00c8 60260636 		.word	906372704
 1462 00cc 00000000 		.word	0
 1463 00d0 088C6736 		.word	912755720
 1464 00d4 00000000 		.word	0
 1465 00d8 82F6E835 		.word	904459906
 1466 00dc 00000000 		.word	0
 1467 00e0 281C0636 		.word	906370088
 1468 00e4 00000000 		.word	0
 1469 00e8 CF050F37 		.word	923731407
 1470 00ec 00000000 		.word	0
 1471 00f0 79E4D935 		.word	903472249
 1472 00f4 00000000 		.word	0
 1473 00f8 57EE4A37 		.word	927657559
ARM GAS  /tmp/cc6OZ6uR.s 			page 44


 1474 00fc 00000000 		.word	0
 1475 0100 ECF46536 		.word	912651500
 1476 0104 00000000 		.word	0
 1477 0108 C406C136 		.word	918619844
 1478 010c 00000000 		.word	0
 1479 0110 2FFB2C37 		.word	925694767
 1480 0114 00000000 		.word	0
 1481 0118 4D5D4937 		.word	927554893
 1482 011c 00000000 		.word	0
 1483 0120 0ECFCD36 		.word	919457550
 1484 0124 00000000 		.word	0
 1485 0128 319BA236 		.word	916626225
 1486 012c 00000000 		.word	0
 1487 0130 8BD40336 		.word	906220683
 1488 0134 00000000 		.word	0
 1489 0138 07AFD936 		.word	920235783
 1490 013c 00000000 		.word	0
 1491 0140 A019F436 		.word	921967008
 1492 0144 00000000 		.word	0
 1493 0148 2EFEC735 		.word	902299182
 1494 014c 00000000 		.word	0
 1495 0150 6B295B36 		.word	911944043
 1496 0154 00000000 		.word	0
 1497 0158 2E570D36 		.word	906843950
 1498 015c 00000000 		.word	0
 1499 0160 175A3337 		.word	926112279
 1500 0164 00000000 		.word	0
 1501 0168 70A64336 		.word	910403184
 1502 016c 00000000 		.word	0
 1503 0170 72E31137 		.word	923919218
 1504 0174 00000000 		.word	0
 1505 0178 1F88B836 		.word	918063135
 1506 017c 00000000 		.word	0
 1507 0180 3B8A1537 		.word	924158523
 1508 0184 00000000 		.word	0
 1509 0188 7ACFE936 		.word	921292666
 1510 018c 00000000 		.word	0
 1511 0190 F451EE35 		.word	904810996
 1512 0194 00000000 		.word	0
 1513 0198 031DFC35 		.word	905714947
 1514 019c 00000000 		.word	0
 1515 01a0 2D166F36 		.word	913249837
 1516 01a4 00000000 		.word	0
 1517 01a8 71EC7B36 		.word	914091121
 1518 01ac 00000000 		.word	0
 1519 01b0 45E62B37 		.word	925623877
 1520 01b4 00000000 		.word	0
 1521 01b8 A8CE2737 		.word	925355688
 1522 01bc 00000000 		.word	0
 1523 01c0 E4CC0436 		.word	906284260
 1524 01c4 00000000 		.word	0
 1525 01c8 F714E436 		.word	920917239
 1526 01cc 00000000 		.word	0
 1527 01d0 7748B736 		.word	917981303
 1528 01d4 00000000 		.word	0
 1529 01d8 F942FA35 		.word	905593593
 1530 01dc 00000000 		.word	0
ARM GAS  /tmp/cc6OZ6uR.s 			page 45


 1531 01e0 42F4A836 		.word	917042242
 1532 01e4 00000000 		.word	0
 1533 01e8 5784C935 		.word	902399063
 1534 01ec 00000000 		.word	0
 1535 01f0 1E601037 		.word	923820062
 1536 01f4 00000000 		.word	0
 1537 01f8 CC553637 		.word	926307788
 1538 01fc 00000000 		.word	0
 1539 0200 C4673636 		.word	909535172
 1540 0204 00000000 		.word	0
 1541 0208 F5F31736 		.word	907539445
 1542 020c 00000000 		.word	0
 1543 0210 1D112537 		.word	925176093
 1544 0214 00000000 		.word	0
 1545 0218 23F8F035 		.word	904984611
 1546 021c 00000000 		.word	0
 1547 0220 7A933236 		.word	909284218
 1548 0224 00000000 		.word	0
 1549 0228 4441CA36 		.word	919224644
 1550 022c 00000000 		.word	0
 1551 0230 0FFCFC35 		.word	905772047
 1552 0234 00000000 		.word	0
 1553 0238 D10ADF36 		.word	920586961
 1554 023c 00000000 		.word	0
 1555 0240 C903A036 		.word	916456393
 1556 0244 00000000 		.word	0
 1557 0248 F2B81336 		.word	907262194
 1558 024c 00000000 		.word	0
 1559 0250 EBA6A736 		.word	916956907
 1560 0254 00000000 		.word	0
 1561 0258 15473736 		.word	909592341
 1562 025c 00000000 		.word	0
 1563 0260 566D1B37 		.word	924544342
 1564 0264 00000000 		.word	0
 1565 0268 E49A4037 		.word	926980836
 1566 026c 00000000 		.word	0
 1567 0270 4BDBFB36 		.word	922475339
 1568 0274 00000000 		.word	0
 1569 0278 D2EF1A37 		.word	924512210
 1570 027c 00000000 		.word	0
 1571 0280 70293537 		.word	926230896
 1572 0284 00000000 		.word	0
 1573 0288 24E9AB36 		.word	917236004
 1574 028c 00000000 		.word	0
 1575 0290 E1C56436 		.word	912573921
 1576 0294 00000000 		.word	0
 1577 0298 2D67D535 		.word	903178029
 1578 029c 00000000 		.word	0
 1579 02a0 56C21F37 		.word	924828246
 1580 02a4 00000000 		.word	0
 1581 02a8 F2630837 		.word	923296754
 1582 02ac 00000000 		.word	0
 1583 02b0 9B80A736 		.word	916947099
 1584 02b4 00000000 		.word	0
 1585 02b8 9F6F4A36 		.word	910847903
 1586 02bc 00000000 		.word	0
 1587 02c0 11E73337 		.word	926148369
ARM GAS  /tmp/cc6OZ6uR.s 			page 46


 1588 02c4 00000000 		.word	0
 1589 02c8 1B798036 		.word	914389275
 1590 02cc 00000000 		.word	0
 1591 02d0 E6F79636 		.word	915863526
 1592 02d4 00000000 		.word	0
 1593 02d8 84795036 		.word	911243652
 1594 02dc 00000000 		.word	0
 1595 02e0 7B59E235 		.word	904026491
 1596 02e4 00000000 		.word	0
 1597 02e8 59C8EF35 		.word	904906841
 1598 02ec 00000000 		.word	0
 1599 02f0 51986736 		.word	912758865
 1600 02f4 00000000 		.word	0
 1601 02f8 CD6CD735 		.word	903310541
 1602 02fc 00000000 		.word	0
 1603 0300 D5931736 		.word	907514837
 1604 0304 00000000 		.word	0
 1605 0308 EAA23537 		.word	926261994
 1606 030c 00000000 		.word	0
 1607 0310 FE0C4537 		.word	927272190
 1608 0314 00000000 		.word	0
 1609 0318 043EE135 		.word	903953924
 1610 031c 00000000 		.word	0
 1611              		.text
 1612              	.Letext0:
 1613              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 1614              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1615              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1616              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1617              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1618              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1619              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1620              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 1621              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h"
 1622              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 1623              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 1624              		.file 14 "Core/Inc/main.h"
 1625              		.file 15 "Core/Inc/can.h"
 1626              		.file 16 "Core/Inc/spi.h"
 1627              		.file 17 "Core/Inc/tim.h"
 1628              		.file 18 "Core/Inc/usart.h"
 1629              		.file 19 "Core/Inc/adf4351.h"
 1630              		.file 20 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 1631              		.file 21 "/usr/include/newlib/sys/_types.h"
 1632              		.file 22 "/usr/include/newlib/sys/reent.h"
 1633              		.file 23 "/usr/include/newlib/sys/lock.h"
 1634              		.file 24 "Core/Inc/nrf24l01.h"
 1635              		.file 25 "/usr/include/newlib/stdio.h"
 1636              		.file 26 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1637              		.file 27 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1638              		.file 28 "Core/Inc/gpio.h"
 1639              		.file 29 "<built-in>"
ARM GAS  /tmp/cc6OZ6uR.s 			page 47


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc6OZ6uR.s:16     .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cc6OZ6uR.s:24     .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc6OZ6uR.s:68     .text.HAL_TIM_PeriodElapsedCallback:000000000000002c $d
     /tmp/cc6OZ6uR.s:75     .text.cmd_sm_init:0000000000000000 $t
     /tmp/cc6OZ6uR.s:82     .text.cmd_sm_init:0000000000000000 cmd_sm_init
     /tmp/cc6OZ6uR.s:198    .text.cmd_sm_init:0000000000000084 $d
     /tmp/cc6OZ6uR.s:205    .rodata.read_back_config.str1.4:0000000000000000 $d
     /tmp/cc6OZ6uR.s:231    .text.read_back_config:0000000000000000 $t
     /tmp/cc6OZ6uR.s:238    .text.read_back_config:0000000000000000 read_back_config
     /tmp/cc6OZ6uR.s:450    .text.read_back_config:0000000000000158 $d
     /tmp/cc6OZ6uR.s:463    .text.__io_putchar:0000000000000000 $t
     /tmp/cc6OZ6uR.s:470    .text.__io_putchar:0000000000000000 __io_putchar
     /tmp/cc6OZ6uR.s:506    .text.__io_putchar:000000000000001c $d
     /tmp/cc6OZ6uR.s:511    .text.Error_Handler:0000000000000000 $t
     /tmp/cc6OZ6uR.s:518    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc6OZ6uR.s:550    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc6OZ6uR.s:557    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc6OZ6uR.s:665    .rodata.main.str1.4:0000000000000000 $d
     /tmp/cc6OZ6uR.s:694    .text.main:0000000000000000 $t
     /tmp/cc6OZ6uR.s:701    .text.main:0000000000000000 main
     /tmp/cc6OZ6uR.s:1218   .text.main:00000000000002b0 $d
     /tmp/cc6OZ6uR.s:1236   .text.main:00000000000002e8 $t
     /tmp/cc6OZ6uR.s:1359   .text.main:0000000000000390 $d
     /tmp/cc6OZ6uR.s:1403   .bss.pll_config:0000000000000000 pll_config
     /tmp/cc6OZ6uR.s:1410   .rodata.fhss_freqs:0000000000000000 fhss_freqs
     /tmp/cc6OZ6uR.s:1368   .rodata:0000000000000000 $d
     /tmp/cc6OZ6uR.s:1396   .bss.i.0:0000000000000000 i.0
     /tmp/cc6OZ6uR.s:1397   .bss.i.0:0000000000000000 $d
     /tmp/cc6OZ6uR.s:1399   .bss.pll_config:0000000000000000 $d
     /tmp/cc6OZ6uR.s:1406   .rodata.fhss_freqs:0000000000000000 $d

UNDEFINED SYMBOLS
adf4350_out_altvoltage0_frequency
adf4350_out_altvoltage0_powerdown
adf4350_setup
memset
tx_rx_spi_cmd
printf
hspi2
HAL_UART_Transmit
huart3
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
setvbuf
MX_GPIO_Init
MX_SPI1_Init
MX_TIM2_Init
MX_SPI2_Init
MX_CAN_Init
MX_USART3_UART_Init
HAL_GPIO_WritePin
HAL_GPIO_ReadPin
HAL_CAN_ConfigFilter
HAL_CAN_Start
ARM GAS  /tmp/cc6OZ6uR.s 			page 48


tx_spi_cmd
HAL_Delay
nrf24l01_setup_rf
HAL_CAN_GetRxFifoFillLevel
HAL_CAN_GetRxMessage
HAL_TIM_Base_Start_IT
HAL_GetTick
nrf24l01_get_status
HAL_TIM_Base_Stop_IT
HAL_CAN_GetTxMailboxesFreeLevel
HAL_CAN_AddTxMessage
_impure_ptr
hcan
htim2
