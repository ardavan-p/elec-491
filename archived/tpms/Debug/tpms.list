
tpms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039c4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08003a84  08003a84  00004a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b98  08003b98  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b98  08003b98  00004b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ba0  08003ba0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ba0  08003ba0  00004ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ba4  08003ba4  00004ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003ba8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  08003bb4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08003bb4  00005124  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7b5  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002181  00000000  00000000  000127e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  00014970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000085d  00000000  00000000  00015448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189cb  00000000  00000000  00015ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000def9  00000000  00000000  0002e670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b70b  00000000  00000000  0003c569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7c74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002594  00000000  00000000  000d7cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000da24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a6c 	.word	0x08003a6c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003a6c 	.word	0x08003a6c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	@ (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	@ (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	d434      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046a:	469b      	mov	fp, r3
 800046c:	4653      	mov	r3, sl
 800046e:	465a      	mov	r2, fp
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83b      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e079      	b.n	800057a <__udivmoddi4+0x146>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e076      	b.n	8000580 <__udivmoddi4+0x14c>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e029      	b.n	8000500 <__udivmoddi4+0xcc>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	469b      	mov	fp, r3
 80004d8:	2320      	movs	r3, #32
 80004da:	1a9b      	subs	r3, r3, r2
 80004dc:	4652      	mov	r2, sl
 80004de:	40da      	lsrs	r2, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0013      	movs	r3, r2
 80004e4:	464a      	mov	r2, r9
 80004e6:	408a      	lsls	r2, r1
 80004e8:	0017      	movs	r7, r2
 80004ea:	4642      	mov	r2, r8
 80004ec:	431f      	orrs	r7, r3
 80004ee:	4653      	mov	r3, sl
 80004f0:	4093      	lsls	r3, r2
 80004f2:	001e      	movs	r6, r3
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d9c3      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f8:	2200      	movs	r2, #0
 80004fa:	2300      	movs	r3, #0
 80004fc:	9200      	str	r2, [sp, #0]
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	4643      	mov	r3, r8
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0d8      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000506:	07fb      	lsls	r3, r7, #31
 8000508:	0872      	lsrs	r2, r6, #1
 800050a:	431a      	orrs	r2, r3
 800050c:	4646      	mov	r6, r8
 800050e:	087b      	lsrs	r3, r7, #1
 8000510:	e00e      	b.n	8000530 <__udivmoddi4+0xfc>
 8000512:	42ab      	cmp	r3, r5
 8000514:	d101      	bne.n	800051a <__udivmoddi4+0xe6>
 8000516:	42a2      	cmp	r2, r4
 8000518:	d80c      	bhi.n	8000534 <__udivmoddi4+0x100>
 800051a:	1aa4      	subs	r4, r4, r2
 800051c:	419d      	sbcs	r5, r3
 800051e:	2001      	movs	r0, #1
 8000520:	1924      	adds	r4, r4, r4
 8000522:	416d      	adcs	r5, r5
 8000524:	2100      	movs	r1, #0
 8000526:	3e01      	subs	r6, #1
 8000528:	1824      	adds	r4, r4, r0
 800052a:	414d      	adcs	r5, r1
 800052c:	2e00      	cmp	r6, #0
 800052e:	d006      	beq.n	800053e <__udivmoddi4+0x10a>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d9ee      	bls.n	8000512 <__udivmoddi4+0xde>
 8000534:	3e01      	subs	r6, #1
 8000536:	1924      	adds	r4, r4, r4
 8000538:	416d      	adcs	r5, r5
 800053a:	2e00      	cmp	r6, #0
 800053c:	d1f8      	bne.n	8000530 <__udivmoddi4+0xfc>
 800053e:	9800      	ldr	r0, [sp, #0]
 8000540:	9901      	ldr	r1, [sp, #4]
 8000542:	465b      	mov	r3, fp
 8000544:	1900      	adds	r0, r0, r4
 8000546:	4169      	adcs	r1, r5
 8000548:	2b00      	cmp	r3, #0
 800054a:	db24      	blt.n	8000596 <__udivmoddi4+0x162>
 800054c:	002b      	movs	r3, r5
 800054e:	465a      	mov	r2, fp
 8000550:	4644      	mov	r4, r8
 8000552:	40d3      	lsrs	r3, r2
 8000554:	002a      	movs	r2, r5
 8000556:	40e2      	lsrs	r2, r4
 8000558:	001c      	movs	r4, r3
 800055a:	465b      	mov	r3, fp
 800055c:	0015      	movs	r5, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	db2a      	blt.n	80005b8 <__udivmoddi4+0x184>
 8000562:	0026      	movs	r6, r4
 8000564:	409e      	lsls	r6, r3
 8000566:	0033      	movs	r3, r6
 8000568:	0026      	movs	r6, r4
 800056a:	4647      	mov	r7, r8
 800056c:	40be      	lsls	r6, r7
 800056e:	0032      	movs	r2, r6
 8000570:	1a80      	subs	r0, r0, r2
 8000572:	4199      	sbcs	r1, r3
 8000574:	9000      	str	r0, [sp, #0]
 8000576:	9101      	str	r1, [sp, #4]
 8000578:	e79e      	b.n	80004b8 <__udivmoddi4+0x84>
 800057a:	42a3      	cmp	r3, r4
 800057c:	d8bc      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 800057e:	e782      	b.n	8000486 <__udivmoddi4+0x52>
 8000580:	4642      	mov	r2, r8
 8000582:	2320      	movs	r3, #32
 8000584:	2100      	movs	r1, #0
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	2200      	movs	r2, #0
 800058a:	9100      	str	r1, [sp, #0]
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	2201      	movs	r2, #1
 8000590:	40da      	lsrs	r2, r3
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	e785      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000596:	4642      	mov	r2, r8
 8000598:	2320      	movs	r3, #32
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	002a      	movs	r2, r5
 800059e:	4646      	mov	r6, r8
 80005a0:	409a      	lsls	r2, r3
 80005a2:	0023      	movs	r3, r4
 80005a4:	40f3      	lsrs	r3, r6
 80005a6:	4644      	mov	r4, r8
 80005a8:	4313      	orrs	r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	40e2      	lsrs	r2, r4
 80005ae:	001c      	movs	r4, r3
 80005b0:	465b      	mov	r3, fp
 80005b2:	0015      	movs	r5, r2
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	dad4      	bge.n	8000562 <__udivmoddi4+0x12e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	002f      	movs	r7, r5
 80005bc:	2320      	movs	r3, #32
 80005be:	0026      	movs	r6, r4
 80005c0:	4097      	lsls	r7, r2
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	40de      	lsrs	r6, r3
 80005c6:	003b      	movs	r3, r7
 80005c8:	4333      	orrs	r3, r6
 80005ca:	e7cd      	b.n	8000568 <__udivmoddi4+0x134>

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			@ (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	@ (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <MX_GPIO_Init>:
     PA14 (SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b08b      	sub	sp, #44	@ 0x2c
 8000624:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	2414      	movs	r4, #20
 8000628:	193b      	adds	r3, r7, r4
 800062a:	0018      	movs	r0, r3
 800062c:	2314      	movs	r3, #20
 800062e:	001a      	movs	r2, r3
 8000630:	2100      	movs	r1, #0
 8000632:	f003 f9ef 	bl	8003a14 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	4b5e      	ldr	r3, [pc, #376]	@ (80007b0 <MX_GPIO_Init+0x190>)
 8000638:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800063a:	4b5d      	ldr	r3, [pc, #372]	@ (80007b0 <MX_GPIO_Init+0x190>)
 800063c:	2104      	movs	r1, #4
 800063e:	430a      	orrs	r2, r1
 8000640:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000642:	4b5b      	ldr	r3, [pc, #364]	@ (80007b0 <MX_GPIO_Init+0x190>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000646:	2204      	movs	r2, #4
 8000648:	4013      	ands	r3, r2
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800064e:	4b58      	ldr	r3, [pc, #352]	@ (80007b0 <MX_GPIO_Init+0x190>)
 8000650:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000652:	4b57      	ldr	r3, [pc, #348]	@ (80007b0 <MX_GPIO_Init+0x190>)
 8000654:	2120      	movs	r1, #32
 8000656:	430a      	orrs	r2, r1
 8000658:	64da      	str	r2, [r3, #76]	@ 0x4c
 800065a:	4b55      	ldr	r3, [pc, #340]	@ (80007b0 <MX_GPIO_Init+0x190>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065e:	2220      	movs	r2, #32
 8000660:	4013      	ands	r3, r2
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b52      	ldr	r3, [pc, #328]	@ (80007b0 <MX_GPIO_Init+0x190>)
 8000668:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800066a:	4b51      	ldr	r3, [pc, #324]	@ (80007b0 <MX_GPIO_Init+0x190>)
 800066c:	2101      	movs	r1, #1
 800066e:	430a      	orrs	r2, r1
 8000670:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000672:	4b4f      	ldr	r3, [pc, #316]	@ (80007b0 <MX_GPIO_Init+0x190>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	2201      	movs	r2, #1
 8000678:	4013      	ands	r3, r2
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	4b4c      	ldr	r3, [pc, #304]	@ (80007b0 <MX_GPIO_Init+0x190>)
 8000680:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000682:	4b4b      	ldr	r3, [pc, #300]	@ (80007b0 <MX_GPIO_Init+0x190>)
 8000684:	2102      	movs	r1, #2
 8000686:	430a      	orrs	r2, r1
 8000688:	64da      	str	r2, [r3, #76]	@ 0x4c
 800068a:	4b49      	ldr	r3, [pc, #292]	@ (80007b0 <MX_GPIO_Init+0x190>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	2202      	movs	r2, #2
 8000690:	4013      	ands	r3, r2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000696:	4b46      	ldr	r3, [pc, #280]	@ (80007b0 <MX_GPIO_Init+0x190>)
 8000698:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800069a:	4b45      	ldr	r3, [pc, #276]	@ (80007b0 <MX_GPIO_Init+0x190>)
 800069c:	2108      	movs	r1, #8
 800069e:	430a      	orrs	r2, r1
 80006a0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80006a2:	4b43      	ldr	r3, [pc, #268]	@ (80007b0 <MX_GPIO_Init+0x190>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a6:	2208      	movs	r2, #8
 80006a8:	4013      	ands	r3, r2
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80006ae:	23a0      	movs	r3, #160	@ 0xa0
 80006b0:	05db      	lsls	r3, r3, #23
 80006b2:	2200      	movs	r2, #0
 80006b4:	2120      	movs	r1, #32
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 fd92 	bl	80011e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	4a3d      	ldr	r2, [pc, #244]	@ (80007b4 <MX_GPIO_Init+0x194>)
 80006c0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2203      	movs	r2, #3
 80006c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	4a39      	ldr	r2, [pc, #228]	@ (80007b8 <MX_GPIO_Init+0x198>)
 80006d2:	0019      	movs	r1, r3
 80006d4:	0010      	movs	r0, r2
 80006d6:	f000 fc17 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	220c      	movs	r2, #12
 80006de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	2203      	movs	r2, #3
 80006e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	4a33      	ldr	r2, [pc, #204]	@ (80007bc <MX_GPIO_Init+0x19c>)
 80006f0:	0019      	movs	r1, r3
 80006f2:	0010      	movs	r0, r2
 80006f4:	f000 fc08 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	4a31      	ldr	r2, [pc, #196]	@ (80007c0 <MX_GPIO_Init+0x1a0>)
 80006fc:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	2203      	movs	r2, #3
 8000702:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	193b      	adds	r3, r7, r4
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	193a      	adds	r2, r7, r4
 800070c:	23a0      	movs	r3, #160	@ 0xa0
 800070e:	05db      	lsls	r3, r3, #23
 8000710:	0011      	movs	r1, r2
 8000712:	0018      	movs	r0, r3
 8000714:	f000 fbf8 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	2220      	movs	r2, #32
 800071c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	2201      	movs	r2, #1
 8000722:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000730:	193a      	adds	r2, r7, r4
 8000732:	23a0      	movs	r3, #160	@ 0xa0
 8000734:	05db      	lsls	r3, r3, #23
 8000736:	0011      	movs	r1, r2
 8000738:	0018      	movs	r0, r3
 800073a:	f000 fbe5 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800073e:	193b      	adds	r3, r7, r4
 8000740:	4a20      	ldr	r2, [pc, #128]	@ (80007c4 <MX_GPIO_Init+0x1a4>)
 8000742:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000744:	193b      	adds	r3, r7, r4
 8000746:	2203      	movs	r2, #3
 8000748:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000750:	193b      	adds	r3, r7, r4
 8000752:	4a1d      	ldr	r2, [pc, #116]	@ (80007c8 <MX_GPIO_Init+0x1a8>)
 8000754:	0019      	movs	r1, r3
 8000756:	0010      	movs	r0, r2
 8000758:	f000 fbd6 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800075c:	193b      	adds	r3, r7, r4
 800075e:	2204      	movs	r2, #4
 8000760:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000762:	193b      	adds	r3, r7, r4
 8000764:	2203      	movs	r2, #3
 8000766:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	193b      	adds	r3, r7, r4
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800076e:	193b      	adds	r3, r7, r4
 8000770:	4a16      	ldr	r2, [pc, #88]	@ (80007cc <MX_GPIO_Init+0x1ac>)
 8000772:	0019      	movs	r1, r3
 8000774:	0010      	movs	r0, r2
 8000776:	f000 fbc7 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800077a:	0021      	movs	r1, r4
 800077c:	187b      	adds	r3, r7, r1
 800077e:	22c0      	movs	r2, #192	@ 0xc0
 8000780:	0092      	lsls	r2, r2, #2
 8000782:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2212      	movs	r2, #18
 8000788:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2204      	movs	r2, #4
 800079a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079c:	187b      	adds	r3, r7, r1
 800079e:	4a0a      	ldr	r2, [pc, #40]	@ (80007c8 <MX_GPIO_Init+0x1a8>)
 80007a0:	0019      	movs	r1, r3
 80007a2:	0010      	movs	r0, r2
 80007a4:	f000 fbb0 	bl	8000f08 <HAL_GPIO_Init>

}
 80007a8:	46c0      	nop			@ (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b00b      	add	sp, #44	@ 0x2c
 80007ae:	bd90      	pop	{r4, r7, pc}
 80007b0:	40021000 	.word	0x40021000
 80007b4:	00003fff 	.word	0x00003fff
 80007b8:	50000800 	.word	0x50000800
 80007bc:	50001400 	.word	0x50001400
 80007c0:	00009f11 	.word	0x00009f11
 80007c4:	0000fcff 	.word	0x0000fcff
 80007c8:	50000400 	.word	0x50000400
 80007cc:	50000c00 	.word	0x50000c00

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b5b0      	push	{r4, r5, r7, lr}
 80007d2:	b08a      	sub	sp, #40	@ 0x28
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d6:	f000 fa46 	bl	8000c66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007da:	f000 f831 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007de:	f7ff ff1f 	bl	8000620 <MX_GPIO_Init>
  MX_SPI1_Init();
 80007e2:	f000 f879 	bl	80008d8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80007e6:	f000 f967 	bl	8000ab8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t test_msg[32] = "hello world!\n";
 80007ea:	1d39      	adds	r1, r7, #4
 80007ec:	4a12      	ldr	r2, [pc, #72]	@ (8000838 <main+0x68>)
 80007ee:	000b      	movs	r3, r1
 80007f0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80007f2:	c331      	stmia	r3!, {r0, r4, r5}
 80007f4:	8812      	ldrh	r2, [r2, #0]
 80007f6:	801a      	strh	r2, [r3, #0]
 80007f8:	230e      	movs	r3, #14
 80007fa:	18cb      	adds	r3, r1, r3
 80007fc:	2212      	movs	r2, #18
 80007fe:	2100      	movs	r1, #0
 8000800:	0018      	movs	r0, r3
 8000802:	f003 f907 	bl	8003a14 <memset>

  HAL_StatusTypeDef uart_status = HAL_ERROR;
 8000806:	2327      	movs	r3, #39	@ 0x27
 8000808:	18fb      	adds	r3, r7, r3
 800080a:	2201      	movs	r2, #1
 800080c:	701a      	strb	r2, [r3, #0]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 800080e:	23a0      	movs	r3, #160	@ 0xa0
 8000810:	05db      	lsls	r3, r3, #23
 8000812:	2120      	movs	r1, #32
 8000814:	0018      	movs	r0, r3
 8000816:	f000 fd00 	bl	800121a <HAL_GPIO_TogglePin>
	uart_status = HAL_UART_Transmit(&huart2, test_msg, sizeof(test_msg), 200);
 800081a:	2327      	movs	r3, #39	@ 0x27
 800081c:	18fc      	adds	r4, r7, r3
 800081e:	1d39      	adds	r1, r7, #4
 8000820:	4806      	ldr	r0, [pc, #24]	@ (800083c <main+0x6c>)
 8000822:	23c8      	movs	r3, #200	@ 0xc8
 8000824:	2220      	movs	r2, #32
 8000826:	f002 fb49 	bl	8002ebc <HAL_UART_Transmit>
 800082a:	0003      	movs	r3, r0
 800082c:	7023      	strb	r3, [r4, #0]
	HAL_Delay(250);
 800082e:	20fa      	movs	r0, #250	@ 0xfa
 8000830:	f000 fa94 	bl	8000d5c <HAL_Delay>
	HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8000834:	46c0      	nop			@ (mov r8, r8)
 8000836:	e7ea      	b.n	800080e <main+0x3e>
 8000838:	08003a84 	.word	0x08003a84
 800083c:	2000008c 	.word	0x2000008c

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b097      	sub	sp, #92	@ 0x5c
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	2410      	movs	r4, #16
 8000848:	193b      	adds	r3, r7, r4
 800084a:	0018      	movs	r0, r3
 800084c:	2348      	movs	r3, #72	@ 0x48
 800084e:	001a      	movs	r2, r3
 8000850:	2100      	movs	r1, #0
 8000852:	f003 f8df 	bl	8003a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000856:	003b      	movs	r3, r7
 8000858:	0018      	movs	r0, r3
 800085a:	2310      	movs	r3, #16
 800085c:	001a      	movs	r2, r3
 800085e:	2100      	movs	r1, #0
 8000860:	f003 f8d8 	bl	8003a14 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000864:	2380      	movs	r3, #128	@ 0x80
 8000866:	00db      	lsls	r3, r3, #3
 8000868:	0018      	movs	r0, r3
 800086a:	f000 fcf1 	bl	8001250 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800086e:	193b      	adds	r3, r7, r4
 8000870:	2202      	movs	r2, #2
 8000872:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000874:	193b      	adds	r3, r7, r4
 8000876:	2280      	movs	r2, #128	@ 0x80
 8000878:	0052      	lsls	r2, r2, #1
 800087a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087c:	193b      	adds	r3, r7, r4
 800087e:	2240      	movs	r2, #64	@ 0x40
 8000880:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000882:	193b      	adds	r3, r7, r4
 8000884:	2200      	movs	r2, #0
 8000886:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000888:	193b      	adds	r3, r7, r4
 800088a:	0018      	movs	r0, r3
 800088c:	f000 fd4c 	bl	8001328 <HAL_RCC_OscConfig>
 8000890:	1e03      	subs	r3, r0, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000894:	f000 f819 	bl	80008ca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000898:	003b      	movs	r3, r7
 800089a:	2207      	movs	r2, #7
 800089c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800089e:	003b      	movs	r3, r7
 80008a0:	2201      	movs	r2, #1
 80008a2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a4:	003b      	movs	r3, r7
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008aa:	003b      	movs	r3, r7
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008b0:	003b      	movs	r3, r7
 80008b2:	2101      	movs	r1, #1
 80008b4:	0018      	movs	r0, r3
 80008b6:	f001 f91d 	bl	8001af4 <HAL_RCC_ClockConfig>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80008be:	f000 f804 	bl	80008ca <Error_Handler>
  }
}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b017      	add	sp, #92	@ 0x5c
 80008c8:	bd90      	pop	{r4, r7, pc}

080008ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ce:	b672      	cpsid	i
}
 80008d0:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	e7fd      	b.n	80008d2 <Error_Handler+0x8>
	...

080008d8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80008dc:	4b1b      	ldr	r3, [pc, #108]	@ (800094c <MX_SPI1_Init+0x74>)
 80008de:	4a1c      	ldr	r2, [pc, #112]	@ (8000950 <MX_SPI1_Init+0x78>)
 80008e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008e2:	4b1a      	ldr	r3, [pc, #104]	@ (800094c <MX_SPI1_Init+0x74>)
 80008e4:	2282      	movs	r2, #130	@ 0x82
 80008e6:	0052      	lsls	r2, r2, #1
 80008e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ea:	4b18      	ldr	r3, [pc, #96]	@ (800094c <MX_SPI1_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008f0:	4b16      	ldr	r3, [pc, #88]	@ (800094c <MX_SPI1_Init+0x74>)
 80008f2:	22c0      	movs	r2, #192	@ 0xc0
 80008f4:	0092      	lsls	r2, r2, #2
 80008f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f8:	4b14      	ldr	r3, [pc, #80]	@ (800094c <MX_SPI1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008fe:	4b13      	ldr	r3, [pc, #76]	@ (800094c <MX_SPI1_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000904:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MX_SPI1_Init+0x74>)
 8000906:	2280      	movs	r2, #128	@ 0x80
 8000908:	0092      	lsls	r2, r2, #2
 800090a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800090c:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <MX_SPI1_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <MX_SPI1_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <MX_SPI1_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <MX_SPI1_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000924:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_SPI1_Init+0x74>)
 8000926:	2207      	movs	r2, #7
 8000928:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <MX_SPI1_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_SPI1_Init+0x74>)
 8000932:	2208      	movs	r2, #8
 8000934:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000936:	4b05      	ldr	r3, [pc, #20]	@ (800094c <MX_SPI1_Init+0x74>)
 8000938:	0018      	movs	r0, r3
 800093a:	f002 f9bb 	bl	8002cb4 <HAL_SPI_Init>
 800093e:	1e03      	subs	r3, r0, #0
 8000940:	d001      	beq.n	8000946 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000942:	f7ff ffc2 	bl	80008ca <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000028 	.word	0x20000028
 8000950:	40013000 	.word	0x40013000

08000954 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b08b      	sub	sp, #44	@ 0x2c
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	2414      	movs	r4, #20
 800095e:	193b      	adds	r3, r7, r4
 8000960:	0018      	movs	r0, r3
 8000962:	2314      	movs	r3, #20
 8000964:	001a      	movs	r2, r3
 8000966:	2100      	movs	r1, #0
 8000968:	f003 f854 	bl	8003a14 <memset>
  if(spiHandle->Instance==SPI1)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a1b      	ldr	r2, [pc, #108]	@ (80009e0 <HAL_SPI_MspInit+0x8c>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d130      	bne.n	80009d8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000976:	4b1b      	ldr	r3, [pc, #108]	@ (80009e4 <HAL_SPI_MspInit+0x90>)
 8000978:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800097a:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <HAL_SPI_MspInit+0x90>)
 800097c:	2180      	movs	r1, #128	@ 0x80
 800097e:	0149      	lsls	r1, r1, #5
 8000980:	430a      	orrs	r2, r1
 8000982:	661a      	str	r2, [r3, #96]	@ 0x60
 8000984:	4b17      	ldr	r3, [pc, #92]	@ (80009e4 <HAL_SPI_MspInit+0x90>)
 8000986:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000988:	2380      	movs	r3, #128	@ 0x80
 800098a:	015b      	lsls	r3, r3, #5
 800098c:	4013      	ands	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b14      	ldr	r3, [pc, #80]	@ (80009e4 <HAL_SPI_MspInit+0x90>)
 8000994:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000996:	4b13      	ldr	r3, [pc, #76]	@ (80009e4 <HAL_SPI_MspInit+0x90>)
 8000998:	2101      	movs	r1, #1
 800099a:	430a      	orrs	r2, r1
 800099c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800099e:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <HAL_SPI_MspInit+0x90>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a2:	2201      	movs	r2, #1
 80009a4:	4013      	ands	r3, r2
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80009aa:	0021      	movs	r1, r4
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	22c2      	movs	r2, #194	@ 0xc2
 80009b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2202      	movs	r2, #2
 80009b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2205      	movs	r2, #5
 80009c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	187a      	adds	r2, r7, r1
 80009cc:	23a0      	movs	r3, #160	@ 0xa0
 80009ce:	05db      	lsls	r3, r3, #23
 80009d0:	0011      	movs	r1, r2
 80009d2:	0018      	movs	r0, r3
 80009d4:	f000 fa98 	bl	8000f08 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80009d8:	46c0      	nop			@ (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	b00b      	add	sp, #44	@ 0x2c
 80009de:	bd90      	pop	{r4, r7, pc}
 80009e0:	40013000 	.word	0x40013000
 80009e4:	40021000 	.word	0x40021000

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <HAL_MspInit+0x44>)
 80009f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <HAL_MspInit+0x44>)
 80009f4:	2180      	movs	r1, #128	@ 0x80
 80009f6:	0549      	lsls	r1, r1, #21
 80009f8:	430a      	orrs	r2, r1
 80009fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80009fc:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <HAL_MspInit+0x44>)
 80009fe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a00:	2380      	movs	r3, #128	@ 0x80
 8000a02:	055b      	lsls	r3, r3, #21
 8000a04:	4013      	ands	r3, r2
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <HAL_MspInit+0x44>)
 8000a0c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000a0e:	4b07      	ldr	r3, [pc, #28]	@ (8000a2c <HAL_MspInit+0x44>)
 8000a10:	2101      	movs	r1, #1
 8000a12:	430a      	orrs	r2, r1
 8000a14:	661a      	str	r2, [r3, #96]	@ 0x60
 8000a16:	4b05      	ldr	r3, [pc, #20]	@ (8000a2c <HAL_MspInit+0x44>)
 8000a18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b002      	add	sp, #8
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			@ (mov r8, r8)
 8000a2c:	40021000 	.word	0x40021000

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a34:	46c0      	nop			@ (mov r8, r8)
 8000a36:	e7fd      	b.n	8000a34 <NMI_Handler+0x4>

08000a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3c:	46c0      	nop			@ (mov r8, r8)
 8000a3e:	e7fd      	b.n	8000a3c <HardFault_Handler+0x4>

08000a40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a44:	46c0      	nop			@ (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 f966 	bl	8000d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	46c0      	nop			@ (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a68:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <SystemInit+0x4c>)
 8000a6a:	2280      	movs	r2, #128	@ 0x80
 8000a6c:	0512      	lsls	r2, r2, #20
 8000a6e:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  if (((FLASH->SECR & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)           \
 8000a70:	4a10      	ldr	r2, [pc, #64]	@ (8000ab4 <SystemInit+0x50>)
 8000a72:	2380      	movs	r3, #128	@ 0x80
 8000a74:	58d2      	ldr	r2, [r2, r3]
 8000a76:	2380      	movs	r3, #128	@ 0x80
 8000a78:	025b      	lsls	r3, r3, #9
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	2380      	movs	r3, #128	@ 0x80
 8000a7e:	025b      	lsls	r3, r3, #9
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d112      	bne.n	8000aaa <SystemInit+0x46>
      && (((FLASH->OPTR & FLASH_OPTR_RDP) != 0xCCU)                            \
 8000a84:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <SystemInit+0x50>)
 8000a86:	6a1b      	ldr	r3, [r3, #32]
 8000a88:	22ff      	movs	r2, #255	@ 0xff
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	2bcc      	cmp	r3, #204	@ 0xcc
 8000a8e:	d00c      	beq.n	8000aaa <SystemInit+0x46>
          && ((FLASH->OPTR & FLASH_OPTR_RDP) != 0xAAU)))
 8000a90:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <SystemInit+0x50>)
 8000a92:	6a1b      	ldr	r3, [r3, #32]
 8000a94:	22ff      	movs	r2, #255	@ 0xff
 8000a96:	4013      	ands	r3, r2
 8000a98:	2baa      	cmp	r3, #170	@ 0xaa
 8000a9a:	d006      	beq.n	8000aaa <SystemInit+0x46>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 8000a9c:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <SystemInit+0x50>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b04      	ldr	r3, [pc, #16]	@ (8000ab4 <SystemInit+0x50>)
 8000aa2:	2180      	movs	r1, #128	@ 0x80
 8000aa4:	02c9      	lsls	r1, r1, #11
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	e000ed00 	.word	0xe000ed00
 8000ab4:	40022000 	.word	0x40022000

08000ab8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000abc:	4b23      	ldr	r3, [pc, #140]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000abe:	4a24      	ldr	r2, [pc, #144]	@ (8000b50 <MX_USART2_UART_Init+0x98>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ac2:	4b22      	ldr	r3, [pc, #136]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000ac4:	22e1      	movs	r2, #225	@ 0xe1
 8000ac6:	0252      	lsls	r2, r2, #9
 8000ac8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b20      	ldr	r3, [pc, #128]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b18      	ldr	r3, [pc, #96]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aee:	4b17      	ldr	r3, [pc, #92]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000af4:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000afa:	4b14      	ldr	r3, [pc, #80]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b00:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000b02:	0018      	movs	r0, r3
 8000b04:	f002 f984 	bl	8002e10 <HAL_UART_Init>
 8000b08:	1e03      	subs	r3, r0, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b0c:	f7ff fedd 	bl	80008ca <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b10:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000b12:	2100      	movs	r1, #0
 8000b14:	0018      	movs	r0, r3
 8000b16:	f002 fe9d 	bl	8003854 <HAL_UARTEx_SetTxFifoThreshold>
 8000b1a:	1e03      	subs	r3, r0, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b1e:	f7ff fed4 	bl	80008ca <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b22:	4b0a      	ldr	r3, [pc, #40]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000b24:	2100      	movs	r1, #0
 8000b26:	0018      	movs	r0, r3
 8000b28:	f002 fed4 	bl	80038d4 <HAL_UARTEx_SetRxFifoThreshold>
 8000b2c:	1e03      	subs	r3, r0, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b30:	f7ff fecb 	bl	80008ca <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b34:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <MX_USART2_UART_Init+0x94>)
 8000b36:	0018      	movs	r0, r3
 8000b38:	f002 fe52 	bl	80037e0 <HAL_UARTEx_DisableFifoMode>
 8000b3c:	1e03      	subs	r3, r0, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b40:	f7ff fec3 	bl	80008ca <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b44:	46c0      	nop			@ (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	2000008c 	.word	0x2000008c
 8000b50:	40004400 	.word	0x40004400

08000b54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b099      	sub	sp, #100	@ 0x64
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	234c      	movs	r3, #76	@ 0x4c
 8000b5e:	18fb      	adds	r3, r7, r3
 8000b60:	0018      	movs	r0, r3
 8000b62:	2314      	movs	r3, #20
 8000b64:	001a      	movs	r2, r3
 8000b66:	2100      	movs	r1, #0
 8000b68:	f002 ff54 	bl	8003a14 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b6c:	2414      	movs	r4, #20
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	0018      	movs	r0, r3
 8000b72:	2338      	movs	r3, #56	@ 0x38
 8000b74:	001a      	movs	r2, r3
 8000b76:	2100      	movs	r1, #0
 8000b78:	f002 ff4c 	bl	8003a14 <memset>
  if(uartHandle->Instance==USART2)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a22      	ldr	r2, [pc, #136]	@ (8000c0c <HAL_UART_MspInit+0xb8>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d13e      	bne.n	8000c04 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	2202      	movs	r2, #2
 8000b8a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	0018      	movs	r0, r3
 8000b96:	f001 f9c3 	bl	8001f20 <HAL_RCCEx_PeriphCLKConfig>
 8000b9a:	1e03      	subs	r3, r0, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b9e:	f7ff fe94 	bl	80008ca <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c10 <HAL_UART_MspInit+0xbc>)
 8000ba4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c10 <HAL_UART_MspInit+0xbc>)
 8000ba8:	2180      	movs	r1, #128	@ 0x80
 8000baa:	0289      	lsls	r1, r1, #10
 8000bac:	430a      	orrs	r2, r1
 8000bae:	659a      	str	r2, [r3, #88]	@ 0x58
 8000bb0:	4b17      	ldr	r3, [pc, #92]	@ (8000c10 <HAL_UART_MspInit+0xbc>)
 8000bb2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000bb4:	2380      	movs	r3, #128	@ 0x80
 8000bb6:	029b      	lsls	r3, r3, #10
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <HAL_UART_MspInit+0xbc>)
 8000bc0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000bc2:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <HAL_UART_MspInit+0xbc>)
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000bca:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <HAL_UART_MspInit+0xbc>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bce:	2201      	movs	r2, #1
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000bd6:	214c      	movs	r1, #76	@ 0x4c
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	220c      	movs	r2, #12
 8000bdc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	2202      	movs	r2, #2
 8000be2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2207      	movs	r2, #7
 8000bf4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	187a      	adds	r2, r7, r1
 8000bf8:	23a0      	movs	r3, #160	@ 0xa0
 8000bfa:	05db      	lsls	r3, r3, #23
 8000bfc:	0011      	movs	r1, r2
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f000 f982 	bl	8000f08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c04:	46c0      	nop			@ (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b019      	add	sp, #100	@ 0x64
 8000c0a:	bd90      	pop	{r4, r7, pc}
 8000c0c:	40004400 	.word	0x40004400
 8000c10:	40021000 	.word	0x40021000

08000c14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c14:	480d      	ldr	r0, [pc, #52]	@ (8000c4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c16:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c18:	f7ff ff24 	bl	8000a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c1c:	480c      	ldr	r0, [pc, #48]	@ (8000c50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c1e:	490d      	ldr	r1, [pc, #52]	@ (8000c54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c20:	4a0d      	ldr	r2, [pc, #52]	@ (8000c58 <LoopForever+0xe>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c24:	e002      	b.n	8000c2c <LoopCopyDataInit>

08000c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2a:	3304      	adds	r3, #4

08000c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c30:	d3f9      	bcc.n	8000c26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c32:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c34:	4c0a      	ldr	r4, [pc, #40]	@ (8000c60 <LoopForever+0x16>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c38:	e001      	b.n	8000c3e <LoopFillZerobss>

08000c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c3c:	3204      	adds	r2, #4

08000c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c40:	d3fb      	bcc.n	8000c3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c42:	f002 feef 	bl	8003a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c46:	f7ff fdc3 	bl	80007d0 <main>

08000c4a <LoopForever>:

LoopForever:
  b LoopForever
 8000c4a:	e7fe      	b.n	8000c4a <LoopForever>
  ldr   r0, =_estack
 8000c4c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c54:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c58:	08003ba8 	.word	0x08003ba8
  ldr r2, =_sbss
 8000c5c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c60:	20000124 	.word	0x20000124

08000c64 <ADC_COMP1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c64:	e7fe      	b.n	8000c64 <ADC_COMP1_IRQHandler>

08000c66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c6c:	1dfb      	adds	r3, r7, #7
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c72:	2003      	movs	r0, #3
 8000c74:	f000 f80e 	bl	8000c94 <HAL_InitTick>
 8000c78:	1e03      	subs	r3, r0, #0
 8000c7a:	d003      	beq.n	8000c84 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000c7c:	1dfb      	adds	r3, r7, #7
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]
 8000c82:	e001      	b.n	8000c88 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c84:	f7ff feb0 	bl	80009e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c88:	1dfb      	adds	r3, r7, #7
 8000c8a:	781b      	ldrb	r3, [r3, #0]
}
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b002      	add	sp, #8
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c94:	b590      	push	{r4, r7, lr}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c9c:	230f      	movs	r3, #15
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d1c <HAL_InitTick+0x88>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d02b      	beq.n	8000d04 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cac:	4b1c      	ldr	r3, [pc, #112]	@ (8000d20 <HAL_InitTick+0x8c>)
 8000cae:	681c      	ldr	r4, [r3, #0]
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <HAL_InitTick+0x88>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	23fa      	movs	r3, #250	@ 0xfa
 8000cb8:	0098      	lsls	r0, r3, #2
 8000cba:	f7ff fa25 	bl	8000108 <__udivsi3>
 8000cbe:	0003      	movs	r3, r0
 8000cc0:	0019      	movs	r1, r3
 8000cc2:	0020      	movs	r0, r4
 8000cc4:	f7ff fa20 	bl	8000108 <__udivsi3>
 8000cc8:	0003      	movs	r3, r0
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f000 f90f 	bl	8000eee <HAL_SYSTICK_Config>
 8000cd0:	1e03      	subs	r3, r0, #0
 8000cd2:	d112      	bne.n	8000cfa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b03      	cmp	r3, #3
 8000cd8:	d80a      	bhi.n	8000cf0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	2301      	movs	r3, #1
 8000cde:	425b      	negs	r3, r3
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f000 f8ee 	bl	8000ec4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <HAL_InitTick+0x90>)
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	e00d      	b.n	8000d0c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	701a      	strb	r2, [r3, #0]
 8000cf8:	e008      	b.n	8000d0c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cfa:	230f      	movs	r3, #15
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	e003      	b.n	8000d0c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d04:	230f      	movs	r3, #15
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	2201      	movs	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	18fb      	adds	r3, r7, r3
 8000d10:	781b      	ldrb	r3, [r3, #0]
}
 8000d12:	0018      	movs	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b005      	add	sp, #20
 8000d18:	bd90      	pop	{r4, r7, pc}
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000000 	.word	0x20000000
 8000d24:	20000004 	.word	0x20000004

08000d28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d2c:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <HAL_IncTick+0x18>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b04      	ldr	r3, [pc, #16]	@ (8000d44 <HAL_IncTick+0x1c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	18d2      	adds	r2, r2, r3
 8000d36:	4b02      	ldr	r3, [pc, #8]	@ (8000d40 <HAL_IncTick+0x18>)
 8000d38:	601a      	str	r2, [r3, #0]
}
 8000d3a:	46c0      	nop			@ (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000120 	.word	0x20000120
 8000d44:	20000008 	.word	0x20000008

08000d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d4c:	4b02      	ldr	r3, [pc, #8]	@ (8000d58 <HAL_GetTick+0x10>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
}
 8000d50:	0018      	movs	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	46c0      	nop			@ (mov r8, r8)
 8000d58:	20000120 	.word	0x20000120

08000d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d64:	f7ff fff0 	bl	8000d48 <HAL_GetTick>
 8000d68:	0003      	movs	r3, r0
 8000d6a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	3301      	adds	r3, #1
 8000d74:	d004      	beq.n	8000d80 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d76:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <HAL_Delay+0x40>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	18d3      	adds	r3, r2, r3
 8000d7e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d80:	46c0      	nop			@ (mov r8, r8)
 8000d82:	f7ff ffe1 	bl	8000d48 <HAL_GetTick>
 8000d86:	0002      	movs	r2, r0
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	68fa      	ldr	r2, [r7, #12]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d8f7      	bhi.n	8000d82 <HAL_Delay+0x26>
  {
  }
}
 8000d92:	46c0      	nop			@ (mov r8, r8)
 8000d94:	46c0      	nop			@ (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b004      	add	sp, #16
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000008 	.word	0x20000008

08000da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	0002      	movs	r2, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000db4:	d828      	bhi.n	8000e08 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db6:	4a2f      	ldr	r2, [pc, #188]	@ (8000e74 <__NVIC_SetPriority+0xd4>)
 8000db8:	1dfb      	adds	r3, r7, #7
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	33c0      	adds	r3, #192	@ 0xc0
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	589b      	ldr	r3, [r3, r2]
 8000dc6:	1dfa      	adds	r2, r7, #7
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	0011      	movs	r1, r2
 8000dcc:	2203      	movs	r2, #3
 8000dce:	400a      	ands	r2, r1
 8000dd0:	00d2      	lsls	r2, r2, #3
 8000dd2:	21ff      	movs	r1, #255	@ 0xff
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	000a      	movs	r2, r1
 8000dd8:	43d2      	mvns	r2, r2
 8000dda:	401a      	ands	r2, r3
 8000ddc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	019b      	lsls	r3, r3, #6
 8000de2:	22ff      	movs	r2, #255	@ 0xff
 8000de4:	401a      	ands	r2, r3
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	0018      	movs	r0, r3
 8000dec:	2303      	movs	r3, #3
 8000dee:	4003      	ands	r3, r0
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df4:	481f      	ldr	r0, [pc, #124]	@ (8000e74 <__NVIC_SetPriority+0xd4>)
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	b25b      	sxtb	r3, r3
 8000dfc:	089b      	lsrs	r3, r3, #2
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	33c0      	adds	r3, #192	@ 0xc0
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e06:	e031      	b.n	8000e6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e08:	4a1b      	ldr	r2, [pc, #108]	@ (8000e78 <__NVIC_SetPriority+0xd8>)
 8000e0a:	1dfb      	adds	r3, r7, #7
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	0019      	movs	r1, r3
 8000e10:	230f      	movs	r3, #15
 8000e12:	400b      	ands	r3, r1
 8000e14:	3b08      	subs	r3, #8
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	3306      	adds	r3, #6
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	18d3      	adds	r3, r2, r3
 8000e1e:	3304      	adds	r3, #4
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	1dfa      	adds	r2, r7, #7
 8000e24:	7812      	ldrb	r2, [r2, #0]
 8000e26:	0011      	movs	r1, r2
 8000e28:	2203      	movs	r2, #3
 8000e2a:	400a      	ands	r2, r1
 8000e2c:	00d2      	lsls	r2, r2, #3
 8000e2e:	21ff      	movs	r1, #255	@ 0xff
 8000e30:	4091      	lsls	r1, r2
 8000e32:	000a      	movs	r2, r1
 8000e34:	43d2      	mvns	r2, r2
 8000e36:	401a      	ands	r2, r3
 8000e38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	019b      	lsls	r3, r3, #6
 8000e3e:	22ff      	movs	r2, #255	@ 0xff
 8000e40:	401a      	ands	r2, r3
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	0018      	movs	r0, r3
 8000e48:	2303      	movs	r3, #3
 8000e4a:	4003      	ands	r3, r0
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e50:	4809      	ldr	r0, [pc, #36]	@ (8000e78 <__NVIC_SetPriority+0xd8>)
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	001c      	movs	r4, r3
 8000e58:	230f      	movs	r3, #15
 8000e5a:	4023      	ands	r3, r4
 8000e5c:	3b08      	subs	r3, #8
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	430a      	orrs	r2, r1
 8000e62:	3306      	adds	r3, #6
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	18c3      	adds	r3, r0, r3
 8000e68:	3304      	adds	r3, #4
 8000e6a:	601a      	str	r2, [r3, #0]
}
 8000e6c:	46c0      	nop			@ (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b003      	add	sp, #12
 8000e72:	bd90      	pop	{r4, r7, pc}
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	1e5a      	subs	r2, r3, #1
 8000e88:	2380      	movs	r3, #128	@ 0x80
 8000e8a:	045b      	lsls	r3, r3, #17
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d301      	bcc.n	8000e94 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e90:	2301      	movs	r3, #1
 8000e92:	e010      	b.n	8000eb6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <SysTick_Config+0x44>)
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	3a01      	subs	r2, #1
 8000e9a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	425b      	negs	r3, r3
 8000ea0:	2103      	movs	r1, #3
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f7ff ff7c 	bl	8000da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea8:	4b05      	ldr	r3, [pc, #20]	@ (8000ec0 <SysTick_Config+0x44>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eae:	4b04      	ldr	r3, [pc, #16]	@ (8000ec0 <SysTick_Config+0x44>)
 8000eb0:	2207      	movs	r2, #7
 8000eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b002      	add	sp, #8
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	e000e010 	.word	0xe000e010

08000ec4 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	210f      	movs	r1, #15
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	1c02      	adds	r2, r0, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	0011      	movs	r1, r2
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f7ff ff5d 	bl	8000da0 <__NVIC_SetPriority>
}
 8000ee6:	46c0      	nop			@ (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b004      	add	sp, #16
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f7ff ffbf 	bl	8000e7c <SysTick_Config>
 8000efe:	0003      	movs	r3, r0
}
 8000f00:	0018      	movs	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b002      	add	sp, #8
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f16:	e14d      	b.n	80011b4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	4091      	lsls	r1, r2
 8000f22:	000a      	movs	r2, r1
 8000f24:	4013      	ands	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d100      	bne.n	8000f30 <HAL_GPIO_Init+0x28>
 8000f2e:	e13e      	b.n	80011ae <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2203      	movs	r2, #3
 8000f36:	4013      	ands	r3, r2
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d005      	beq.n	8000f48 <HAL_GPIO_Init+0x40>
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2203      	movs	r2, #3
 8000f42:	4013      	ands	r3, r2
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d130      	bne.n	8000faa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	2203      	movs	r2, #3
 8000f54:	409a      	lsls	r2, r3
 8000f56:	0013      	movs	r3, r2
 8000f58:	43da      	mvns	r2, r3
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	409a      	lsls	r2, r3
 8000f6a:	0013      	movs	r3, r2
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f7e:	2201      	movs	r2, #1
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
 8000f84:	0013      	movs	r3, r2
 8000f86:	43da      	mvns	r2, r3
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	091b      	lsrs	r3, r3, #4
 8000f94:	2201      	movs	r2, #1
 8000f96:	401a      	ands	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	409a      	lsls	r2, r3
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2203      	movs	r2, #3
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	2b03      	cmp	r3, #3
 8000fb4:	d017      	beq.n	8000fe6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	0013      	movs	r3, r2
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2203      	movs	r2, #3
 8000fec:	4013      	ands	r3, r2
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d123      	bne.n	800103a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	08da      	lsrs	r2, r3, #3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3208      	adds	r2, #8
 8000ffa:	0092      	lsls	r2, r2, #2
 8000ffc:	58d3      	ldr	r3, [r2, r3]
 8000ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	2207      	movs	r2, #7
 8001004:	4013      	ands	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	220f      	movs	r2, #15
 800100a:	409a      	lsls	r2, r3
 800100c:	0013      	movs	r3, r2
 800100e:	43da      	mvns	r2, r3
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	691a      	ldr	r2, [r3, #16]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	2107      	movs	r1, #7
 800101e:	400b      	ands	r3, r1
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	409a      	lsls	r2, r3
 8001024:	0013      	movs	r3, r2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	08da      	lsrs	r2, r3, #3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3208      	adds	r2, #8
 8001034:	0092      	lsls	r2, r2, #2
 8001036:	6939      	ldr	r1, [r7, #16]
 8001038:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	2203      	movs	r2, #3
 8001046:	409a      	lsls	r2, r3
 8001048:	0013      	movs	r3, r2
 800104a:	43da      	mvns	r2, r3
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2203      	movs	r2, #3
 8001058:	401a      	ands	r2, r3
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	409a      	lsls	r2, r3
 8001060:	0013      	movs	r3, r2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	23c0      	movs	r3, #192	@ 0xc0
 8001074:	029b      	lsls	r3, r3, #10
 8001076:	4013      	ands	r3, r2
 8001078:	d100      	bne.n	800107c <HAL_GPIO_Init+0x174>
 800107a:	e098      	b.n	80011ae <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800107c:	4a53      	ldr	r2, [pc, #332]	@ (80011cc <HAL_GPIO_Init+0x2c4>)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	3318      	adds	r3, #24
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	589b      	ldr	r3, [r3, r2]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	2203      	movs	r2, #3
 800108e:	4013      	ands	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	220f      	movs	r2, #15
 8001094:	409a      	lsls	r2, r3
 8001096:	0013      	movs	r3, r2
 8001098:	43da      	mvns	r2, r3
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	23a0      	movs	r3, #160	@ 0xa0
 80010a4:	05db      	lsls	r3, r3, #23
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d019      	beq.n	80010de <HAL_GPIO_Init+0x1d6>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a48      	ldr	r2, [pc, #288]	@ (80011d0 <HAL_GPIO_Init+0x2c8>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d013      	beq.n	80010da <HAL_GPIO_Init+0x1d2>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a47      	ldr	r2, [pc, #284]	@ (80011d4 <HAL_GPIO_Init+0x2cc>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d00d      	beq.n	80010d6 <HAL_GPIO_Init+0x1ce>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a46      	ldr	r2, [pc, #280]	@ (80011d8 <HAL_GPIO_Init+0x2d0>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d007      	beq.n	80010d2 <HAL_GPIO_Init+0x1ca>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a45      	ldr	r2, [pc, #276]	@ (80011dc <HAL_GPIO_Init+0x2d4>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d101      	bne.n	80010ce <HAL_GPIO_Init+0x1c6>
 80010ca:	2305      	movs	r3, #5
 80010cc:	e008      	b.n	80010e0 <HAL_GPIO_Init+0x1d8>
 80010ce:	2306      	movs	r3, #6
 80010d0:	e006      	b.n	80010e0 <HAL_GPIO_Init+0x1d8>
 80010d2:	2303      	movs	r3, #3
 80010d4:	e004      	b.n	80010e0 <HAL_GPIO_Init+0x1d8>
 80010d6:	2302      	movs	r3, #2
 80010d8:	e002      	b.n	80010e0 <HAL_GPIO_Init+0x1d8>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <HAL_GPIO_Init+0x1d8>
 80010de:	2300      	movs	r3, #0
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	2103      	movs	r1, #3
 80010e4:	400a      	ands	r2, r1
 80010e6:	00d2      	lsls	r2, r2, #3
 80010e8:	4093      	lsls	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80010f0:	4936      	ldr	r1, [pc, #216]	@ (80011cc <HAL_GPIO_Init+0x2c4>)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	089b      	lsrs	r3, r3, #2
 80010f6:	3318      	adds	r3, #24
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010fe:	4b33      	ldr	r3, [pc, #204]	@ (80011cc <HAL_GPIO_Init+0x2c4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	43da      	mvns	r2, r3
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	2380      	movs	r3, #128	@ 0x80
 8001114:	035b      	lsls	r3, r3, #13
 8001116:	4013      	ands	r3, r2
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001122:	4b2a      	ldr	r3, [pc, #168]	@ (80011cc <HAL_GPIO_Init+0x2c4>)
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001128:	4b28      	ldr	r3, [pc, #160]	@ (80011cc <HAL_GPIO_Init+0x2c4>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	43da      	mvns	r2, r3
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	2380      	movs	r3, #128	@ 0x80
 800113e:	039b      	lsls	r3, r3, #14
 8001140:	4013      	ands	r3, r2
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800114c:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <HAL_GPIO_Init+0x2c4>)
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001152:	4a1e      	ldr	r2, [pc, #120]	@ (80011cc <HAL_GPIO_Init+0x2c4>)
 8001154:	2384      	movs	r3, #132	@ 0x84
 8001156:	58d3      	ldr	r3, [r2, r3]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43da      	mvns	r2, r3
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	2380      	movs	r3, #128	@ 0x80
 800116a:	029b      	lsls	r3, r3, #10
 800116c:	4013      	ands	r3, r2
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001178:	4914      	ldr	r1, [pc, #80]	@ (80011cc <HAL_GPIO_Init+0x2c4>)
 800117a:	2284      	movs	r2, #132	@ 0x84
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001180:	4a12      	ldr	r2, [pc, #72]	@ (80011cc <HAL_GPIO_Init+0x2c4>)
 8001182:	2380      	movs	r3, #128	@ 0x80
 8001184:	58d3      	ldr	r3, [r2, r3]
 8001186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	43da      	mvns	r2, r3
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	2380      	movs	r3, #128	@ 0x80
 8001198:	025b      	lsls	r3, r3, #9
 800119a:	4013      	ands	r3, r2
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011a6:	4909      	ldr	r1, [pc, #36]	@ (80011cc <HAL_GPIO_Init+0x2c4>)
 80011a8:	2280      	movs	r2, #128	@ 0x80
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	3301      	adds	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	40da      	lsrs	r2, r3
 80011bc:	1e13      	subs	r3, r2, #0
 80011be:	d000      	beq.n	80011c2 <HAL_GPIO_Init+0x2ba>
 80011c0:	e6aa      	b.n	8000f18 <HAL_GPIO_Init+0x10>
  }
}
 80011c2:	46c0      	nop			@ (mov r8, r8)
 80011c4:	46c0      	nop			@ (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b006      	add	sp, #24
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40021800 	.word	0x40021800
 80011d0:	50000400 	.word	0x50000400
 80011d4:	50000800 	.word	0x50000800
 80011d8:	50000c00 	.word	0x50000c00
 80011dc:	50001400 	.word	0x50001400

080011e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	0008      	movs	r0, r1
 80011ea:	0011      	movs	r1, r2
 80011ec:	1cbb      	adds	r3, r7, #2
 80011ee:	1c02      	adds	r2, r0, #0
 80011f0:	801a      	strh	r2, [r3, #0]
 80011f2:	1c7b      	adds	r3, r7, #1
 80011f4:	1c0a      	adds	r2, r1, #0
 80011f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011f8:	1c7b      	adds	r3, r7, #1
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d004      	beq.n	800120a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001200:	1cbb      	adds	r3, r7, #2
 8001202:	881a      	ldrh	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001208:	e003      	b.n	8001212 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800120a:	1cbb      	adds	r3, r7, #2
 800120c:	881a      	ldrh	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	46bd      	mov	sp, r7
 8001216:	b002      	add	sp, #8
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	000a      	movs	r2, r1
 8001224:	1cbb      	adds	r3, r7, #2
 8001226:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800122e:	1cbb      	adds	r3, r7, #2
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	4013      	ands	r3, r2
 8001236:	041a      	lsls	r2, r3, #16
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	43db      	mvns	r3, r3
 800123c:	1cb9      	adds	r1, r7, #2
 800123e:	8809      	ldrh	r1, [r1, #0]
 8001240:	400b      	ands	r3, r1
 8001242:	431a      	orrs	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	619a      	str	r2, [r3, #24]
}
 8001248:	46c0      	nop			@ (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	b004      	add	sp, #16
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	2380      	movs	r3, #128	@ 0x80
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	429a      	cmp	r2, r3
 8001260:	d137      	bne.n	80012d2 <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001262:	4b27      	ldr	r3, [pc, #156]	@ (8001300 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	23c0      	movs	r3, #192	@ 0xc0
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	401a      	ands	r2, r3
 800126c:	2380      	movs	r3, #128	@ 0x80
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	429a      	cmp	r2, r3
 8001272:	d040      	beq.n	80012f6 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001274:	4b22      	ldr	r3, [pc, #136]	@ (8001300 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a22      	ldr	r2, [pc, #136]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800127a:	401a      	ands	r2, r3
 800127c:	4b20      	ldr	r3, [pc, #128]	@ (8001300 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800127e:	2180      	movs	r1, #128	@ 0x80
 8001280:	0089      	lsls	r1, r1, #2
 8001282:	430a      	orrs	r2, r1
 8001284:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001286:	4b20      	ldr	r3, [pc, #128]	@ (8001308 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2232      	movs	r2, #50	@ 0x32
 800128c:	4353      	muls	r3, r2
 800128e:	491f      	ldr	r1, [pc, #124]	@ (800130c <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8001290:	0018      	movs	r0, r3
 8001292:	f7fe ff39 	bl	8000108 <__udivsi3>
 8001296:	0003      	movs	r3, r0
 8001298:	3301      	adds	r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800129c:	e002      	b.n	80012a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012a4:	4b16      	ldr	r3, [pc, #88]	@ (8001300 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80012a6:	695a      	ldr	r2, [r3, #20]
 80012a8:	2380      	movs	r3, #128	@ 0x80
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	401a      	ands	r2, r3
 80012ae:	2380      	movs	r3, #128	@ 0x80
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d102      	bne.n	80012bc <HAL_PWREx_ControlVoltageScaling+0x6c>
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1f0      	bne.n	800129e <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012bc:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80012be:	695a      	ldr	r2, [r3, #20]
 80012c0:	2380      	movs	r3, #128	@ 0x80
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	401a      	ands	r2, r3
 80012c6:	2380      	movs	r3, #128	@ 0x80
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d113      	bne.n	80012f6 <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e012      	b.n	80012f8 <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	23c0      	movs	r3, #192	@ 0xc0
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	401a      	ands	r2, r3
 80012dc:	2380      	movs	r3, #128	@ 0x80
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d008      	beq.n	80012f6 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012e4:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a06      	ldr	r2, [pc, #24]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80012ea:	401a      	ands	r2, r3
 80012ec:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80012ee:	2180      	movs	r1, #128	@ 0x80
 80012f0:	00c9      	lsls	r1, r1, #3
 80012f2:	430a      	orrs	r2, r1
 80012f4:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b004      	add	sp, #16
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40007000 	.word	0x40007000
 8001304:	fffff9ff 	.word	0xfffff9ff
 8001308:	20000000 	.word	0x20000000
 800130c:	000f4240 	.word	0x000f4240

08001310 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001314:	4b03      	ldr	r3, [pc, #12]	@ (8001324 <HAL_PWREx_GetVoltageRange+0x14>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	23c0      	movs	r3, #192	@ 0xc0
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	4013      	ands	r3, r2
}
 800131e:	0018      	movs	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40007000 	.word	0x40007000

08001328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001328:	b5b0      	push	{r4, r5, r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001330:	4bc8      	ldr	r3, [pc, #800]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	2238      	movs	r2, #56	@ 0x38
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800133a:	4bc6      	ldr	r3, [pc, #792]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	2203      	movs	r2, #3
 8001340:	4013      	ands	r3, r2
 8001342:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2210      	movs	r2, #16
 800134a:	4013      	ands	r3, r2
 800134c:	d100      	bne.n	8001350 <HAL_RCC_OscConfig+0x28>
 800134e:	e0ee      	b.n	800152e <HAL_RCC_OscConfig+0x206>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d007      	beq.n	8001366 <HAL_RCC_OscConfig+0x3e>
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	2b18      	cmp	r3, #24
 800135a:	d000      	beq.n	800135e <HAL_RCC_OscConfig+0x36>
 800135c:	e093      	b.n	8001486 <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d000      	beq.n	8001366 <HAL_RCC_OscConfig+0x3e>
 8001364:	e08f      	b.n	8001486 <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001366:	4bbb      	ldr	r3, [pc, #748]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2202      	movs	r2, #2
 800136c:	4013      	ands	r3, r2
 800136e:	d006      	beq.n	800137e <HAL_RCC_OscConfig+0x56>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d102      	bne.n	800137e <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	f000 fbae 	bl	8001ada <HAL_RCC_OscConfig+0x7b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001382:	4bb4      	ldr	r3, [pc, #720]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2108      	movs	r1, #8
 8001388:	400b      	ands	r3, r1
 800138a:	d004      	beq.n	8001396 <HAL_RCC_OscConfig+0x6e>
 800138c:	4bb1      	ldr	r3, [pc, #708]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	21f0      	movs	r1, #240	@ 0xf0
 8001392:	400b      	ands	r3, r1
 8001394:	e005      	b.n	80013a2 <HAL_RCC_OscConfig+0x7a>
 8001396:	49af      	ldr	r1, [pc, #700]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001398:	2394      	movs	r3, #148	@ 0x94
 800139a:	58cb      	ldr	r3, [r1, r3]
 800139c:	091b      	lsrs	r3, r3, #4
 800139e:	21f0      	movs	r1, #240	@ 0xf0
 80013a0:	400b      	ands	r3, r1
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d225      	bcs.n	80013f2 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013aa:	0018      	movs	r0, r3
 80013ac:	f000 fd4c 	bl	8001e48 <RCC_SetFlashLatencyFromMSIRange>
 80013b0:	1e03      	subs	r3, r0, #0
 80013b2:	d002      	beq.n	80013ba <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	f000 fb90 	bl	8001ada <HAL_RCC_OscConfig+0x7b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ba:	4ba6      	ldr	r3, [pc, #664]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4ba5      	ldr	r3, [pc, #660]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013c0:	2108      	movs	r1, #8
 80013c2:	430a      	orrs	r2, r1
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	4ba3      	ldr	r3, [pc, #652]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	22f0      	movs	r2, #240	@ 0xf0
 80013cc:	4393      	bics	r3, r2
 80013ce:	0019      	movs	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013d4:	4b9f      	ldr	r3, [pc, #636]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013d6:	430a      	orrs	r2, r1
 80013d8:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013da:	4b9e      	ldr	r3, [pc, #632]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	4a9e      	ldr	r2, [pc, #632]	@ (8001658 <HAL_RCC_OscConfig+0x330>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	0019      	movs	r1, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	021a      	lsls	r2, r3, #8
 80013ea:	4b9a      	ldr	r3, [pc, #616]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013ec:	430a      	orrs	r2, r1
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	e027      	b.n	8001442 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013f2:	4b98      	ldr	r3, [pc, #608]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4b97      	ldr	r3, [pc, #604]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 80013f8:	2108      	movs	r1, #8
 80013fa:	430a      	orrs	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	4b95      	ldr	r3, [pc, #596]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	22f0      	movs	r2, #240	@ 0xf0
 8001404:	4393      	bics	r3, r2
 8001406:	0019      	movs	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800140c:	4b91      	ldr	r3, [pc, #580]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 800140e:	430a      	orrs	r2, r1
 8001410:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001412:	4b90      	ldr	r3, [pc, #576]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	4a90      	ldr	r2, [pc, #576]	@ (8001658 <HAL_RCC_OscConfig+0x330>)
 8001418:	4013      	ands	r3, r2
 800141a:	0019      	movs	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	021a      	lsls	r2, r3, #8
 8001422:	4b8c      	ldr	r3, [pc, #560]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001424:	430a      	orrs	r2, r1
 8001426:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d109      	bne.n	8001442 <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001432:	0018      	movs	r0, r3
 8001434:	f000 fd08 	bl	8001e48 <RCC_SetFlashLatencyFromMSIRange>
 8001438:	1e03      	subs	r3, r0, #0
 800143a:	d002      	beq.n	8001442 <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	f000 fb4c 	bl	8001ada <HAL_RCC_OscConfig+0x7b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001442:	f000 fc43 	bl	8001ccc <HAL_RCC_GetSysClockFreq>
 8001446:	0001      	movs	r1, r0
 8001448:	4b82      	ldr	r3, [pc, #520]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 800144a:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	220f      	movs	r2, #15
 8001450:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001452:	4a82      	ldr	r2, [pc, #520]	@ (800165c <HAL_RCC_OscConfig+0x334>)
 8001454:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001456:	001a      	movs	r2, r3
 8001458:	231f      	movs	r3, #31
 800145a:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800145c:	000a      	movs	r2, r1
 800145e:	40da      	lsrs	r2, r3
 8001460:	4b7f      	ldr	r3, [pc, #508]	@ (8001660 <HAL_RCC_OscConfig+0x338>)
 8001462:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001464:	4b7f      	ldr	r3, [pc, #508]	@ (8001664 <HAL_RCC_OscConfig+0x33c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	250f      	movs	r5, #15
 800146a:	197c      	adds	r4, r7, r5
 800146c:	0018      	movs	r0, r3
 800146e:	f7ff fc11 	bl	8000c94 <HAL_InitTick>
 8001472:	0003      	movs	r3, r0
 8001474:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8001476:	197b      	adds	r3, r7, r5
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d056      	beq.n	800152c <HAL_RCC_OscConfig+0x204>
        {
          return status;
 800147e:	197b      	adds	r3, r7, r5
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	f000 fb2a 	bl	8001ada <HAL_RCC_OscConfig+0x7b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d034      	beq.n	80014f8 <HAL_RCC_OscConfig+0x1d0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800148e:	4b71      	ldr	r3, [pc, #452]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4b70      	ldr	r3, [pc, #448]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001494:	2101      	movs	r1, #1
 8001496:	430a      	orrs	r2, r1
 8001498:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800149a:	f7ff fc55 	bl	8000d48 <HAL_GetTick>
 800149e:	0003      	movs	r3, r0
 80014a0:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 80014a4:	f7ff fc50 	bl	8000d48 <HAL_GetTick>
 80014a8:	0002      	movs	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x18e>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e311      	b.n	8001ada <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014b6:	4b67      	ldr	r3, [pc, #412]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2202      	movs	r2, #2
 80014bc:	4013      	ands	r3, r2
 80014be:	d0f1      	beq.n	80014a4 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c0:	4b64      	ldr	r3, [pc, #400]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b63      	ldr	r3, [pc, #396]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014c6:	2108      	movs	r1, #8
 80014c8:	430a      	orrs	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	4b61      	ldr	r3, [pc, #388]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	22f0      	movs	r2, #240	@ 0xf0
 80014d2:	4393      	bics	r3, r2
 80014d4:	0019      	movs	r1, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014da:	4b5e      	ldr	r3, [pc, #376]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014dc:	430a      	orrs	r2, r1
 80014de:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014e0:	4b5c      	ldr	r3, [pc, #368]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	4a5c      	ldr	r2, [pc, #368]	@ (8001658 <HAL_RCC_OscConfig+0x330>)
 80014e6:	4013      	ands	r3, r2
 80014e8:	0019      	movs	r1, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	021a      	lsls	r2, r3, #8
 80014f0:	4b58      	ldr	r3, [pc, #352]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014f2:	430a      	orrs	r2, r1
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	e01a      	b.n	800152e <HAL_RCC_OscConfig+0x206>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014f8:	4b56      	ldr	r3, [pc, #344]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b55      	ldr	r3, [pc, #340]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 80014fe:	2101      	movs	r1, #1
 8001500:	438a      	bics	r2, r1
 8001502:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001504:	f7ff fc20 	bl	8000d48 <HAL_GetTick>
 8001508:	0003      	movs	r3, r0
 800150a:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 800150e:	f7ff fc1b 	bl	8000d48 <HAL_GetTick>
 8001512:	0002      	movs	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x1f8>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e2dc      	b.n	8001ada <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001520:	4b4c      	ldr	r3, [pc, #304]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2202      	movs	r2, #2
 8001526:	4013      	ands	r3, r2
 8001528:	d1f1      	bne.n	800150e <HAL_RCC_OscConfig+0x1e6>
 800152a:	e000      	b.n	800152e <HAL_RCC_OscConfig+0x206>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800152c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2201      	movs	r2, #1
 8001534:	4013      	ands	r3, r2
 8001536:	d100      	bne.n	800153a <HAL_RCC_OscConfig+0x212>
 8001538:	e065      	b.n	8001606 <HAL_RCC_OscConfig+0x2de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	2b10      	cmp	r3, #16
 800153e:	d005      	beq.n	800154c <HAL_RCC_OscConfig+0x224>
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	2b18      	cmp	r3, #24
 8001544:	d10e      	bne.n	8001564 <HAL_RCC_OscConfig+0x23c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	2b03      	cmp	r3, #3
 800154a:	d10b      	bne.n	8001564 <HAL_RCC_OscConfig+0x23c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154c:	4b41      	ldr	r3, [pc, #260]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	2380      	movs	r3, #128	@ 0x80
 8001552:	029b      	lsls	r3, r3, #10
 8001554:	4013      	ands	r3, r2
 8001556:	d055      	beq.n	8001604 <HAL_RCC_OscConfig+0x2dc>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d151      	bne.n	8001604 <HAL_RCC_OscConfig+0x2dc>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e2ba      	b.n	8001ada <HAL_RCC_OscConfig+0x7b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	2380      	movs	r3, #128	@ 0x80
 800156a:	025b      	lsls	r3, r3, #9
 800156c:	429a      	cmp	r2, r3
 800156e:	d107      	bne.n	8001580 <HAL_RCC_OscConfig+0x258>
 8001570:	4b38      	ldr	r3, [pc, #224]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b37      	ldr	r3, [pc, #220]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001576:	2180      	movs	r1, #128	@ 0x80
 8001578:	0249      	lsls	r1, r1, #9
 800157a:	430a      	orrs	r2, r1
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	e013      	b.n	80015a8 <HAL_RCC_OscConfig+0x280>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	23a0      	movs	r3, #160	@ 0xa0
 8001586:	02db      	lsls	r3, r3, #11
 8001588:	429a      	cmp	r2, r3
 800158a:	d107      	bne.n	800159c <HAL_RCC_OscConfig+0x274>
 800158c:	4b31      	ldr	r3, [pc, #196]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b30      	ldr	r3, [pc, #192]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001592:	21a0      	movs	r1, #160	@ 0xa0
 8001594:	02c9      	lsls	r1, r1, #11
 8001596:	430a      	orrs	r2, r1
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	e005      	b.n	80015a8 <HAL_RCC_OscConfig+0x280>
 800159c:	4b2d      	ldr	r3, [pc, #180]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 80015a2:	4931      	ldr	r1, [pc, #196]	@ (8001668 <HAL_RCC_OscConfig+0x340>)
 80015a4:	400a      	ands	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d014      	beq.n	80015da <HAL_RCC_OscConfig+0x2b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff fbca 	bl	8000d48 <HAL_GetTick>
 80015b4:	0003      	movs	r3, r0
 80015b6:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x2a4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80015ba:	f7ff fbc5 	bl	8000d48 <HAL_GetTick>
 80015be:	0002      	movs	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b64      	cmp	r3, #100	@ 0x64
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x2a4>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e286      	b.n	8001ada <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015cc:	4b21      	ldr	r3, [pc, #132]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	2380      	movs	r3, #128	@ 0x80
 80015d2:	029b      	lsls	r3, r3, #10
 80015d4:	4013      	ands	r3, r2
 80015d6:	d0f0      	beq.n	80015ba <HAL_RCC_OscConfig+0x292>
 80015d8:	e015      	b.n	8001606 <HAL_RCC_OscConfig+0x2de>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015da:	f7ff fbb5 	bl	8000d48 <HAL_GetTick>
 80015de:	0003      	movs	r3, r0
 80015e0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80015e4:	f7ff fbb0 	bl	8000d48 <HAL_GetTick>
 80015e8:	0002      	movs	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b64      	cmp	r3, #100	@ 0x64
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e271      	b.n	8001ada <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015f6:	4b17      	ldr	r3, [pc, #92]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	2380      	movs	r3, #128	@ 0x80
 80015fc:	029b      	lsls	r3, r3, #10
 80015fe:	4013      	ands	r3, r2
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x2bc>
 8001602:	e000      	b.n	8001606 <HAL_RCC_OscConfig+0x2de>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001604:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2202      	movs	r2, #2
 800160c:	4013      	ands	r3, r2
 800160e:	d100      	bne.n	8001612 <HAL_RCC_OscConfig+0x2ea>
 8001610:	e073      	b.n	80016fa <HAL_RCC_OscConfig+0x3d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	2b08      	cmp	r3, #8
 8001616:	d005      	beq.n	8001624 <HAL_RCC_OscConfig+0x2fc>
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	2b18      	cmp	r3, #24
 800161c:	d128      	bne.n	8001670 <HAL_RCC_OscConfig+0x348>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d125      	bne.n	8001670 <HAL_RCC_OscConfig+0x348>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001624:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	2380      	movs	r3, #128	@ 0x80
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4013      	ands	r3, r2
 800162e:	d005      	beq.n	800163c <HAL_RCC_OscConfig+0x314>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e24e      	b.n	8001ada <HAL_RCC_OscConfig+0x7b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163c:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	4a0a      	ldr	r2, [pc, #40]	@ (800166c <HAL_RCC_OscConfig+0x344>)
 8001642:	4013      	ands	r3, r2
 8001644:	0019      	movs	r1, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	061a      	lsls	r2, r3, #24
 800164c:	4b01      	ldr	r3, [pc, #4]	@ (8001654 <HAL_RCC_OscConfig+0x32c>)
 800164e:	430a      	orrs	r2, r1
 8001650:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001652:	e052      	b.n	80016fa <HAL_RCC_OscConfig+0x3d2>
 8001654:	40021000 	.word	0x40021000
 8001658:	ffff00ff 	.word	0xffff00ff
 800165c:	08003aa4 	.word	0x08003aa4
 8001660:	20000000 	.word	0x20000000
 8001664:	20000004 	.word	0x20000004
 8001668:	fffaffff 	.word	0xfffaffff
 800166c:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d026      	beq.n	80016c6 <HAL_RCC_OscConfig+0x39e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001678:	4bc7      	ldr	r3, [pc, #796]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4bc6      	ldr	r3, [pc, #792]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 800167e:	2180      	movs	r1, #128	@ 0x80
 8001680:	0049      	lsls	r1, r1, #1
 8001682:	430a      	orrs	r2, r1
 8001684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001686:	f7ff fb5f 	bl	8000d48 <HAL_GetTick>
 800168a:	0003      	movs	r3, r0
 800168c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x37a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001690:	f7ff fb5a 	bl	8000d48 <HAL_GetTick>
 8001694:	0002      	movs	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x37a>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e21b      	b.n	8001ada <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016a2:	4bbd      	ldr	r3, [pc, #756]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	2380      	movs	r3, #128	@ 0x80
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4013      	ands	r3, r2
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0x368>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ae:	4bba      	ldr	r3, [pc, #744]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4aba      	ldr	r2, [pc, #744]	@ (800199c <HAL_RCC_OscConfig+0x674>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	0019      	movs	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	061a      	lsls	r2, r3, #24
 80016be:	4bb6      	ldr	r3, [pc, #728]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 80016c0:	430a      	orrs	r2, r1
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	e019      	b.n	80016fa <HAL_RCC_OscConfig+0x3d2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016c6:	4bb4      	ldr	r3, [pc, #720]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4bb3      	ldr	r3, [pc, #716]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 80016cc:	49b4      	ldr	r1, [pc, #720]	@ (80019a0 <HAL_RCC_OscConfig+0x678>)
 80016ce:	400a      	ands	r2, r1
 80016d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d2:	f7ff fb39 	bl	8000d48 <HAL_GetTick>
 80016d6:	0003      	movs	r3, r0
 80016d8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x3c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80016dc:	f7ff fb34 	bl	8000d48 <HAL_GetTick>
 80016e0:	0002      	movs	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e1f5      	b.n	8001ada <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016ee:	4baa      	ldr	r3, [pc, #680]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	2380      	movs	r3, #128	@ 0x80
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	4013      	ands	r3, r2
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x3b4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2208      	movs	r2, #8
 8001700:	4013      	ands	r3, r2
 8001702:	d051      	beq.n	80017a8 <HAL_RCC_OscConfig+0x480>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d031      	beq.n	8001770 <HAL_RCC_OscConfig+0x448>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d108      	bne.n	8001726 <HAL_RCC_OscConfig+0x3fe>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8001714:	4aa0      	ldr	r2, [pc, #640]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 8001716:	2394      	movs	r3, #148	@ 0x94
 8001718:	58d3      	ldr	r3, [r2, r3]
 800171a:	499f      	ldr	r1, [pc, #636]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 800171c:	2204      	movs	r2, #4
 800171e:	4393      	bics	r3, r2
 8001720:	2294      	movs	r2, #148	@ 0x94
 8001722:	508b      	str	r3, [r1, r2]
 8001724:	e007      	b.n	8001736 <HAL_RCC_OscConfig+0x40e>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8001726:	4a9c      	ldr	r2, [pc, #624]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 8001728:	2394      	movs	r3, #148	@ 0x94
 800172a:	58d3      	ldr	r3, [r2, r3]
 800172c:	499a      	ldr	r1, [pc, #616]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 800172e:	2204      	movs	r2, #4
 8001730:	4313      	orrs	r3, r2
 8001732:	2294      	movs	r2, #148	@ 0x94
 8001734:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001736:	4a98      	ldr	r2, [pc, #608]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 8001738:	2394      	movs	r3, #148	@ 0x94
 800173a:	58d3      	ldr	r3, [r2, r3]
 800173c:	4996      	ldr	r1, [pc, #600]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 800173e:	2201      	movs	r2, #1
 8001740:	4313      	orrs	r3, r2
 8001742:	2294      	movs	r2, #148	@ 0x94
 8001744:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001746:	f7ff faff 	bl	8000d48 <HAL_GetTick>
 800174a:	0003      	movs	r3, r0
 800174c:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x43a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001750:	f7ff fafa 	bl	8000d48 <HAL_GetTick>
 8001754:	0002      	movs	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b11      	cmp	r3, #17
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x43a>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e1bb      	b.n	8001ada <HAL_RCC_OscConfig+0x7b2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001762:	4a8d      	ldr	r2, [pc, #564]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 8001764:	2394      	movs	r3, #148	@ 0x94
 8001766:	58d3      	ldr	r3, [r2, r3]
 8001768:	2202      	movs	r2, #2
 800176a:	4013      	ands	r3, r2
 800176c:	d0f0      	beq.n	8001750 <HAL_RCC_OscConfig+0x428>
 800176e:	e01b      	b.n	80017a8 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001770:	4a89      	ldr	r2, [pc, #548]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 8001772:	2394      	movs	r3, #148	@ 0x94
 8001774:	58d3      	ldr	r3, [r2, r3]
 8001776:	4988      	ldr	r1, [pc, #544]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 8001778:	2201      	movs	r2, #1
 800177a:	4393      	bics	r3, r2
 800177c:	2294      	movs	r2, #148	@ 0x94
 800177e:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001780:	f7ff fae2 	bl	8000d48 <HAL_GetTick>
 8001784:	0003      	movs	r3, r0
 8001786:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x474>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800178a:	f7ff fadd 	bl	8000d48 <HAL_GetTick>
 800178e:	0002      	movs	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b11      	cmp	r3, #17
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x474>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e19e      	b.n	8001ada <HAL_RCC_OscConfig+0x7b2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800179c:	4a7e      	ldr	r2, [pc, #504]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 800179e:	2394      	movs	r3, #148	@ 0x94
 80017a0:	58d3      	ldr	r3, [r2, r3]
 80017a2:	2202      	movs	r2, #2
 80017a4:	4013      	ands	r3, r2
 80017a6:	d1f0      	bne.n	800178a <HAL_RCC_OscConfig+0x462>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2204      	movs	r2, #4
 80017ae:	4013      	ands	r3, r2
 80017b0:	d100      	bne.n	80017b4 <HAL_RCC_OscConfig+0x48c>
 80017b2:	e10d      	b.n	80019d0 <HAL_RCC_OscConfig+0x6a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b4:	201f      	movs	r0, #31
 80017b6:	183b      	adds	r3, r7, r0
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 80017bc:	4b76      	ldr	r3, [pc, #472]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 80017be:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80017c0:	2380      	movs	r3, #128	@ 0x80
 80017c2:	055b      	lsls	r3, r3, #21
 80017c4:	4013      	ands	r3, r2
 80017c6:	d110      	bne.n	80017ea <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c8:	4b73      	ldr	r3, [pc, #460]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 80017ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80017cc:	4b72      	ldr	r3, [pc, #456]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 80017ce:	2180      	movs	r1, #128	@ 0x80
 80017d0:	0549      	lsls	r1, r1, #21
 80017d2:	430a      	orrs	r2, r1
 80017d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80017d6:	4b70      	ldr	r3, [pc, #448]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 80017d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80017da:	2380      	movs	r3, #128	@ 0x80
 80017dc:	055b      	lsls	r3, r3, #21
 80017de:	4013      	ands	r3, r2
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017e4:	183b      	adds	r3, r7, r0
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ea:	4b6e      	ldr	r3, [pc, #440]	@ (80019a4 <HAL_RCC_OscConfig+0x67c>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	2380      	movs	r3, #128	@ 0x80
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4013      	ands	r3, r2
 80017f4:	d11a      	bne.n	800182c <HAL_RCC_OscConfig+0x504>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017f6:	4b6b      	ldr	r3, [pc, #428]	@ (80019a4 <HAL_RCC_OscConfig+0x67c>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	4b6a      	ldr	r3, [pc, #424]	@ (80019a4 <HAL_RCC_OscConfig+0x67c>)
 80017fc:	2180      	movs	r1, #128	@ 0x80
 80017fe:	0049      	lsls	r1, r1, #1
 8001800:	430a      	orrs	r2, r1
 8001802:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001804:	f7ff faa0 	bl	8000d48 <HAL_GetTick>
 8001808:	0003      	movs	r3, r0
 800180a:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x4f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800180e:	f7ff fa9b 	bl	8000d48 <HAL_GetTick>
 8001812:	0002      	movs	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e15c      	b.n	8001ada <HAL_RCC_OscConfig+0x7b2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001820:	4b60      	ldr	r3, [pc, #384]	@ (80019a4 <HAL_RCC_OscConfig+0x67c>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	2380      	movs	r3, #128	@ 0x80
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4013      	ands	r3, r2
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x4e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2201      	movs	r2, #1
 8001832:	4013      	ands	r3, r2
 8001834:	d01e      	beq.n	8001874 <HAL_RCC_OscConfig+0x54c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2204      	movs	r2, #4
 800183c:	4013      	ands	r3, r2
 800183e:	d010      	beq.n	8001862 <HAL_RCC_OscConfig+0x53a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001840:	4a55      	ldr	r2, [pc, #340]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 8001842:	2390      	movs	r3, #144	@ 0x90
 8001844:	58d3      	ldr	r3, [r2, r3]
 8001846:	4954      	ldr	r1, [pc, #336]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 8001848:	2204      	movs	r2, #4
 800184a:	4313      	orrs	r3, r2
 800184c:	2290      	movs	r2, #144	@ 0x90
 800184e:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001850:	4a51      	ldr	r2, [pc, #324]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 8001852:	2390      	movs	r3, #144	@ 0x90
 8001854:	58d3      	ldr	r3, [r2, r3]
 8001856:	4950      	ldr	r1, [pc, #320]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 8001858:	2201      	movs	r2, #1
 800185a:	4313      	orrs	r3, r2
 800185c:	2290      	movs	r2, #144	@ 0x90
 800185e:	508b      	str	r3, [r1, r2]
 8001860:	e018      	b.n	8001894 <HAL_RCC_OscConfig+0x56c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001862:	4a4d      	ldr	r2, [pc, #308]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 8001864:	2390      	movs	r3, #144	@ 0x90
 8001866:	58d3      	ldr	r3, [r2, r3]
 8001868:	494b      	ldr	r1, [pc, #300]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 800186a:	2201      	movs	r2, #1
 800186c:	4313      	orrs	r3, r2
 800186e:	2290      	movs	r2, #144	@ 0x90
 8001870:	508b      	str	r3, [r1, r2]
 8001872:	e00f      	b.n	8001894 <HAL_RCC_OscConfig+0x56c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001874:	4a48      	ldr	r2, [pc, #288]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 8001876:	2390      	movs	r3, #144	@ 0x90
 8001878:	58d3      	ldr	r3, [r2, r3]
 800187a:	4947      	ldr	r1, [pc, #284]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 800187c:	2201      	movs	r2, #1
 800187e:	4393      	bics	r3, r2
 8001880:	2290      	movs	r2, #144	@ 0x90
 8001882:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001884:	4a44      	ldr	r2, [pc, #272]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 8001886:	2390      	movs	r3, #144	@ 0x90
 8001888:	58d3      	ldr	r3, [r2, r3]
 800188a:	4943      	ldr	r1, [pc, #268]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 800188c:	2204      	movs	r2, #4
 800188e:	4393      	bics	r3, r2
 8001890:	2290      	movs	r2, #144	@ 0x90
 8001892:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d04f      	beq.n	800193c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189c:	f7ff fa54 	bl	8000d48 <HAL_GetTick>
 80018a0:	0003      	movs	r3, r0
 80018a2:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018a4:	e009      	b.n	80018ba <HAL_RCC_OscConfig+0x592>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a6:	f7ff fa4f 	bl	8000d48 <HAL_GetTick>
 80018aa:	0002      	movs	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	4a3d      	ldr	r2, [pc, #244]	@ (80019a8 <HAL_RCC_OscConfig+0x680>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e10f      	b.n	8001ada <HAL_RCC_OscConfig+0x7b2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ba:	4a37      	ldr	r2, [pc, #220]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 80018bc:	2390      	movs	r3, #144	@ 0x90
 80018be:	58d3      	ldr	r3, [r2, r3]
 80018c0:	2202      	movs	r2, #2
 80018c2:	4013      	ands	r3, r2
 80018c4:	d0ef      	beq.n	80018a6 <HAL_RCC_OscConfig+0x57e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2280      	movs	r2, #128	@ 0x80
 80018cc:	4013      	ands	r3, r2
 80018ce:	d01a      	beq.n	8001906 <HAL_RCC_OscConfig+0x5de>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80018d0:	4a31      	ldr	r2, [pc, #196]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 80018d2:	2390      	movs	r3, #144	@ 0x90
 80018d4:	58d3      	ldr	r3, [r2, r3]
 80018d6:	4930      	ldr	r1, [pc, #192]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 80018d8:	2280      	movs	r2, #128	@ 0x80
 80018da:	4313      	orrs	r3, r2
 80018dc:	2290      	movs	r2, #144	@ 0x90
 80018de:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80018e0:	e009      	b.n	80018f6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e2:	f7ff fa31 	bl	8000d48 <HAL_GetTick>
 80018e6:	0002      	movs	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	4a2e      	ldr	r2, [pc, #184]	@ (80019a8 <HAL_RCC_OscConfig+0x680>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e0f1      	b.n	8001ada <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80018f6:	4a28      	ldr	r2, [pc, #160]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 80018f8:	2390      	movs	r3, #144	@ 0x90
 80018fa:	58d2      	ldr	r2, [r2, r3]
 80018fc:	2380      	movs	r3, #128	@ 0x80
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	4013      	ands	r3, r2
 8001902:	d0ee      	beq.n	80018e2 <HAL_RCC_OscConfig+0x5ba>
 8001904:	e059      	b.n	80019ba <HAL_RCC_OscConfig+0x692>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001906:	4a24      	ldr	r2, [pc, #144]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 8001908:	2390      	movs	r3, #144	@ 0x90
 800190a:	58d3      	ldr	r3, [r2, r3]
 800190c:	4922      	ldr	r1, [pc, #136]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 800190e:	2280      	movs	r2, #128	@ 0x80
 8001910:	4393      	bics	r3, r2
 8001912:	2290      	movs	r2, #144	@ 0x90
 8001914:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001916:	e009      	b.n	800192c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001918:	f7ff fa16 	bl	8000d48 <HAL_GetTick>
 800191c:	0002      	movs	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	4a21      	ldr	r2, [pc, #132]	@ (80019a8 <HAL_RCC_OscConfig+0x680>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e0d6      	b.n	8001ada <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800192c:	4a1a      	ldr	r2, [pc, #104]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 800192e:	2390      	movs	r3, #144	@ 0x90
 8001930:	58d2      	ldr	r2, [r2, r3]
 8001932:	2380      	movs	r3, #128	@ 0x80
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	4013      	ands	r3, r2
 8001938:	d1ee      	bne.n	8001918 <HAL_RCC_OscConfig+0x5f0>
 800193a:	e03e      	b.n	80019ba <HAL_RCC_OscConfig+0x692>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193c:	f7ff fa04 	bl	8000d48 <HAL_GetTick>
 8001940:	0003      	movs	r3, r0
 8001942:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001944:	e009      	b.n	800195a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001946:	f7ff f9ff 	bl	8000d48 <HAL_GetTick>
 800194a:	0002      	movs	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	4a15      	ldr	r2, [pc, #84]	@ (80019a8 <HAL_RCC_OscConfig+0x680>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e0bf      	b.n	8001ada <HAL_RCC_OscConfig+0x7b2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800195a:	4a0f      	ldr	r2, [pc, #60]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 800195c:	2390      	movs	r3, #144	@ 0x90
 800195e:	58d3      	ldr	r3, [r2, r3]
 8001960:	2202      	movs	r2, #2
 8001962:	4013      	ands	r3, r2
 8001964:	d1ef      	bne.n	8001946 <HAL_RCC_OscConfig+0x61e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001966:	4a0c      	ldr	r2, [pc, #48]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 8001968:	2390      	movs	r3, #144	@ 0x90
 800196a:	58d3      	ldr	r3, [r2, r3]
 800196c:	2280      	movs	r2, #128	@ 0x80
 800196e:	4013      	ands	r3, r2
 8001970:	d023      	beq.n	80019ba <HAL_RCC_OscConfig+0x692>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001972:	4a09      	ldr	r2, [pc, #36]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 8001974:	2390      	movs	r3, #144	@ 0x90
 8001976:	58d3      	ldr	r3, [r2, r3]
 8001978:	4907      	ldr	r1, [pc, #28]	@ (8001998 <HAL_RCC_OscConfig+0x670>)
 800197a:	2280      	movs	r2, #128	@ 0x80
 800197c:	4393      	bics	r3, r2
 800197e:	2290      	movs	r2, #144	@ 0x90
 8001980:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001982:	e013      	b.n	80019ac <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001984:	f7ff f9e0 	bl	8000d48 <HAL_GetTick>
 8001988:	0002      	movs	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	4a06      	ldr	r2, [pc, #24]	@ (80019a8 <HAL_RCC_OscConfig+0x680>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d90b      	bls.n	80019ac <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e0a0      	b.n	8001ada <HAL_RCC_OscConfig+0x7b2>
 8001998:	40021000 	.word	0x40021000
 800199c:	80ffffff 	.word	0x80ffffff
 80019a0:	fffffeff 	.word	0xfffffeff
 80019a4:	40007000 	.word	0x40007000
 80019a8:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80019ac:	4a4d      	ldr	r2, [pc, #308]	@ (8001ae4 <HAL_RCC_OscConfig+0x7bc>)
 80019ae:	2390      	movs	r3, #144	@ 0x90
 80019b0:	58d2      	ldr	r2, [r2, r3]
 80019b2:	2380      	movs	r3, #128	@ 0x80
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	4013      	ands	r3, r2
 80019b8:	d1e4      	bne.n	8001984 <HAL_RCC_OscConfig+0x65c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019ba:	231f      	movs	r3, #31
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d105      	bne.n	80019d0 <HAL_RCC_OscConfig+0x6a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c4:	4b47      	ldr	r3, [pc, #284]	@ (8001ae4 <HAL_RCC_OscConfig+0x7bc>)
 80019c6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019c8:	4b46      	ldr	r3, [pc, #280]	@ (8001ae4 <HAL_RCC_OscConfig+0x7bc>)
 80019ca:	4947      	ldr	r1, [pc, #284]	@ (8001ae8 <HAL_RCC_OscConfig+0x7c0>)
 80019cc:	400a      	ands	r2, r1
 80019ce:	659a      	str	r2, [r3, #88]	@ 0x58
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d100      	bne.n	80019da <HAL_RCC_OscConfig+0x6b2>
 80019d8:	e07e      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019da:	4b42      	ldr	r3, [pc, #264]	@ (8001ae4 <HAL_RCC_OscConfig+0x7bc>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2238      	movs	r2, #56	@ 0x38
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b18      	cmp	r3, #24
 80019e4:	d100      	bne.n	80019e8 <HAL_RCC_OscConfig+0x6c0>
 80019e6:	e075      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7ac>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d156      	bne.n	8001a9e <HAL_RCC_OscConfig+0x776>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ae4 <HAL_RCC_OscConfig+0x7bc>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae4 <HAL_RCC_OscConfig+0x7bc>)
 80019f6:	493d      	ldr	r1, [pc, #244]	@ (8001aec <HAL_RCC_OscConfig+0x7c4>)
 80019f8:	400a      	ands	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7ff f9a4 	bl	8000d48 <HAL_GetTick>
 8001a00:	0003      	movs	r3, r0
 8001a02:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x6f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a06:	f7ff f99f 	bl	8000d48 <HAL_GetTick>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e060      	b.n	8001ada <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a18:	4b32      	ldr	r3, [pc, #200]	@ (8001ae4 <HAL_RCC_OscConfig+0x7bc>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2380      	movs	r3, #128	@ 0x80
 8001a1e:	049b      	lsls	r3, r3, #18
 8001a20:	4013      	ands	r3, r2
 8001a22:	d1f0      	bne.n	8001a06 <HAL_RCC_OscConfig+0x6de>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a24:	4b2f      	ldr	r3, [pc, #188]	@ (8001ae4 <HAL_RCC_OscConfig+0x7bc>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	4a31      	ldr	r2, [pc, #196]	@ (8001af0 <HAL_RCC_OscConfig+0x7c8>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a50:	431a      	orrs	r2, r3
 8001a52:	4b24      	ldr	r3, [pc, #144]	@ (8001ae4 <HAL_RCC_OscConfig+0x7bc>)
 8001a54:	430a      	orrs	r2, r1
 8001a56:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8001a58:	4b22      	ldr	r3, [pc, #136]	@ (8001ae4 <HAL_RCC_OscConfig+0x7bc>)
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	4b21      	ldr	r3, [pc, #132]	@ (8001ae4 <HAL_RCC_OscConfig+0x7bc>)
 8001a5e:	2180      	movs	r1, #128	@ 0x80
 8001a60:	0549      	lsls	r1, r1, #21
 8001a62:	430a      	orrs	r2, r1
 8001a64:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a66:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae4 <HAL_RCC_OscConfig+0x7bc>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae4 <HAL_RCC_OscConfig+0x7bc>)
 8001a6c:	2180      	movs	r1, #128	@ 0x80
 8001a6e:	0449      	lsls	r1, r1, #17
 8001a70:	430a      	orrs	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a74:	f7ff f968 	bl	8000d48 <HAL_GetTick>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x768>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7ff f963 	bl	8000d48 <HAL_GetTick>
 8001a82:	0002      	movs	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x768>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e024      	b.n	8001ada <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a90:	4b14      	ldr	r3, [pc, #80]	@ (8001ae4 <HAL_RCC_OscConfig+0x7bc>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	2380      	movs	r3, #128	@ 0x80
 8001a96:	049b      	lsls	r3, r3, #18
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x756>
 8001a9c:	e01c      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ae4 <HAL_RCC_OscConfig+0x7bc>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4b10      	ldr	r3, [pc, #64]	@ (8001ae4 <HAL_RCC_OscConfig+0x7bc>)
 8001aa4:	4911      	ldr	r1, [pc, #68]	@ (8001aec <HAL_RCC_OscConfig+0x7c4>)
 8001aa6:	400a      	ands	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aaa:	f7ff f94d 	bl	8000d48 <HAL_GetTick>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x79e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab4:	f7ff f948 	bl	8000d48 <HAL_GetTick>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x79e>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e009      	b.n	8001ada <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac6:	4b07      	ldr	r3, [pc, #28]	@ (8001ae4 <HAL_RCC_OscConfig+0x7bc>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	2380      	movs	r3, #128	@ 0x80
 8001acc:	049b      	lsls	r3, r3, #18
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x78c>
 8001ad2:	e001      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <HAL_RCC_OscConfig+0x7b2>
    }
  }
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	0018      	movs	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b008      	add	sp, #32
 8001ae0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae2:	46c0      	nop			@ (mov r8, r8)
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	efffffff 	.word	0xefffffff
 8001aec:	feffffff 	.word	0xfeffffff
 8001af0:	11c1808c 	.word	0x11c1808c

08001af4 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af4:	b5b0      	push	{r4, r5, r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001afe:	4b6c      	ldr	r3, [pc, #432]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2207      	movs	r2, #7
 8001b04:	4013      	ands	r3, r2
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d911      	bls.n	8001b30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0c:	4b68      	ldr	r3, [pc, #416]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2207      	movs	r2, #7
 8001b12:	4393      	bics	r3, r2
 8001b14:	0019      	movs	r1, r3
 8001b16:	4b66      	ldr	r3, [pc, #408]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1e:	4b64      	ldr	r3, [pc, #400]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2207      	movs	r2, #7
 8001b24:	4013      	ands	r3, r2
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0bb      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2201      	movs	r2, #1
 8001b36:	4013      	ands	r3, r2
 8001b38:	d100      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x48>
 8001b3a:	e064      	b.n	8001c06 <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d107      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b44:	4b5b      	ldr	r3, [pc, #364]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	2380      	movs	r3, #128	@ 0x80
 8001b4a:	049b      	lsls	r3, r3, #18
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d138      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0a9      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d107      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b5c:	4b55      	ldr	r3, [pc, #340]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	2380      	movs	r3, #128	@ 0x80
 8001b62:	029b      	lsls	r3, r3, #10
 8001b64:	4013      	ands	r3, r2
 8001b66:	d12c      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e09d      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d106      	bne.n	8001b82 <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b74:	4b4f      	ldr	r3, [pc, #316]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2202      	movs	r2, #2
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d121      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e092      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d107      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	2380      	movs	r3, #128	@ 0x80
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4013      	ands	r3, r2
 8001b94:	d115      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e086      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ba2:	4a44      	ldr	r2, [pc, #272]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba4:	2394      	movs	r3, #148	@ 0x94
 8001ba6:	58d3      	ldr	r3, [r2, r3]
 8001ba8:	2202      	movs	r2, #2
 8001baa:	4013      	ands	r3, r2
 8001bac:	d109      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e07a      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bb2:	4a40      	ldr	r2, [pc, #256]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb4:	2390      	movs	r3, #144	@ 0x90
 8001bb6:	58d3      	ldr	r3, [r2, r3]
 8001bb8:	2202      	movs	r2, #2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d101      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e072      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bc2:	4b3c      	ldr	r3, [pc, #240]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2207      	movs	r2, #7
 8001bc8:	4393      	bics	r3, r2
 8001bca:	0019      	movs	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	4b38      	ldr	r3, [pc, #224]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd6:	f7ff f8b7 	bl	8000d48 <HAL_GetTick>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	e009      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be0:	f7ff f8b2 	bl	8000d48 <HAL_GetTick>
 8001be4:	0002      	movs	r2, r0
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	4a33      	ldr	r2, [pc, #204]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e059      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf4:	4b2f      	ldr	r3, [pc, #188]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2238      	movs	r2, #56	@ 0x38
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d1ec      	bne.n	8001be0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d009      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c10:	4b28      	ldr	r3, [pc, #160]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	4a29      	ldr	r2, [pc, #164]	@ (8001cbc <HAL_RCC_ClockConfig+0x1c8>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	0019      	movs	r1, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	4b25      	ldr	r3, [pc, #148]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c20:	430a      	orrs	r2, r1
 8001c22:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c24:	4b22      	ldr	r3, [pc, #136]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2207      	movs	r2, #7
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d211      	bcs.n	8001c56 <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c32:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2207      	movs	r2, #7
 8001c38:	4393      	bics	r3, r2
 8001c3a:	0019      	movs	r1, r3
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c44:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2207      	movs	r2, #7
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d001      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e028      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d009      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c60:	4b14      	ldr	r3, [pc, #80]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	4a16      	ldr	r2, [pc, #88]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1cc>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	0019      	movs	r1, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	4b11      	ldr	r3, [pc, #68]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c70:	430a      	orrs	r2, r1
 8001c72:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001c74:	f000 f82a 	bl	8001ccc <HAL_RCC_GetSysClockFreq>
 8001c78:	0001      	movs	r1, r0
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c7e:	0a1b      	lsrs	r3, r3, #8
 8001c80:	220f      	movs	r2, #15
 8001c82:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001c84:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1d0>)
 8001c86:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c88:	001a      	movs	r2, r3
 8001c8a:	231f      	movs	r3, #31
 8001c8c:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001c8e:	000a      	movs	r2, r1
 8001c90:	40da      	lsrs	r2, r3
 8001c92:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1d4>)
 8001c94:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 8001c96:	250b      	movs	r5, #11
 8001c98:	197c      	adds	r4, r7, r5
 8001c9a:	2003      	movs	r0, #3
 8001c9c:	f7fe fffa 	bl	8000c94 <HAL_InitTick>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	7023      	strb	r3, [r4, #0]

  return halstatus;
 8001ca4:	197b      	adds	r3, r7, r5
 8001ca6:	781b      	ldrb	r3, [r3, #0]
}
 8001ca8:	0018      	movs	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b004      	add	sp, #16
 8001cae:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb0:	40022000 	.word	0x40022000
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	00001388 	.word	0x00001388
 8001cbc:	fffff0ff 	.word	0xfffff0ff
 8001cc0:	ffff8fff 	.word	0xffff8fff
 8001cc4:	08003aa4 	.word	0x08003aa4
 8001cc8:	20000000 	.word	0x20000000

08001ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	@ 0x28
 8001cd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cda:	4b46      	ldr	r3, [pc, #280]	@ (8001df4 <HAL_RCC_GetSysClockFreq+0x128>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2238      	movs	r2, #56	@ 0x38
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce4:	4b43      	ldr	r3, [pc, #268]	@ (8001df4 <HAL_RCC_GetSysClockFreq+0x128>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2203      	movs	r2, #3
 8001cea:	4013      	ands	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d005      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0x34>
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	2b18      	cmp	r3, #24
 8001cf8:	d125      	bne.n	8001d46 <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d122      	bne.n	8001d46 <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d00:	4b3c      	ldr	r3, [pc, #240]	@ (8001df4 <HAL_RCC_GetSysClockFreq+0x128>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2208      	movs	r2, #8
 8001d06:	4013      	ands	r3, r2
 8001d08:	d107      	bne.n	8001d1a <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 8001d0a:	4a3a      	ldr	r2, [pc, #232]	@ (8001df4 <HAL_RCC_GetSysClockFreq+0x128>)
 8001d0c:	2394      	movs	r3, #148	@ 0x94
 8001d0e:	58d3      	ldr	r3, [r2, r3]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	220f      	movs	r2, #15
 8001d14:	4013      	ands	r3, r2
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d18:	e005      	b.n	8001d26 <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d1a:	4b36      	ldr	r3, [pc, #216]	@ (8001df4 <HAL_RCC_GetSysClockFreq+0x128>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	091b      	lsrs	r3, r3, #4
 8001d20:	220f      	movs	r2, #15
 8001d22:	4013      	ands	r3, r2
 8001d24:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	2b0b      	cmp	r3, #11
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 8001d30:	4b31      	ldr	r3, [pc, #196]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d34:	0092      	lsls	r2, r2, #2
 8001d36:	58d3      	ldr	r3, [r2, r3]
 8001d38:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d11b      	bne.n	8001d78 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d42:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d44:	e018      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d102      	bne.n	8001d52 <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0x130>)
 8001d4e:	623b      	str	r3, [r7, #32]
 8001d50:	e012      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	2b10      	cmp	r3, #16
 8001d56:	d102      	bne.n	8001d5e <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d58:	4b29      	ldr	r3, [pc, #164]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x134>)
 8001d5a:	623b      	str	r3, [r7, #32]
 8001d5c:	e00c      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	2b20      	cmp	r3, #32
 8001d62:	d103      	bne.n	8001d6c <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001d64:	23fa      	movs	r3, #250	@ 0xfa
 8001d66:	01db      	lsls	r3, r3, #7
 8001d68:	623b      	str	r3, [r7, #32]
 8001d6a:	e005      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2b28      	cmp	r3, #40	@ 0x28
 8001d70:	d102      	bne.n	8001d78 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001d72:	2380      	movs	r3, #128	@ 0x80
 8001d74:	021b      	lsls	r3, r3, #8
 8001d76:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	2b18      	cmp	r3, #24
 8001d7c:	d135      	bne.n	8001dea <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001df4 <HAL_RCC_GetSysClockFreq+0x128>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	2203      	movs	r2, #3
 8001d84:	4013      	ands	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d88:	4b1a      	ldr	r3, [pc, #104]	@ (8001df4 <HAL_RCC_GetSysClockFreq+0x128>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	2207      	movs	r2, #7
 8001d90:	4013      	ands	r3, r2
 8001d92:	3301      	adds	r3, #1
 8001d94:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d003      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0xd8>
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d003      	beq.n	8001daa <HAL_RCC_GetSysClockFreq+0xde>
 8001da2:	e005      	b.n	8001db0 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 8001da4:	4b15      	ldr	r3, [pc, #84]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0x130>)
 8001da6:	61fb      	str	r3, [r7, #28]
        break;
 8001da8:	e005      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 8001daa:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x134>)
 8001dac:	61fb      	str	r3, [r7, #28]
        break;
 8001dae:	e002      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 8001db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db2:	61fb      	str	r3, [r7, #28]
        break;
 8001db4:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 8001db6:	4b0f      	ldr	r3, [pc, #60]	@ (8001df4 <HAL_RCC_GetSysClockFreq+0x128>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	0a1b      	lsrs	r3, r3, #8
 8001dbc:	227f      	movs	r2, #127	@ 0x7f
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	4353      	muls	r3, r2
 8001dc4:	68f9      	ldr	r1, [r7, #12]
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f7fe f99e 	bl	8000108 <__udivsi3>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001dd0:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <HAL_RCC_GetSysClockFreq+0x128>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	0f5b      	lsrs	r3, r3, #29
 8001dd6:	2207      	movs	r2, #7
 8001dd8:	4013      	ands	r3, r2
 8001dda:	3301      	adds	r3, #1
 8001ddc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	68b8      	ldr	r0, [r7, #8]
 8001de2:	f7fe f991 	bl	8000108 <__udivsi3>
 8001de6:	0003      	movs	r3, r0
 8001de8:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8001dea:	6a3b      	ldr	r3, [r7, #32]
}
 8001dec:	0018      	movs	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b00a      	add	sp, #40	@ 0x28
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40021000 	.word	0x40021000
 8001df8:	08003abc 	.word	0x08003abc
 8001dfc:	00f42400 	.word	0x00f42400
 8001e00:	003d0900 	.word	0x003d0900

08001e04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e08:	4b02      	ldr	r3, [pc, #8]	@ (8001e14 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	46c0      	nop			@ (mov r8, r8)
 8001e14:	20000000 	.word	0x20000000

08001e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 8001e1c:	f7ff fff2 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 8001e20:	0001      	movs	r1, r0
 8001e22:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	0b1b      	lsrs	r3, r3, #12
 8001e28:	2207      	movs	r2, #7
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	4a05      	ldr	r2, [pc, #20]	@ (8001e44 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001e2e:	5cd3      	ldrb	r3, [r2, r3]
 8001e30:	001a      	movs	r2, r3
 8001e32:	231f      	movs	r3, #31
 8001e34:	4013      	ands	r3, r2
 8001e36:	40d9      	lsrs	r1, r3
 8001e38:	000b      	movs	r3, r1
}
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021000 	.word	0x40021000
 8001e44:	08003ab4 	.word	0x08003ab4

08001e48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e50:	2300      	movs	r3, #0
 8001e52:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e54:	4b2f      	ldr	r3, [pc, #188]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8001e56:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e58:	2380      	movs	r3, #128	@ 0x80
 8001e5a:	055b      	lsls	r3, r3, #21
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d004      	beq.n	8001e6a <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e60:	f7ff fa56 	bl	8001310 <HAL_PWREx_GetVoltageRange>
 8001e64:	0003      	movs	r3, r0
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	e017      	b.n	8001e9a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8001e6c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e6e:	4b29      	ldr	r3, [pc, #164]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8001e70:	2180      	movs	r1, #128	@ 0x80
 8001e72:	0549      	lsls	r1, r1, #21
 8001e74:	430a      	orrs	r2, r1
 8001e76:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e78:	4b26      	ldr	r3, [pc, #152]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8001e7a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e7c:	2380      	movs	r3, #128	@ 0x80
 8001e7e:	055b      	lsls	r3, r3, #21
 8001e80:	4013      	ands	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e86:	f7ff fa43 	bl	8001310 <HAL_PWREx_GetVoltageRange>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e8e:	4b21      	ldr	r3, [pc, #132]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8001e90:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e92:	4b20      	ldr	r3, [pc, #128]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8001e94:	4920      	ldr	r1, [pc, #128]	@ (8001f18 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 8001e96:	400a      	ands	r2, r1
 8001e98:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	2380      	movs	r3, #128	@ 0x80
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d111      	bne.n	8001ec8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b80      	cmp	r3, #128	@ 0x80
 8001ea8:	d91c      	bls.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2bb0      	cmp	r3, #176	@ 0xb0
 8001eae:	d902      	bls.n	8001eb6 <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	e016      	b.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b90      	cmp	r3, #144	@ 0x90
 8001eba:	d902      	bls.n	8001ec2 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	e010      	b.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	e00d      	b.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ecc:	d902      	bls.n	8001ed4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 8001ece:	2302      	movs	r3, #2
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	e007      	b.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b70      	cmp	r3, #112	@ 0x70
 8001ed8:	d102      	bne.n	8001ee0 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8001eda:	2301      	movs	r3, #1
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	e001      	b.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8001f1c <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2207      	movs	r2, #7
 8001eea:	4393      	bics	r3, r2
 8001eec:	0019      	movs	r1, r3
 8001eee:	4b0b      	ldr	r3, [pc, #44]	@ (8001f1c <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001ef6:	4b09      	ldr	r3, [pc, #36]	@ (8001f1c <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2207      	movs	r2, #7
 8001efc:	4013      	ands	r3, r2
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	b006      	add	sp, #24
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	46c0      	nop			@ (mov r8, r8)
 8001f14:	40021000 	.word	0x40021000
 8001f18:	efffffff 	.word	0xefffffff
 8001f1c:	40022000 	.word	0x40022000

08001f20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f28:	2313      	movs	r3, #19
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f30:	2312      	movs	r3, #18
 8001f32:	18fb      	adds	r3, r7, r3
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	2380      	movs	r3, #128	@ 0x80
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	4013      	ands	r3, r2
 8001f42:	d100      	bne.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001f44:	e0b7      	b.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f46:	2011      	movs	r0, #17
 8001f48:	183b      	adds	r3, r7, r0
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f4e:	4b4c      	ldr	r3, [pc, #304]	@ (8002080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f50:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001f52:	2380      	movs	r3, #128	@ 0x80
 8001f54:	055b      	lsls	r3, r3, #21
 8001f56:	4013      	ands	r3, r2
 8001f58:	d110      	bne.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5a:	4b49      	ldr	r3, [pc, #292]	@ (8002080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f5c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001f5e:	4b48      	ldr	r3, [pc, #288]	@ (8002080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f60:	2180      	movs	r1, #128	@ 0x80
 8001f62:	0549      	lsls	r1, r1, #21
 8001f64:	430a      	orrs	r2, r1
 8001f66:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f68:	4b45      	ldr	r3, [pc, #276]	@ (8002080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f6a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001f6c:	2380      	movs	r3, #128	@ 0x80
 8001f6e:	055b      	lsls	r3, r3, #21
 8001f70:	4013      	ands	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f76:	183b      	adds	r3, r7, r0
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f7c:	4b41      	ldr	r3, [pc, #260]	@ (8002084 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b40      	ldr	r3, [pc, #256]	@ (8002084 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f82:	2180      	movs	r1, #128	@ 0x80
 8001f84:	0049      	lsls	r1, r1, #1
 8001f86:	430a      	orrs	r2, r1
 8001f88:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f8a:	f7fe fedd 	bl	8000d48 <HAL_GetTick>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f92:	e00b      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f94:	f7fe fed8 	bl	8000d48 <HAL_GetTick>
 8001f98:	0002      	movs	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d904      	bls.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001fa2:	2313      	movs	r3, #19
 8001fa4:	18fb      	adds	r3, r7, r3
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	701a      	strb	r2, [r3, #0]
        break;
 8001faa:	e005      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fac:	4b35      	ldr	r3, [pc, #212]	@ (8002084 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	2380      	movs	r3, #128	@ 0x80
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d0ed      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001fb8:	2313      	movs	r3, #19
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d168      	bne.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fc2:	4a2f      	ldr	r2, [pc, #188]	@ (8002080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fc4:	2390      	movs	r3, #144	@ 0x90
 8001fc6:	58d2      	ldr	r2, [r2, r3]
 8001fc8:	23c0      	movs	r3, #192	@ 0xc0
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4013      	ands	r3, r2
 8001fce:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d01f      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d01a      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fe0:	4a27      	ldr	r2, [pc, #156]	@ (8002080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe2:	2390      	movs	r3, #144	@ 0x90
 8001fe4:	58d3      	ldr	r3, [r2, r3]
 8001fe6:	4a28      	ldr	r2, [pc, #160]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fec:	4a24      	ldr	r2, [pc, #144]	@ (8002080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fee:	2390      	movs	r3, #144	@ 0x90
 8001ff0:	58d3      	ldr	r3, [r2, r3]
 8001ff2:	4923      	ldr	r1, [pc, #140]	@ (8002080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff4:	2280      	movs	r2, #128	@ 0x80
 8001ff6:	0252      	lsls	r2, r2, #9
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	2290      	movs	r2, #144	@ 0x90
 8001ffc:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ffe:	4a20      	ldr	r2, [pc, #128]	@ (8002080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002000:	2390      	movs	r3, #144	@ 0x90
 8002002:	58d3      	ldr	r3, [r2, r3]
 8002004:	491e      	ldr	r1, [pc, #120]	@ (8002080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002006:	4a21      	ldr	r2, [pc, #132]	@ (800208c <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8002008:	4013      	ands	r3, r2
 800200a:	2290      	movs	r2, #144	@ 0x90
 800200c:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800200e:	491c      	ldr	r1, [pc, #112]	@ (8002080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002010:	2290      	movs	r2, #144	@ 0x90
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2201      	movs	r2, #1
 800201a:	4013      	ands	r3, r2
 800201c:	d017      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7fe fe93 	bl	8000d48 <HAL_GetTick>
 8002022:	0003      	movs	r3, r0
 8002024:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002026:	e00c      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002028:	f7fe fe8e 	bl	8000d48 <HAL_GetTick>
 800202c:	0002      	movs	r2, r0
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	4a17      	ldr	r2, [pc, #92]	@ (8002090 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d904      	bls.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 8002038:	2313      	movs	r3, #19
 800203a:	18fb      	adds	r3, r7, r3
 800203c:	2203      	movs	r2, #3
 800203e:	701a      	strb	r2, [r3, #0]
            break;
 8002040:	e005      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002042:	4a0f      	ldr	r2, [pc, #60]	@ (8002080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002044:	2390      	movs	r3, #144	@ 0x90
 8002046:	58d3      	ldr	r3, [r2, r3]
 8002048:	2202      	movs	r2, #2
 800204a:	4013      	ands	r3, r2
 800204c:	d0ec      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 800204e:	2313      	movs	r3, #19
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10b      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002058:	4a09      	ldr	r2, [pc, #36]	@ (8002080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800205a:	2390      	movs	r3, #144	@ 0x90
 800205c:	58d3      	ldr	r3, [r2, r3]
 800205e:	4a0a      	ldr	r2, [pc, #40]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002060:	401a      	ands	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002066:	4906      	ldr	r1, [pc, #24]	@ (8002080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002068:	4313      	orrs	r3, r2
 800206a:	2290      	movs	r2, #144	@ 0x90
 800206c:	508b      	str	r3, [r1, r2]
 800206e:	e017      	b.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002070:	2312      	movs	r3, #18
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	2213      	movs	r2, #19
 8002076:	18ba      	adds	r2, r7, r2
 8002078:	7812      	ldrb	r2, [r2, #0]
 800207a:	701a      	strb	r2, [r3, #0]
 800207c:	e010      	b.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	40021000 	.word	0x40021000
 8002084:	40007000 	.word	0x40007000
 8002088:	fffffcff 	.word	0xfffffcff
 800208c:	fffeffff 	.word	0xfffeffff
 8002090:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002094:	2312      	movs	r3, #18
 8002096:	18fb      	adds	r3, r7, r3
 8002098:	2213      	movs	r2, #19
 800209a:	18ba      	adds	r2, r7, r2
 800209c:	7812      	ldrb	r2, [r2, #0]
 800209e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020a0:	2311      	movs	r3, #17
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d105      	bne.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020aa:	4b84      	ldr	r3, [pc, #528]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80020ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80020ae:	4b83      	ldr	r3, [pc, #524]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80020b0:	4983      	ldr	r1, [pc, #524]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 80020b2:	400a      	ands	r2, r1
 80020b4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2201      	movs	r2, #1
 80020bc:	4013      	ands	r3, r2
 80020be:	d00b      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020c0:	4a7e      	ldr	r2, [pc, #504]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80020c2:	2388      	movs	r3, #136	@ 0x88
 80020c4:	58d3      	ldr	r3, [r2, r3]
 80020c6:	2203      	movs	r2, #3
 80020c8:	4393      	bics	r3, r2
 80020ca:	001a      	movs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	497a      	ldr	r1, [pc, #488]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	2288      	movs	r2, #136	@ 0x88
 80020d6:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2202      	movs	r2, #2
 80020de:	4013      	ands	r3, r2
 80020e0:	d00b      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020e2:	4a76      	ldr	r2, [pc, #472]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80020e4:	2388      	movs	r3, #136	@ 0x88
 80020e6:	58d3      	ldr	r3, [r2, r3]
 80020e8:	220c      	movs	r2, #12
 80020ea:	4393      	bics	r3, r2
 80020ec:	001a      	movs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	4972      	ldr	r1, [pc, #456]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	2288      	movs	r2, #136	@ 0x88
 80020f8:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2210      	movs	r2, #16
 8002100:	4013      	ands	r3, r2
 8002102:	d00a      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002104:	4a6d      	ldr	r2, [pc, #436]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002106:	2388      	movs	r3, #136	@ 0x88
 8002108:	58d3      	ldr	r3, [r2, r3]
 800210a:	4a6e      	ldr	r2, [pc, #440]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 800210c:	401a      	ands	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	496a      	ldr	r1, [pc, #424]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002114:	4313      	orrs	r3, r2
 8002116:	2288      	movs	r2, #136	@ 0x88
 8002118:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2208      	movs	r2, #8
 8002120:	4013      	ands	r3, r2
 8002122:	d00a      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002124:	4a65      	ldr	r2, [pc, #404]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002126:	2388      	movs	r3, #136	@ 0x88
 8002128:	58d3      	ldr	r3, [r2, r3]
 800212a:	4a67      	ldr	r2, [pc, #412]	@ (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800212c:	401a      	ands	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	4962      	ldr	r1, [pc, #392]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002134:	4313      	orrs	r3, r2
 8002136:	2288      	movs	r2, #136	@ 0x88
 8002138:	508b      	str	r3, [r1, r2]
    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2220      	movs	r2, #32
 8002140:	4013      	ands	r3, r2
 8002142:	d00a      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002144:	4a5d      	ldr	r2, [pc, #372]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002146:	2388      	movs	r3, #136	@ 0x88
 8002148:	58d3      	ldr	r3, [r2, r3]
 800214a:	4a60      	ldr	r2, [pc, #384]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 800214c:	401a      	ands	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	495a      	ldr	r1, [pc, #360]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002154:	4313      	orrs	r3, r2
 8002156:	2288      	movs	r2, #136	@ 0x88
 8002158:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2240      	movs	r2, #64	@ 0x40
 8002160:	4013      	ands	r3, r2
 8002162:	d00a      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002164:	4a55      	ldr	r2, [pc, #340]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002166:	2388      	movs	r3, #136	@ 0x88
 8002168:	58d3      	ldr	r3, [r2, r3]
 800216a:	4a59      	ldr	r2, [pc, #356]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 800216c:	401a      	ands	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	4952      	ldr	r1, [pc, #328]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002174:	4313      	orrs	r3, r2
 8002176:	2288      	movs	r2, #136	@ 0x88
 8002178:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2280      	movs	r2, #128	@ 0x80
 8002180:	4013      	ands	r3, r2
 8002182:	d00a      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002184:	4a4d      	ldr	r2, [pc, #308]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002186:	2388      	movs	r3, #136	@ 0x88
 8002188:	58d3      	ldr	r3, [r2, r3]
 800218a:	4a52      	ldr	r2, [pc, #328]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 800218c:	401a      	ands	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	494a      	ldr	r1, [pc, #296]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002194:	4313      	orrs	r3, r2
 8002196:	2288      	movs	r2, #136	@ 0x88
 8002198:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	2380      	movs	r3, #128	@ 0x80
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4013      	ands	r3, r2
 80021a4:	d00a      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021a6:	4a45      	ldr	r2, [pc, #276]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80021a8:	2388      	movs	r3, #136	@ 0x88
 80021aa:	58d3      	ldr	r3, [r2, r3]
 80021ac:	4a4a      	ldr	r2, [pc, #296]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 80021ae:	401a      	ands	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	4941      	ldr	r1, [pc, #260]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	2288      	movs	r2, #136	@ 0x88
 80021ba:	508b      	str	r3, [r1, r2]
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	2380      	movs	r3, #128	@ 0x80
 80021c2:	01db      	lsls	r3, r3, #7
 80021c4:	4013      	ands	r3, r2
 80021c6:	d017      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021cc:	2380      	movs	r3, #128	@ 0x80
 80021ce:	055b      	lsls	r3, r3, #21
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d106      	bne.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 80021d4:	4b39      	ldr	r3, [pc, #228]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	4b38      	ldr	r3, [pc, #224]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80021da:	2180      	movs	r1, #128	@ 0x80
 80021dc:	0249      	lsls	r1, r1, #9
 80021de:	430a      	orrs	r2, r1
 80021e0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021e2:	4a36      	ldr	r2, [pc, #216]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80021e4:	2388      	movs	r3, #136	@ 0x88
 80021e6:	58d3      	ldr	r3, [r2, r3]
 80021e8:	4a3c      	ldr	r2, [pc, #240]	@ (80022dc <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 80021ea:	401a      	ands	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f0:	4932      	ldr	r1, [pc, #200]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	2288      	movs	r2, #136	@ 0x88
 80021f6:	508b      	str	r3, [r1, r2]
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	2380      	movs	r3, #128	@ 0x80
 80021fe:	019b      	lsls	r3, r3, #6
 8002200:	4013      	ands	r3, r2
 8002202:	d017      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002208:	2380      	movs	r3, #128	@ 0x80
 800220a:	051b      	lsls	r3, r3, #20
 800220c:	429a      	cmp	r2, r3
 800220e:	d106      	bne.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8002210:	4b2a      	ldr	r3, [pc, #168]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	4b29      	ldr	r3, [pc, #164]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002216:	2180      	movs	r1, #128	@ 0x80
 8002218:	0449      	lsls	r1, r1, #17
 800221a:	430a      	orrs	r2, r1
 800221c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800221e:	4a27      	ldr	r2, [pc, #156]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002220:	2388      	movs	r3, #136	@ 0x88
 8002222:	58d3      	ldr	r3, [r2, r3]
 8002224:	4a2e      	ldr	r2, [pc, #184]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8002226:	401a      	ands	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222c:	4923      	ldr	r1, [pc, #140]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800222e:	4313      	orrs	r3, r2
 8002230:	2288      	movs	r2, #136	@ 0x88
 8002232:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	2380      	movs	r3, #128	@ 0x80
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4013      	ands	r3, r2
 800223e:	d017      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002244:	2380      	movs	r3, #128	@ 0x80
 8002246:	045b      	lsls	r3, r3, #17
 8002248:	429a      	cmp	r2, r3
 800224a:	d106      	bne.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x33a>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 800224c:	4b1b      	ldr	r3, [pc, #108]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	4b1a      	ldr	r3, [pc, #104]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002252:	2180      	movs	r1, #128	@ 0x80
 8002254:	0449      	lsls	r1, r1, #17
 8002256:	430a      	orrs	r2, r1
 8002258:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800225a:	4a18      	ldr	r2, [pc, #96]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800225c:	2388      	movs	r3, #136	@ 0x88
 800225e:	58d3      	ldr	r3, [r2, r3]
 8002260:	4a20      	ldr	r2, [pc, #128]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8002262:	401a      	ands	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002268:	4914      	ldr	r1, [pc, #80]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800226a:	4313      	orrs	r3, r2
 800226c:	2288      	movs	r2, #136	@ 0x88
 800226e:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	2380      	movs	r3, #128	@ 0x80
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	4013      	ands	r3, r2
 800227a:	d017      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002280:	2380      	movs	r3, #128	@ 0x80
 8002282:	049b      	lsls	r3, r3, #18
 8002284:	429a      	cmp	r2, r3
 8002286:	d106      	bne.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8002288:	4b0c      	ldr	r3, [pc, #48]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	4b0b      	ldr	r3, [pc, #44]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800228e:	2180      	movs	r1, #128	@ 0x80
 8002290:	0449      	lsls	r1, r1, #17
 8002292:	430a      	orrs	r2, r1
 8002294:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002296:	4a09      	ldr	r2, [pc, #36]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002298:	2388      	movs	r3, #136	@ 0x88
 800229a:	58d3      	ldr	r3, [r2, r3]
 800229c:	4a11      	ldr	r2, [pc, #68]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 800229e:	401a      	ands	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a4:	4905      	ldr	r1, [pc, #20]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	2288      	movs	r2, #136	@ 0x88
 80022aa:	508b      	str	r3, [r1, r2]

  }

  return status;
 80022ac:	2312      	movs	r3, #18
 80022ae:	18fb      	adds	r3, r7, r3
 80022b0:	781b      	ldrb	r3, [r3, #0]
}
 80022b2:	0018      	movs	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	b006      	add	sp, #24
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	46c0      	nop			@ (mov r8, r8)
 80022bc:	40021000 	.word	0x40021000
 80022c0:	efffffff 	.word	0xefffffff
 80022c4:	fffff3ff 	.word	0xfffff3ff
 80022c8:	fffffcff 	.word	0xfffffcff
 80022cc:	ffffcfff 	.word	0xffffcfff
 80022d0:	fffcffff 	.word	0xfffcffff
 80022d4:	fff3ffff 	.word	0xfff3ffff
 80022d8:	ffcfffff 	.word	0xffcfffff
 80022dc:	cfffffff 	.word	0xcfffffff
 80022e0:	f3ffffff 	.word	0xf3ffffff
 80022e4:	feffffff 	.word	0xfeffffff

080022e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b089      	sub	sp, #36	@ 0x24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	2380      	movs	r3, #128	@ 0x80
 80022f8:	021b      	lsls	r3, r3, #8
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d154      	bne.n	80023a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80022fe:	4ad0      	ldr	r2, [pc, #832]	@ (8002640 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002300:	2390      	movs	r3, #144	@ 0x90
 8002302:	58d2      	ldr	r2, [r2, r3]
 8002304:	23c0      	movs	r3, #192	@ 0xc0
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4013      	ands	r3, r2
 800230a:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	23c0      	movs	r3, #192	@ 0xc0
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	429a      	cmp	r2, r3
 8002314:	d039      	beq.n	800238a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	23c0      	movs	r3, #192	@ 0xc0
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	429a      	cmp	r2, r3
 800231e:	d901      	bls.n	8002324 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8002320:	f000 fbf3 	bl	8002b0a <HAL_RCCEx_GetPeriphCLKFreq+0x822>
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	2380      	movs	r3, #128	@ 0x80
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	429a      	cmp	r2, r3
 800232c:	d006      	beq.n	800233c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	2380      	movs	r3, #128	@ 0x80
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	429a      	cmp	r2, r3
 8002336:	d00f      	beq.n	8002358 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8002338:	f000 fbe7 	bl	8002b0a <HAL_RCCEx_GetPeriphCLKFreq+0x822>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800233c:	4ac0      	ldr	r2, [pc, #768]	@ (8002640 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 800233e:	2390      	movs	r3, #144	@ 0x90
 8002340:	58d3      	ldr	r3, [r2, r3]
 8002342:	2202      	movs	r2, #2
 8002344:	4013      	ands	r3, r2
 8002346:	2b02      	cmp	r3, #2
 8002348:	d001      	beq.n	800234e <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 800234a:	f000 fbe0 	bl	8002b0e <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = LSE_VALUE;
 800234e:	2380      	movs	r3, #128	@ 0x80
 8002350:	021b      	lsls	r3, r3, #8
 8002352:	61fb      	str	r3, [r7, #28]
        break;
 8002354:	f000 fbdb 	bl	8002b0e <HAL_RCCEx_GetPeriphCLKFreq+0x826>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002358:	4ab9      	ldr	r2, [pc, #740]	@ (8002640 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 800235a:	2394      	movs	r3, #148	@ 0x94
 800235c:	58d3      	ldr	r3, [r2, r3]
 800235e:	2202      	movs	r2, #2
 8002360:	4013      	ands	r3, r2
 8002362:	2b02      	cmp	r3, #2
 8002364:	d001      	beq.n	800236a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8002366:	f000 fbd4 	bl	8002b12 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800236a:	4ab5      	ldr	r2, [pc, #724]	@ (8002640 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 800236c:	2394      	movs	r3, #148	@ 0x94
 800236e:	58d3      	ldr	r3, [r2, r3]
 8002370:	2204      	movs	r2, #4
 8002372:	4013      	ands	r3, r2
 8002374:	2b04      	cmp	r3, #4
 8002376:	d103      	bne.n	8002380 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 8002378:	23fa      	movs	r3, #250	@ 0xfa
 800237a:	61fb      	str	r3, [r7, #28]
        break;
 800237c:	f000 fbc9 	bl	8002b12 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
            frequency = LSI_VALUE;
 8002380:	23fa      	movs	r3, #250	@ 0xfa
 8002382:	01db      	lsls	r3, r3, #7
 8002384:	61fb      	str	r3, [r7, #28]
        break;
 8002386:	f000 fbc4 	bl	8002b12 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800238a:	4bad      	ldr	r3, [pc, #692]	@ (8002640 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	2380      	movs	r3, #128	@ 0x80
 8002390:	029b      	lsls	r3, r3, #10
 8002392:	401a      	ands	r2, r3
 8002394:	2380      	movs	r3, #128	@ 0x80
 8002396:	029b      	lsls	r3, r3, #10
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 800239c:	f000 fbbb 	bl	8002b16 <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
          frequency = HSE_VALUE / 32U;
 80023a0:	4ba8      	ldr	r3, [pc, #672]	@ (8002644 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 80023a2:	61fb      	str	r3, [r7, #28]
        break;
 80023a4:	f000 fbb7 	bl	8002b16 <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	2380      	movs	r3, #128	@ 0x80
 80023ac:	029b      	lsls	r3, r3, #10
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d100      	bne.n	80023b4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80023b2:	e0f7      	b.n	80025a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	2380      	movs	r3, #128	@ 0x80
 80023b8:	029b      	lsls	r3, r3, #10
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d901      	bls.n	80023c2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80023be:	f000 fbac 	bl	8002b1a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	2380      	movs	r3, #128	@ 0x80
 80023c6:	025b      	lsls	r3, r3, #9
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d100      	bne.n	80023ce <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80023cc:	e0ea      	b.n	80025a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	2380      	movs	r3, #128	@ 0x80
 80023d2:	025b      	lsls	r3, r3, #9
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d901      	bls.n	80023dc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80023d8:	f000 fb9f 	bl	8002b1a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	2380      	movs	r3, #128	@ 0x80
 80023e0:	01db      	lsls	r3, r3, #7
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d100      	bne.n	80023e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80023e6:	e180      	b.n	80026ea <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	2380      	movs	r3, #128	@ 0x80
 80023ec:	01db      	lsls	r3, r3, #7
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d901      	bls.n	80023f6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80023f2:	f000 fb92 	bl	8002b1a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	2380      	movs	r3, #128	@ 0x80
 80023fa:	019b      	lsls	r3, r3, #6
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d101      	bne.n	8002404 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8002400:	f000 fb29 	bl	8002a56 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	2380      	movs	r3, #128	@ 0x80
 8002408:	019b      	lsls	r3, r3, #6
 800240a:	429a      	cmp	r2, r3
 800240c:	d901      	bls.n	8002412 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800240e:	f000 fb84 	bl	8002b1a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	2380      	movs	r3, #128	@ 0x80
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	429a      	cmp	r2, r3
 800241a:	d100      	bne.n	800241e <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 800241c:	e2f0      	b.n	8002a00 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	2380      	movs	r3, #128	@ 0x80
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	429a      	cmp	r2, r3
 8002426:	d901      	bls.n	800242c <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8002428:	f000 fb77 	bl	8002b1a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	2380      	movs	r3, #128	@ 0x80
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	429a      	cmp	r2, r3
 8002434:	d100      	bne.n	8002438 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8002436:	e2b8      	b.n	80029aa <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	2380      	movs	r3, #128	@ 0x80
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	429a      	cmp	r2, r3
 8002440:	d901      	bls.n	8002446 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002442:	f000 fb6a 	bl	8002b1a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	2380      	movs	r3, #128	@ 0x80
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	429a      	cmp	r2, r3
 800244e:	d100      	bne.n	8002452 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
 8002450:	e249      	b.n	80028e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	2380      	movs	r3, #128	@ 0x80
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	429a      	cmp	r2, r3
 800245a:	d901      	bls.n	8002460 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
 800245c:	f000 fb5d 	bl	8002b1a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b80      	cmp	r3, #128	@ 0x80
 8002464:	d100      	bne.n	8002468 <HAL_RCCEx_GetPeriphCLKFreq+0x180>
 8002466:	e1e1      	b.n	800282c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b80      	cmp	r3, #128	@ 0x80
 800246c:	d901      	bls.n	8002472 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 800246e:	f000 fb54 	bl	8002b1a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b20      	cmp	r3, #32
 8002476:	d80f      	bhi.n	8002498 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800247e:	f000 fb4c 	bl	8002b1a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b20      	cmp	r3, #32
 8002486:	d901      	bls.n	800248c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8002488:	f000 fb47 	bl	8002b1a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	009a      	lsls	r2, r3, #2
 8002490:	4b6d      	ldr	r3, [pc, #436]	@ (8002648 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8002492:	18d3      	adds	r3, r2, r3
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	469f      	mov	pc, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b40      	cmp	r3, #64	@ 0x40
 800249c:	d100      	bne.n	80024a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 800249e:	e191      	b.n	80027c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>
            break;
        }
        break;
      }
      default:
        break;
 80024a0:	f000 fb3b 	bl	8002b1a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80024a4:	4a66      	ldr	r2, [pc, #408]	@ (8002640 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80024a6:	2388      	movs	r3, #136	@ 0x88
 80024a8:	58d3      	ldr	r3, [r2, r3]
 80024aa:	2203      	movs	r2, #3
 80024ac:	4013      	ands	r3, r2
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	d025      	beq.n	8002502 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d82d      	bhi.n	8002518 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d013      	beq.n	80024ea <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d827      	bhi.n	8002518 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d005      	beq.n	80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
            break;
 80024d4:	e020      	b.n	8002518 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = HAL_RCC_GetPCLK1Freq();
 80024d6:	f7ff fc9f 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 80024da:	0003      	movs	r3, r0
 80024dc:	61fb      	str	r3, [r7, #28]
            break;
 80024de:	e020      	b.n	8002522 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
            frequency = HAL_RCC_GetSysClockFreq();
 80024e0:	f7ff fbf4 	bl	8001ccc <HAL_RCC_GetSysClockFreq>
 80024e4:	0003      	movs	r3, r0
 80024e6:	61fb      	str	r3, [r7, #28]
            break;
 80024e8:	e01b      	b.n	8002522 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80024ea:	4b55      	ldr	r3, [pc, #340]	@ (8002640 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	2380      	movs	r3, #128	@ 0x80
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	401a      	ands	r2, r3
 80024f4:	2380      	movs	r3, #128	@ 0x80
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d10f      	bne.n	800251c <HAL_RCCEx_GetPeriphCLKFreq+0x234>
              frequency = HSI_VALUE;
 80024fc:	4b53      	ldr	r3, [pc, #332]	@ (800264c <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80024fe:	61fb      	str	r3, [r7, #28]
            break;
 8002500:	e00c      	b.n	800251c <HAL_RCCEx_GetPeriphCLKFreq+0x234>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002502:	4a4f      	ldr	r2, [pc, #316]	@ (8002640 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002504:	2390      	movs	r3, #144	@ 0x90
 8002506:	58d3      	ldr	r3, [r2, r3]
 8002508:	2202      	movs	r2, #2
 800250a:	4013      	ands	r3, r2
 800250c:	2b02      	cmp	r3, #2
 800250e:	d107      	bne.n	8002520 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
              frequency = LSE_VALUE;
 8002510:	2380      	movs	r3, #128	@ 0x80
 8002512:	021b      	lsls	r3, r3, #8
 8002514:	61fb      	str	r3, [r7, #28]
            break;
 8002516:	e003      	b.n	8002520 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
            break;
 8002518:	46c0      	nop			@ (mov r8, r8)
 800251a:	e2ff      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 800251c:	46c0      	nop			@ (mov r8, r8)
 800251e:	e2fd      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002520:	46c0      	nop			@ (mov r8, r8)
        break;
 8002522:	e2fb      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002524:	4a46      	ldr	r2, [pc, #280]	@ (8002640 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002526:	2388      	movs	r3, #136	@ 0x88
 8002528:	58d3      	ldr	r3, [r2, r3]
 800252a:	220c      	movs	r2, #12
 800252c:	4013      	ands	r3, r2
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2b0c      	cmp	r3, #12
 8002534:	d025      	beq.n	8002582 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2b0c      	cmp	r3, #12
 800253a:	d82d      	bhi.n	8002598 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	2b08      	cmp	r3, #8
 8002540:	d013      	beq.n	800256a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b08      	cmp	r3, #8
 8002546:	d827      	bhi.n	8002598 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	2b04      	cmp	r3, #4
 8002552:	d005      	beq.n	8002560 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            break;
 8002554:	e020      	b.n	8002598 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002556:	f7ff fc5f 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 800255a:	0003      	movs	r3, r0
 800255c:	61fb      	str	r3, [r7, #28]
            break;
 800255e:	e020      	b.n	80025a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HAL_RCC_GetSysClockFreq();
 8002560:	f7ff fbb4 	bl	8001ccc <HAL_RCC_GetSysClockFreq>
 8002564:	0003      	movs	r3, r0
 8002566:	61fb      	str	r3, [r7, #28]
            break;
 8002568:	e01b      	b.n	80025a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800256a:	4b35      	ldr	r3, [pc, #212]	@ (8002640 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	2380      	movs	r3, #128	@ 0x80
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	401a      	ands	r2, r3
 8002574:	2380      	movs	r3, #128	@ 0x80
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	429a      	cmp	r2, r3
 800257a:	d10f      	bne.n	800259c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
              frequency = HSI_VALUE;
 800257c:	4b33      	ldr	r3, [pc, #204]	@ (800264c <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800257e:	61fb      	str	r3, [r7, #28]
            break;
 8002580:	e00c      	b.n	800259c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002582:	4a2f      	ldr	r2, [pc, #188]	@ (8002640 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002584:	2390      	movs	r3, #144	@ 0x90
 8002586:	58d3      	ldr	r3, [r2, r3]
 8002588:	2202      	movs	r2, #2
 800258a:	4013      	ands	r3, r2
 800258c:	2b02      	cmp	r3, #2
 800258e:	d107      	bne.n	80025a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
              frequency = LSE_VALUE;
 8002590:	2380      	movs	r3, #128	@ 0x80
 8002592:	021b      	lsls	r3, r3, #8
 8002594:	61fb      	str	r3, [r7, #28]
            break;
 8002596:	e003      	b.n	80025a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 8002598:	46c0      	nop			@ (mov r8, r8)
 800259a:	e2bf      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 800259c:	46c0      	nop			@ (mov r8, r8)
 800259e:	e2bd      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80025a0:	46c0      	nop			@ (mov r8, r8)
        break;
 80025a2:	e2bb      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        frequency = HAL_RCC_GetPCLK1Freq();
 80025a4:	f7ff fc38 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 80025a8:	0003      	movs	r3, r0
 80025aa:	61fb      	str	r3, [r7, #28]
        break;
 80025ac:	e2b6      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80025ae:	4a24      	ldr	r2, [pc, #144]	@ (8002640 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80025b0:	2388      	movs	r3, #136	@ 0x88
 80025b2:	58d2      	ldr	r2, [r2, r3]
 80025b4:	23c0      	movs	r3, #192	@ 0xc0
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	4013      	ands	r3, r2
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	23c0      	movs	r3, #192	@ 0xc0
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d02d      	beq.n	8002622 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	23c0      	movs	r3, #192	@ 0xc0
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d833      	bhi.n	8002638 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	2380      	movs	r3, #128	@ 0x80
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d017      	beq.n	800260a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	2380      	movs	r3, #128	@ 0x80
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d829      	bhi.n	8002638 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	2380      	movs	r3, #128	@ 0x80
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d005      	beq.n	8002600 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
            break;
 80025f4:	e020      	b.n	8002638 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
            frequency = HAL_RCC_GetPCLK1Freq();
 80025f6:	f7ff fc0f 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 80025fa:	0003      	movs	r3, r0
 80025fc:	61fb      	str	r3, [r7, #28]
            break;
 80025fe:	e028      	b.n	8002652 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HAL_RCC_GetSysClockFreq();
 8002600:	f7ff fb64 	bl	8001ccc <HAL_RCC_GetSysClockFreq>
 8002604:	0003      	movs	r3, r0
 8002606:	61fb      	str	r3, [r7, #28]
            break;
 8002608:	e023      	b.n	8002652 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800260a:	4b0d      	ldr	r3, [pc, #52]	@ (8002640 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	2380      	movs	r3, #128	@ 0x80
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	401a      	ands	r2, r3
 8002614:	2380      	movs	r3, #128	@ 0x80
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	429a      	cmp	r2, r3
 800261a:	d10f      	bne.n	800263c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
              frequency = HSI_VALUE;
 800261c:	4b0b      	ldr	r3, [pc, #44]	@ (800264c <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800261e:	61fb      	str	r3, [r7, #28]
            break;
 8002620:	e00c      	b.n	800263c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002622:	4a07      	ldr	r2, [pc, #28]	@ (8002640 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002624:	2390      	movs	r3, #144	@ 0x90
 8002626:	58d3      	ldr	r3, [r2, r3]
 8002628:	2202      	movs	r2, #2
 800262a:	4013      	ands	r3, r2
 800262c:	2b02      	cmp	r3, #2
 800262e:	d10f      	bne.n	8002650 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
              frequency = LSE_VALUE;
 8002630:	2380      	movs	r3, #128	@ 0x80
 8002632:	021b      	lsls	r3, r3, #8
 8002634:	61fb      	str	r3, [r7, #28]
            break;
 8002636:	e00b      	b.n	8002650 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
            break;
 8002638:	46c0      	nop			@ (mov r8, r8)
 800263a:	e26f      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 800263c:	46c0      	nop			@ (mov r8, r8)
 800263e:	e26d      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8002640:	40021000 	.word	0x40021000
 8002644:	0001e848 	.word	0x0001e848
 8002648:	08003aec 	.word	0x08003aec
 800264c:	00f42400 	.word	0x00f42400
            break;
 8002650:	46c0      	nop			@ (mov r8, r8)
        break;
 8002652:	e263      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8002654:	4ac1      	ldr	r2, [pc, #772]	@ (800295c <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002656:	2388      	movs	r3, #136	@ 0x88
 8002658:	58d2      	ldr	r2, [r2, r3]
 800265a:	23c0      	movs	r3, #192	@ 0xc0
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4013      	ands	r3, r2
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	23c0      	movs	r3, #192	@ 0xc0
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	429a      	cmp	r2, r3
 800266a:	d02d      	beq.n	80026c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	23c0      	movs	r3, #192	@ 0xc0
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	429a      	cmp	r2, r3
 8002674:	d833      	bhi.n	80026de <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	2380      	movs	r3, #128	@ 0x80
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	429a      	cmp	r2, r3
 800267e:	d017      	beq.n	80026b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	2380      	movs	r3, #128	@ 0x80
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	429a      	cmp	r2, r3
 8002688:	d829      	bhi.n	80026de <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	2380      	movs	r3, #128	@ 0x80
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	429a      	cmp	r2, r3
 8002698:	d005      	beq.n	80026a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
            break;
 800269a:	e020      	b.n	80026de <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
            frequency = HAL_RCC_GetPCLK1Freq();
 800269c:	f7ff fbbc 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 80026a0:	0003      	movs	r3, r0
 80026a2:	61fb      	str	r3, [r7, #28]
            break;
 80026a4:	e020      	b.n	80026e8 <HAL_RCCEx_GetPeriphCLKFreq+0x400>
            frequency = HAL_RCC_GetSysClockFreq();
 80026a6:	f7ff fb11 	bl	8001ccc <HAL_RCC_GetSysClockFreq>
 80026aa:	0003      	movs	r3, r0
 80026ac:	61fb      	str	r3, [r7, #28]
            break;
 80026ae:	e01b      	b.n	80026e8 <HAL_RCCEx_GetPeriphCLKFreq+0x400>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80026b0:	4baa      	ldr	r3, [pc, #680]	@ (800295c <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	2380      	movs	r3, #128	@ 0x80
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	401a      	ands	r2, r3
 80026ba:	2380      	movs	r3, #128	@ 0x80
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	429a      	cmp	r2, r3
 80026c0:	d10f      	bne.n	80026e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
              frequency = HSI_VALUE;
 80026c2:	4ba7      	ldr	r3, [pc, #668]	@ (8002960 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 80026c4:	61fb      	str	r3, [r7, #28]
            break;
 80026c6:	e00c      	b.n	80026e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80026c8:	4aa4      	ldr	r2, [pc, #656]	@ (800295c <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 80026ca:	2390      	movs	r3, #144	@ 0x90
 80026cc:	58d3      	ldr	r3, [r2, r3]
 80026ce:	2202      	movs	r2, #2
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d107      	bne.n	80026e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
              frequency = LSE_VALUE;
 80026d6:	2380      	movs	r3, #128	@ 0x80
 80026d8:	021b      	lsls	r3, r3, #8
 80026da:	61fb      	str	r3, [r7, #28]
            break;
 80026dc:	e003      	b.n	80026e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
            break;
 80026de:	46c0      	nop			@ (mov r8, r8)
 80026e0:	e21c      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80026e2:	46c0      	nop			@ (mov r8, r8)
 80026e4:	e21a      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80026e6:	46c0      	nop			@ (mov r8, r8)
        break;
 80026e8:	e218      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80026ea:	4a9c      	ldr	r2, [pc, #624]	@ (800295c <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 80026ec:	2388      	movs	r3, #136	@ 0x88
 80026ee:	58d2      	ldr	r2, [r2, r3]
 80026f0:	23c0      	movs	r3, #192	@ 0xc0
 80026f2:	059b      	lsls	r3, r3, #22
 80026f4:	4013      	ands	r3, r2
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	2380      	movs	r3, #128	@ 0x80
 80026fc:	059b      	lsls	r3, r3, #22
 80026fe:	429a      	cmp	r2, r3
 8002700:	d012      	beq.n	8002728 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	2380      	movs	r3, #128	@ 0x80
 8002706:	059b      	lsls	r3, r3, #22
 8002708:	429a      	cmp	r2, r3
 800270a:	d825      	bhi.n	8002758 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	2380      	movs	r3, #128	@ 0x80
 8002716:	055b      	lsls	r3, r3, #21
 8002718:	429a      	cmp	r2, r3
 800271a:	d014      	beq.n	8002746 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            break;
 800271c:	e01c      	b.n	8002758 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HAL_RCC_GetSysClockFreq();
 800271e:	f7ff fad5 	bl	8001ccc <HAL_RCC_GetSysClockFreq>
 8002722:	0003      	movs	r3, r0
 8002724:	61fb      	str	r3, [r7, #28]
            break;
 8002726:	e018      	b.n	800275a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002728:	4b8c      	ldr	r3, [pc, #560]	@ (800295c <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	2380      	movs	r3, #128	@ 0x80
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	401a      	ands	r2, r3
 8002732:	2380      	movs	r3, #128	@ 0x80
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	429a      	cmp	r2, r3
 8002738:	d102      	bne.n	8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
              frequency = HSI_VALUE;
 800273a:	4b89      	ldr	r3, [pc, #548]	@ (8002960 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 800273c:	61fb      	str	r3, [r7, #28]
            break;
 800273e:	e00c      	b.n	800275a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              frequency = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	61fb      	str	r3, [r7, #28]
            break;
 8002744:	e009      	b.n	800275a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8002746:	2408      	movs	r4, #8
 8002748:	193b      	adds	r3, r7, r4
 800274a:	0018      	movs	r0, r3
 800274c:	f000 f9f4 	bl	8002b38 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 8002750:	193b      	adds	r3, r7, r4
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	61fb      	str	r3, [r7, #28]
            break;
 8002756:	e000      	b.n	800275a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            break;
 8002758:	46c0      	nop			@ (mov r8, r8)
        break;
 800275a:	e1df      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800275c:	4a7f      	ldr	r2, [pc, #508]	@ (800295c <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 800275e:	2388      	movs	r3, #136	@ 0x88
 8002760:	58d2      	ldr	r2, [r2, r3]
 8002762:	23c0      	movs	r3, #192	@ 0xc0
 8002764:	019b      	lsls	r3, r3, #6
 8002766:	4013      	ands	r3, r2
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	2380      	movs	r3, #128	@ 0x80
 800276e:	019b      	lsls	r3, r3, #6
 8002770:	429a      	cmp	r2, r3
 8002772:	d017      	beq.n	80027a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	2380      	movs	r3, #128	@ 0x80
 8002778:	019b      	lsls	r3, r3, #6
 800277a:	429a      	cmp	r2, r3
 800277c:	d81e      	bhi.n	80027bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	2380      	movs	r3, #128	@ 0x80
 8002788:	015b      	lsls	r3, r3, #5
 800278a:	429a      	cmp	r2, r3
 800278c:	d005      	beq.n	800279a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
            break;
 800278e:	e015      	b.n	80027bc <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002790:	f7ff fb42 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 8002794:	0003      	movs	r3, r0
 8002796:	61fb      	str	r3, [r7, #28]
            break;
 8002798:	e013      	b.n	80027c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
            frequency = HAL_RCC_GetSysClockFreq();
 800279a:	f7ff fa97 	bl	8001ccc <HAL_RCC_GetSysClockFreq>
 800279e:	0003      	movs	r3, r0
 80027a0:	61fb      	str	r3, [r7, #28]
            break;
 80027a2:	e00e      	b.n	80027c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80027a4:	4b6d      	ldr	r3, [pc, #436]	@ (800295c <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	2380      	movs	r3, #128	@ 0x80
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	401a      	ands	r2, r3
 80027ae:	2380      	movs	r3, #128	@ 0x80
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d104      	bne.n	80027c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
              frequency = HSI_VALUE;
 80027b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002960 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 80027b8:	61fb      	str	r3, [r7, #28]
            break;
 80027ba:	e001      	b.n	80027c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
            break;
 80027bc:	46c0      	nop			@ (mov r8, r8)
 80027be:	e1ad      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80027c0:	46c0      	nop			@ (mov r8, r8)
        break;
 80027c2:	e1ab      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80027c4:	4a65      	ldr	r2, [pc, #404]	@ (800295c <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 80027c6:	2388      	movs	r3, #136	@ 0x88
 80027c8:	58d2      	ldr	r2, [r2, r3]
 80027ca:	23c0      	movs	r3, #192	@ 0xc0
 80027cc:	029b      	lsls	r3, r3, #10
 80027ce:	4013      	ands	r3, r2
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	2380      	movs	r3, #128	@ 0x80
 80027d6:	029b      	lsls	r3, r3, #10
 80027d8:	429a      	cmp	r2, r3
 80027da:	d017      	beq.n	800280c <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	2380      	movs	r3, #128	@ 0x80
 80027e0:	029b      	lsls	r3, r3, #10
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d81e      	bhi.n	8002824 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	2380      	movs	r3, #128	@ 0x80
 80027f0:	025b      	lsls	r3, r3, #9
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d005      	beq.n	8002802 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            break;
 80027f6:	e015      	b.n	8002824 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
            frequency = HAL_RCC_GetPCLK1Freq();
 80027f8:	f7ff fb0e 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 80027fc:	0003      	movs	r3, r0
 80027fe:	61fb      	str	r3, [r7, #28]
            break;
 8002800:	e013      	b.n	800282a <HAL_RCCEx_GetPeriphCLKFreq+0x542>
            frequency = HAL_RCC_GetSysClockFreq();
 8002802:	f7ff fa63 	bl	8001ccc <HAL_RCC_GetSysClockFreq>
 8002806:	0003      	movs	r3, r0
 8002808:	61fb      	str	r3, [r7, #28]
            break;
 800280a:	e00e      	b.n	800282a <HAL_RCCEx_GetPeriphCLKFreq+0x542>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800280c:	4b53      	ldr	r3, [pc, #332]	@ (800295c <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	2380      	movs	r3, #128	@ 0x80
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	401a      	ands	r2, r3
 8002816:	2380      	movs	r3, #128	@ 0x80
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	429a      	cmp	r2, r3
 800281c:	d104      	bne.n	8002828 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
              frequency = HSI_VALUE;
 800281e:	4b50      	ldr	r3, [pc, #320]	@ (8002960 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8002820:	61fb      	str	r3, [r7, #28]
            break;
 8002822:	e001      	b.n	8002828 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
            break;
 8002824:	46c0      	nop			@ (mov r8, r8)
 8002826:	e179      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002828:	46c0      	nop			@ (mov r8, r8)
        break;
 800282a:	e177      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800282c:	4a4b      	ldr	r2, [pc, #300]	@ (800295c <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 800282e:	2388      	movs	r3, #136	@ 0x88
 8002830:	58d2      	ldr	r2, [r2, r3]
 8002832:	23c0      	movs	r3, #192	@ 0xc0
 8002834:	031b      	lsls	r3, r3, #12
 8002836:	4013      	ands	r3, r2
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	23c0      	movs	r3, #192	@ 0xc0
 800283e:	031b      	lsls	r3, r3, #12
 8002840:	429a      	cmp	r2, r3
 8002842:	d03d      	beq.n	80028c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	23c0      	movs	r3, #192	@ 0xc0
 8002848:	031b      	lsls	r3, r3, #12
 800284a:	429a      	cmp	r2, r3
 800284c:	d843      	bhi.n	80028d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	2380      	movs	r3, #128	@ 0x80
 8002852:	031b      	lsls	r3, r3, #12
 8002854:	429a      	cmp	r2, r3
 8002856:	d027      	beq.n	80028a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	2380      	movs	r3, #128	@ 0x80
 800285c:	031b      	lsls	r3, r3, #12
 800285e:	429a      	cmp	r2, r3
 8002860:	d839      	bhi.n	80028d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	2380      	movs	r3, #128	@ 0x80
 800286c:	02db      	lsls	r3, r3, #11
 800286e:	429a      	cmp	r2, r3
 8002870:	d005      	beq.n	800287e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            break;
 8002872:	e030      	b.n	80028d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002874:	f7ff fad0 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 8002878:	0003      	movs	r3, r0
 800287a:	61fb      	str	r3, [r7, #28]
            break;
 800287c:	e032      	b.n	80028e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800287e:	4a37      	ldr	r2, [pc, #220]	@ (800295c <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002880:	2394      	movs	r3, #148	@ 0x94
 8002882:	58d3      	ldr	r3, [r2, r3]
 8002884:	2202      	movs	r2, #2
 8002886:	4013      	ands	r3, r2
 8002888:	2b02      	cmp	r3, #2
 800288a:	d126      	bne.n	80028da <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800288c:	4a33      	ldr	r2, [pc, #204]	@ (800295c <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 800288e:	2394      	movs	r3, #148	@ 0x94
 8002890:	58d3      	ldr	r3, [r2, r3]
 8002892:	2204      	movs	r2, #4
 8002894:	4013      	ands	r3, r2
 8002896:	2b04      	cmp	r3, #4
 8002898:	d102      	bne.n	80028a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
                frequency = LSI_VALUE / 128U;
 800289a:	23fa      	movs	r3, #250	@ 0xfa
 800289c:	61fb      	str	r3, [r7, #28]
            break;
 800289e:	e01c      	b.n	80028da <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
                frequency = LSI_VALUE;
 80028a0:	23fa      	movs	r3, #250	@ 0xfa
 80028a2:	01db      	lsls	r3, r3, #7
 80028a4:	61fb      	str	r3, [r7, #28]
            break;
 80028a6:	e018      	b.n	80028da <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80028a8:	4b2c      	ldr	r3, [pc, #176]	@ (800295c <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	2380      	movs	r3, #128	@ 0x80
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	401a      	ands	r2, r3
 80028b2:	2380      	movs	r3, #128	@ 0x80
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d111      	bne.n	80028de <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
              frequency = HSI_VALUE;
 80028ba:	4b29      	ldr	r3, [pc, #164]	@ (8002960 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 80028bc:	61fb      	str	r3, [r7, #28]
            break;
 80028be:	e00e      	b.n	80028de <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80028c0:	4a26      	ldr	r2, [pc, #152]	@ (800295c <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 80028c2:	2390      	movs	r3, #144	@ 0x90
 80028c4:	58d3      	ldr	r3, [r2, r3]
 80028c6:	2202      	movs	r2, #2
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d109      	bne.n	80028e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
              frequency = LSE_VALUE;
 80028ce:	2380      	movs	r3, #128	@ 0x80
 80028d0:	021b      	lsls	r3, r3, #8
 80028d2:	61fb      	str	r3, [r7, #28]
            break;
 80028d4:	e005      	b.n	80028e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
            break;
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	e120      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80028da:	46c0      	nop			@ (mov r8, r8)
 80028dc:	e11e      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80028de:	46c0      	nop			@ (mov r8, r8)
 80028e0:	e11c      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80028e2:	46c0      	nop			@ (mov r8, r8)
        break;
 80028e4:	e11a      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80028e6:	4a1d      	ldr	r2, [pc, #116]	@ (800295c <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 80028e8:	2388      	movs	r3, #136	@ 0x88
 80028ea:	58d2      	ldr	r2, [r2, r3]
 80028ec:	23c0      	movs	r3, #192	@ 0xc0
 80028ee:	039b      	lsls	r3, r3, #14
 80028f0:	4013      	ands	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	23c0      	movs	r3, #192	@ 0xc0
 80028f8:	039b      	lsls	r3, r3, #14
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d042      	beq.n	8002984 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	23c0      	movs	r3, #192	@ 0xc0
 8002902:	039b      	lsls	r3, r3, #14
 8002904:	429a      	cmp	r2, r3
 8002906:	d848      	bhi.n	800299a <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	2380      	movs	r3, #128	@ 0x80
 800290c:	039b      	lsls	r3, r3, #14
 800290e:	429a      	cmp	r2, r3
 8002910:	d02c      	beq.n	800296c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	2380      	movs	r3, #128	@ 0x80
 8002916:	039b      	lsls	r3, r3, #14
 8002918:	429a      	cmp	r2, r3
 800291a:	d83e      	bhi.n	800299a <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	2380      	movs	r3, #128	@ 0x80
 8002926:	035b      	lsls	r3, r3, #13
 8002928:	429a      	cmp	r2, r3
 800292a:	d005      	beq.n	8002938 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
            break;
 800292c:	e035      	b.n	800299a <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
            frequency = HAL_RCC_GetPCLK1Freq();
 800292e:	f7ff fa73 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 8002932:	0003      	movs	r3, r0
 8002934:	61fb      	str	r3, [r7, #28]
            break;
 8002936:	e037      	b.n	80029a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002938:	4a08      	ldr	r2, [pc, #32]	@ (800295c <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 800293a:	2394      	movs	r3, #148	@ 0x94
 800293c:	58d3      	ldr	r3, [r2, r3]
 800293e:	2202      	movs	r2, #2
 8002940:	4013      	ands	r3, r2
 8002942:	2b02      	cmp	r3, #2
 8002944:	d12b      	bne.n	800299e <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8002946:	4a05      	ldr	r2, [pc, #20]	@ (800295c <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002948:	2394      	movs	r3, #148	@ 0x94
 800294a:	58d3      	ldr	r3, [r2, r3]
 800294c:	2204      	movs	r2, #4
 800294e:	4013      	ands	r3, r2
 8002950:	2b04      	cmp	r3, #4
 8002952:	d107      	bne.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
                frequency = LSI_VALUE / 128U;
 8002954:	23fa      	movs	r3, #250	@ 0xfa
 8002956:	61fb      	str	r3, [r7, #28]
            break;
 8002958:	e021      	b.n	800299e <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800295a:	46c0      	nop			@ (mov r8, r8)
 800295c:	40021000 	.word	0x40021000
 8002960:	00f42400 	.word	0x00f42400
                frequency = LSI_VALUE;
 8002964:	23fa      	movs	r3, #250	@ 0xfa
 8002966:	01db      	lsls	r3, r3, #7
 8002968:	61fb      	str	r3, [r7, #28]
            break;
 800296a:	e018      	b.n	800299e <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800296c:	4b6e      	ldr	r3, [pc, #440]	@ (8002b28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	2380      	movs	r3, #128	@ 0x80
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	401a      	ands	r2, r3
 8002976:	2380      	movs	r3, #128	@ 0x80
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	429a      	cmp	r2, r3
 800297c:	d111      	bne.n	80029a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
              frequency = HSI_VALUE;
 800297e:	4b6b      	ldr	r3, [pc, #428]	@ (8002b2c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8002980:	61fb      	str	r3, [r7, #28]
            break;
 8002982:	e00e      	b.n	80029a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002984:	4a68      	ldr	r2, [pc, #416]	@ (8002b28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002986:	2390      	movs	r3, #144	@ 0x90
 8002988:	58d3      	ldr	r3, [r2, r3]
 800298a:	2202      	movs	r2, #2
 800298c:	4013      	ands	r3, r2
 800298e:	2b02      	cmp	r3, #2
 8002990:	d109      	bne.n	80029a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
              frequency = LSE_VALUE;
 8002992:	2380      	movs	r3, #128	@ 0x80
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	61fb      	str	r3, [r7, #28]
            break;
 8002998:	e005      	b.n	80029a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
            break;
 800299a:	46c0      	nop			@ (mov r8, r8)
 800299c:	e0be      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 800299e:	46c0      	nop			@ (mov r8, r8)
 80029a0:	e0bc      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80029a2:	46c0      	nop			@ (mov r8, r8)
 80029a4:	e0ba      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80029a6:	46c0      	nop			@ (mov r8, r8)
        break;
 80029a8:	e0b8      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 80029aa:	4a5f      	ldr	r2, [pc, #380]	@ (8002b28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80029ac:	2388      	movs	r3, #136	@ 0x88
 80029ae:	58d2      	ldr	r2, [r2, r3]
 80029b0:	2380      	movs	r3, #128	@ 0x80
 80029b2:	045b      	lsls	r3, r3, #17
 80029b4:	4013      	ands	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d005      	beq.n	80029ca <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	2380      	movs	r3, #128	@ 0x80
 80029c2:	045b      	lsls	r3, r3, #17
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d011      	beq.n	80029ec <HAL_RCCEx_GetPeriphCLKFreq+0x704>
            break;
 80029c8:	e019      	b.n	80029fe <HAL_RCCEx_GetPeriphCLKFreq+0x716>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 80029ca:	4b57      	ldr	r3, [pc, #348]	@ (8002b28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	23e0      	movs	r3, #224	@ 0xe0
 80029d0:	01db      	lsls	r3, r3, #7
 80029d2:	4013      	ands	r3, r2
 80029d4:	d104      	bne.n	80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
              frequency = HAL_RCC_GetPCLK1Freq();
 80029d6:	f7ff fa1f 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 80029da:	0003      	movs	r3, r0
 80029dc:	61fb      	str	r3, [r7, #28]
            break;
 80029de:	e00e      	b.n	80029fe <HAL_RCCEx_GetPeriphCLKFreq+0x716>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 80029e0:	f7ff fa1a 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 80029e4:	0003      	movs	r3, r0
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	61fb      	str	r3, [r7, #28]
            break;
 80029ea:	e008      	b.n	80029fe <HAL_RCCEx_GetPeriphCLKFreq+0x716>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80029ec:	2408      	movs	r4, #8
 80029ee:	193b      	adds	r3, r7, r4
 80029f0:	0018      	movs	r0, r3
 80029f2:	f000 f8a1 	bl	8002b38 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80029f6:	193b      	adds	r3, r7, r4
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	61fb      	str	r3, [r7, #28]
            break;
 80029fc:	46c0      	nop			@ (mov r8, r8)
        break;
 80029fe:	e08d      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8002a00:	4a49      	ldr	r2, [pc, #292]	@ (8002b28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002a02:	2388      	movs	r3, #136	@ 0x88
 8002a04:	58d2      	ldr	r2, [r2, r3]
 8002a06:	2380      	movs	r3, #128	@ 0x80
 8002a08:	049b      	lsls	r3, r3, #18
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	2380      	movs	r3, #128	@ 0x80
 8002a18:	049b      	lsls	r3, r3, #18
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d011      	beq.n	8002a42 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
            break;
 8002a1e:	e019      	b.n	8002a54 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8002a20:	4b41      	ldr	r3, [pc, #260]	@ (8002b28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	23e0      	movs	r3, #224	@ 0xe0
 8002a26:	01db      	lsls	r3, r3, #7
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d104      	bne.n	8002a36 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
              frequency = HAL_RCC_GetPCLK1Freq();
 8002a2c:	f7ff f9f4 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 8002a30:	0003      	movs	r3, r0
 8002a32:	61fb      	str	r3, [r7, #28]
            break;
 8002a34:	e00e      	b.n	8002a54 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8002a36:	f7ff f9ef 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	61fb      	str	r3, [r7, #28]
            break;
 8002a40:	e008      	b.n	8002a54 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8002a42:	2408      	movs	r4, #8
 8002a44:	193b      	adds	r3, r7, r4
 8002a46:	0018      	movs	r0, r3
 8002a48:	f000 f876 	bl	8002b38 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8002a4c:	193b      	adds	r3, r7, r4
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	61fb      	str	r3, [r7, #28]
            break;
 8002a52:	46c0      	nop			@ (mov r8, r8)
        break;
 8002a54:	e062      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8002a56:	4a34      	ldr	r2, [pc, #208]	@ (8002b28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002a58:	2388      	movs	r3, #136	@ 0x88
 8002a5a:	58d2      	ldr	r2, [r2, r3]
 8002a5c:	23c0      	movs	r3, #192	@ 0xc0
 8002a5e:	051b      	lsls	r3, r3, #20
 8002a60:	4013      	ands	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	23c0      	movs	r3, #192	@ 0xc0
 8002a68:	051b      	lsls	r3, r3, #20
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d017      	beq.n	8002a9e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	23c0      	movs	r3, #192	@ 0xc0
 8002a72:	051b      	lsls	r3, r3, #20
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d844      	bhi.n	8002b02 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	2380      	movs	r3, #128	@ 0x80
 8002a7c:	051b      	lsls	r3, r3, #20
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d033      	beq.n	8002aea <HAL_RCCEx_GetPeriphCLKFreq+0x802>
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	051b      	lsls	r3, r3, #20
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d83a      	bhi.n	8002b02 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d034      	beq.n	8002afc <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	2380      	movs	r3, #128	@ 0x80
 8002a96:	04db      	lsls	r3, r3, #19
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d003      	beq.n	8002aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
            break;
 8002a9c:	e031      	b.n	8002b02 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
            frequency = HSI48_VALUE;
 8002a9e:	4b24      	ldr	r3, [pc, #144]	@ (8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8002aa0:	61fb      	str	r3, [r7, #28]
            break;
 8002aa2:	e031      	b.n	8002b08 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002aa4:	4b20      	ldr	r3, [pc, #128]	@ (8002b28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d12a      	bne.n	8002b06 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2208      	movs	r2, #8
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d005      	beq.n	8002ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8002aba:	4b1b      	ldr	r3, [pc, #108]	@ (8002b28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	091b      	lsrs	r3, r3, #4
 8002ac0:	220f      	movs	r2, #15
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	e005      	b.n	8002ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8002ac6:	4a18      	ldr	r2, [pc, #96]	@ (8002b28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002ac8:	2394      	movs	r3, #148	@ 0x94
 8002aca:	58d3      	ldr	r3, [r2, r3]
 8002acc:	0a1b      	lsrs	r3, r3, #8
 8002ace:	220f      	movs	r2, #15
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	2b0b      	cmp	r3, #11
 8002ad8:	d901      	bls.n	8002ade <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
                msirange = 11U;
 8002ada:	230b      	movs	r3, #11
 8002adc:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8002ade:	4b15      	ldr	r3, [pc, #84]	@ (8002b34 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	0092      	lsls	r2, r2, #2
 8002ae4:	58d3      	ldr	r3, [r2, r3]
 8002ae6:	61fb      	str	r3, [r7, #28]
            break;
 8002ae8:	e00d      	b.n	8002b06 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8002aea:	2408      	movs	r4, #8
 8002aec:	193b      	adds	r3, r7, r4
 8002aee:	0018      	movs	r0, r3
 8002af0:	f000 f822 	bl	8002b38 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8002af4:	193b      	adds	r3, r7, r4
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	61fb      	str	r3, [r7, #28]
            break;
 8002afa:	e005      	b.n	8002b08 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            frequency = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61fb      	str	r3, [r7, #28]
            break;
 8002b00:	e002      	b.n	8002b08 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            break;
 8002b02:	46c0      	nop			@ (mov r8, r8)
 8002b04:	e00a      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002b06:	46c0      	nop			@ (mov r8, r8)
        break;
 8002b08:	e008      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8002b0a:	46c0      	nop			@ (mov r8, r8)
 8002b0c:	e006      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8002b0e:	46c0      	nop			@ (mov r8, r8)
 8002b10:	e004      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8002b12:	46c0      	nop			@ (mov r8, r8)
 8002b14:	e002      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8002b16:	46c0      	nop			@ (mov r8, r8)
 8002b18:	e000      	b.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8002b1a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 8002b1c:	69fb      	ldr	r3, [r7, #28]
}
 8002b1e:	0018      	movs	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b009      	add	sp, #36	@ 0x24
 8002b24:	bd90      	pop	{r4, r7, pc}
 8002b26:	46c0      	nop			@ (mov r8, r8)
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	00f42400 	.word	0x00f42400
 8002b30:	02dc6c00 	.word	0x02dc6c00
 8002b34:	08003abc 	.word	0x08003abc

08002b38 <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b40:	4b58      	ldr	r3, [pc, #352]	@ (8002ca4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	0a1b      	lsrs	r3, r3, #8
 8002b46:	227f      	movs	r2, #127	@ 0x7f
 8002b48:	4013      	ands	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002b4c:	4b55      	ldr	r3, [pc, #340]	@ (8002ca4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2203      	movs	r2, #3
 8002b52:	4013      	ands	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8002b56:	4b53      	ldr	r3, [pc, #332]	@ (8002ca4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	2207      	movs	r2, #7
 8002b5e:	4013      	ands	r3, r2
 8002b60:	3301      	adds	r3, #1
 8002b62:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8002b64:	4b4f      	ldr	r3, [pc, #316]	@ (8002ca4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2208      	movs	r2, #8
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d005      	beq.n	8002b7a <HAL_RCCEx_GetPLLClockFreq+0x42>
 8002b6e:	4b4d      	ldr	r3, [pc, #308]	@ (8002ca4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	091b      	lsrs	r3, r3, #4
 8002b74:	220f      	movs	r2, #15
 8002b76:	4013      	ands	r3, r2
 8002b78:	e005      	b.n	8002b86 <HAL_RCCEx_GetPLLClockFreq+0x4e>
 8002b7a:	4a4a      	ldr	r2, [pc, #296]	@ (8002ca4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002b7c:	2394      	movs	r3, #148	@ 0x94
 8002b7e:	58d3      	ldr	r3, [r2, r3]
 8002b80:	0a1b      	lsrs	r3, r3, #8
 8002b82:	220f      	movs	r2, #15
 8002b84:	4013      	ands	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2b0b      	cmp	r3, #11
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 8002b8e:	230b      	movs	r3, #11
 8002b90:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d020      	beq.n	8002bda <HAL_RCCEx_GetPLLClockFreq+0xa2>
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	d827      	bhi.n	8002bee <HAL_RCCEx_GetPLLClockFreq+0xb6>
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d00c      	beq.n	8002bbe <HAL_RCCEx_GetPLLClockFreq+0x86>
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d121      	bne.n	8002bee <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 8002baa:	68f9      	ldr	r1, [r7, #12]
 8002bac:	483e      	ldr	r0, [pc, #248]	@ (8002ca8 <HAL_RCCEx_GetPLLClockFreq+0x170>)
 8002bae:	f7fd faab 	bl	8000108 <__udivsi3>
 8002bb2:	0003      	movs	r3, r0
 8002bb4:	001a      	movs	r2, r3
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	4353      	muls	r3, r2
 8002bba:	61fb      	str	r3, [r7, #28]
      break;
 8002bbc:	e025      	b.n	8002c0a <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8002bbe:	4b3b      	ldr	r3, [pc, #236]	@ (8002cac <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	0092      	lsls	r2, r2, #2
 8002bc4:	58d3      	ldr	r3, [r2, r3]
 8002bc6:	68f9      	ldr	r1, [r7, #12]
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7fd fa9d 	bl	8000108 <__udivsi3>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	001a      	movs	r2, r3
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	4353      	muls	r3, r2
 8002bd6:	61fb      	str	r3, [r7, #28]
      break;
 8002bd8:	e017      	b.n	8002c0a <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 8002bda:	68f9      	ldr	r1, [r7, #12]
 8002bdc:	4834      	ldr	r0, [pc, #208]	@ (8002cb0 <HAL_RCCEx_GetPLLClockFreq+0x178>)
 8002bde:	f7fd fa93 	bl	8000108 <__udivsi3>
 8002be2:	0003      	movs	r3, r0
 8002be4:	001a      	movs	r2, r3
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	4353      	muls	r3, r2
 8002bea:	61fb      	str	r3, [r7, #28]
      break;
 8002bec:	e00d      	b.n	8002c0a <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8002bee:	4b2f      	ldr	r3, [pc, #188]	@ (8002cac <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	0092      	lsls	r2, r2, #2
 8002bf4:	58d3      	ldr	r3, [r2, r3]
 8002bf6:	68f9      	ldr	r1, [r7, #12]
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f7fd fa85 	bl	8000108 <__udivsi3>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	001a      	movs	r2, r3
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	4353      	muls	r3, r2
 8002c06:	61fb      	str	r3, [r7, #28]
      break;
 8002c08:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 8002c0a:	4b26      	ldr	r3, [pc, #152]	@ (8002ca4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	2380      	movs	r3, #128	@ 0x80
 8002c10:	025b      	lsls	r3, r3, #9
 8002c12:	4013      	ands	r3, r2
 8002c14:	d00e      	beq.n	8002c34 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8002c16:	4b23      	ldr	r3, [pc, #140]	@ (8002ca4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002c18:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 8002c1a:	0c5b      	lsrs	r3, r3, #17
 8002c1c:	221f      	movs	r2, #31
 8002c1e:	4013      	ands	r3, r2
 8002c20:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8002c22:	0019      	movs	r1, r3
 8002c24:	69f8      	ldr	r0, [r7, #28]
 8002c26:	f7fd fa6f 	bl	8000108 <__udivsi3>
 8002c2a:	0003      	movs	r3, r0
 8002c2c:	001a      	movs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	e002      	b.n	8002c3a <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 8002c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	2380      	movs	r3, #128	@ 0x80
 8002c40:	045b      	lsls	r3, r3, #17
 8002c42:	4013      	ands	r3, r2
 8002c44:	d00e      	beq.n	8002c64 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8002c46:	4b17      	ldr	r3, [pc, #92]	@ (8002ca4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002c48:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 8002c4a:	0e5b      	lsrs	r3, r3, #25
 8002c4c:	2207      	movs	r2, #7
 8002c4e:	4013      	ands	r3, r2
 8002c50:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8002c52:	0019      	movs	r1, r3
 8002c54:	69f8      	ldr	r0, [r7, #28]
 8002c56:	f7fd fa57 	bl	8000108 <__udivsi3>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	001a      	movs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	e002      	b.n	8002c6a <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	2380      	movs	r3, #128	@ 0x80
 8002c70:	055b      	lsls	r3, r3, #21
 8002c72:	4013      	ands	r3, r2
 8002c74:	d00e      	beq.n	8002c94 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8002c76:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002c78:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 8002c7a:	0f5b      	lsrs	r3, r3, #29
 8002c7c:	2207      	movs	r2, #7
 8002c7e:	4013      	ands	r3, r2
 8002c80:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8002c82:	0019      	movs	r1, r3
 8002c84:	69f8      	ldr	r0, [r7, #28]
 8002c86:	f7fd fa3f 	bl	8000108 <__udivsi3>
 8002c8a:	0003      	movs	r3, r0
 8002c8c:	001a      	movs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 8002c92:	e002      	b.n	8002c9a <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
}
 8002c9a:	46c0      	nop			@ (mov r8, r8)
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b008      	add	sp, #32
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	46c0      	nop			@ (mov r8, r8)
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	00f42400 	.word	0x00f42400
 8002cac:	08003abc 	.word	0x08003abc
 8002cb0:	003d0900 	.word	0x003d0900

08002cb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e0a0      	b.n	8002e08 <HAL_SPI_Init+0x154>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	2382      	movs	r3, #130	@ 0x82
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d009      	beq.n	8002cee <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	61da      	str	r2, [r3, #28]
 8002ce0:	e005      	b.n	8002cee <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	225d      	movs	r2, #93	@ 0x5d
 8002cf8:	5c9b      	ldrb	r3, [r3, r2]
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d107      	bne.n	8002d10 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	225c      	movs	r2, #92	@ 0x5c
 8002d04:	2100      	movs	r1, #0
 8002d06:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f7fd fe22 	bl	8000954 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	225d      	movs	r2, #93	@ 0x5d
 8002d14:	2102      	movs	r1, #2
 8002d16:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2140      	movs	r1, #64	@ 0x40
 8002d24:	438a      	bics	r2, r1
 8002d26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	23e0      	movs	r3, #224	@ 0xe0
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d902      	bls.n	8002d3a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	e002      	b.n	8002d40 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d3a:	2380      	movs	r3, #128	@ 0x80
 8002d3c:	015b      	lsls	r3, r3, #5
 8002d3e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	23f0      	movs	r3, #240	@ 0xf0
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d008      	beq.n	8002d5e <HAL_SPI_Init+0xaa>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	23e0      	movs	r3, #224	@ 0xe0
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d002      	beq.n	8002d5e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	2382      	movs	r3, #130	@ 0x82
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	401a      	ands	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6899      	ldr	r1, [r3, #8]
 8002d6c:	2384      	movs	r3, #132	@ 0x84
 8002d6e:	021b      	lsls	r3, r3, #8
 8002d70:	400b      	ands	r3, r1
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	2102      	movs	r1, #2
 8002d7a:	400b      	ands	r3, r1
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	2101      	movs	r1, #1
 8002d84:	400b      	ands	r3, r1
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6999      	ldr	r1, [r3, #24]
 8002d8c:	2380      	movs	r3, #128	@ 0x80
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	400b      	ands	r3, r1
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	2138      	movs	r1, #56	@ 0x38
 8002d9a:	400b      	ands	r3, r1
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	2180      	movs	r1, #128	@ 0x80
 8002da4:	400b      	ands	r3, r1
 8002da6:	431a      	orrs	r2, r3
 8002da8:	0011      	movs	r1, r2
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dae:	2380      	movs	r3, #128	@ 0x80
 8002db0:	019b      	lsls	r3, r3, #6
 8002db2:	401a      	ands	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	2204      	movs	r2, #4
 8002dc4:	401a      	ands	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dca:	2110      	movs	r1, #16
 8002dcc:	400b      	ands	r3, r1
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd4:	2108      	movs	r1, #8
 8002dd6:	400b      	ands	r3, r1
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68d9      	ldr	r1, [r3, #12]
 8002dde:	23f0      	movs	r3, #240	@ 0xf0
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	400b      	ands	r3, r1
 8002de4:	431a      	orrs	r2, r3
 8002de6:	0011      	movs	r1, r2
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	2380      	movs	r3, #128	@ 0x80
 8002dec:	015b      	lsls	r3, r3, #5
 8002dee:	401a      	ands	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	225d      	movs	r2, #93	@ 0x5d
 8002e02:	2101      	movs	r1, #1
 8002e04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	0018      	movs	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	b004      	add	sp, #16
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e046      	b.n	8002eb0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2288      	movs	r2, #136	@ 0x88
 8002e26:	589b      	ldr	r3, [r3, r2]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d107      	bne.n	8002e3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2284      	movs	r2, #132	@ 0x84
 8002e30:	2100      	movs	r1, #0
 8002e32:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	0018      	movs	r0, r3
 8002e38:	f7fd fe8c 	bl	8000b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2288      	movs	r2, #136	@ 0x88
 8002e40:	2124      	movs	r1, #36	@ 0x24
 8002e42:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2101      	movs	r1, #1
 8002e50:	438a      	bics	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f000 fa8a 	bl	8003378 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	0018      	movs	r0, r3
 8002e68:	f000 f8cc 	bl	8003004 <UART_SetConfig>
 8002e6c:	0003      	movs	r3, r0
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e01c      	b.n	8002eb0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	490d      	ldr	r1, [pc, #52]	@ (8002eb8 <HAL_UART_Init+0xa8>)
 8002e82:	400a      	ands	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	212a      	movs	r1, #42	@ 0x2a
 8002e92:	438a      	bics	r2, r1
 8002e94:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f000 fb19 	bl	80034e0 <UART_CheckIdleState>
 8002eae:	0003      	movs	r3, r0
}
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b002      	add	sp, #8
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	ffffb7ff 	.word	0xffffb7ff

08002ebc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	@ 0x28
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	1dbb      	adds	r3, r7, #6
 8002eca:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2288      	movs	r2, #136	@ 0x88
 8002ed0:	589b      	ldr	r3, [r3, r2]
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d000      	beq.n	8002ed8 <HAL_UART_Transmit+0x1c>
 8002ed6:	e090      	b.n	8002ffa <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_UART_Transmit+0x2a>
 8002ede:	1dbb      	adds	r3, r7, #6
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e088      	b.n	8002ffc <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	2380      	movs	r3, #128	@ 0x80
 8002ef0:	015b      	lsls	r3, r3, #5
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d109      	bne.n	8002f0a <HAL_UART_Transmit+0x4e>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d105      	bne.n	8002f0a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2201      	movs	r2, #1
 8002f02:	4013      	ands	r3, r2
 8002f04:	d001      	beq.n	8002f0a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e078      	b.n	8002ffc <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2290      	movs	r2, #144	@ 0x90
 8002f0e:	2100      	movs	r1, #0
 8002f10:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2288      	movs	r2, #136	@ 0x88
 8002f16:	2121      	movs	r1, #33	@ 0x21
 8002f18:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f1a:	f7fd ff15 	bl	8000d48 <HAL_GetTick>
 8002f1e:	0003      	movs	r3, r0
 8002f20:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1dba      	adds	r2, r7, #6
 8002f26:	2154      	movs	r1, #84	@ 0x54
 8002f28:	8812      	ldrh	r2, [r2, #0]
 8002f2a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1dba      	adds	r2, r7, #6
 8002f30:	2156      	movs	r1, #86	@ 0x56
 8002f32:	8812      	ldrh	r2, [r2, #0]
 8002f34:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	2380      	movs	r3, #128	@ 0x80
 8002f3c:	015b      	lsls	r3, r3, #5
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d108      	bne.n	8002f54 <HAL_UART_Transmit+0x98>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d104      	bne.n	8002f54 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	61bb      	str	r3, [r7, #24]
 8002f52:	e003      	b.n	8002f5c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f5c:	e030      	b.n	8002fc0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	0013      	movs	r3, r2
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2180      	movs	r1, #128	@ 0x80
 8002f6c:	f000 fb62 	bl	8003634 <UART_WaitOnFlagUntilTimeout>
 8002f70:	1e03      	subs	r3, r0, #0
 8002f72:	d005      	beq.n	8002f80 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2288      	movs	r2, #136	@ 0x88
 8002f78:	2120      	movs	r1, #32
 8002f7a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e03d      	b.n	8002ffc <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10b      	bne.n	8002f9e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	001a      	movs	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	05d2      	lsls	r2, r2, #23
 8002f92:	0dd2      	lsrs	r2, r2, #23
 8002f94:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	3302      	adds	r3, #2
 8002f9a:	61bb      	str	r3, [r7, #24]
 8002f9c:	e007      	b.n	8002fae <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	781a      	ldrb	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	3301      	adds	r3, #1
 8002fac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2256      	movs	r2, #86	@ 0x56
 8002fb2:	5a9b      	ldrh	r3, [r3, r2]
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b299      	uxth	r1, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2256      	movs	r2, #86	@ 0x56
 8002fbe:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2256      	movs	r2, #86	@ 0x56
 8002fc4:	5a9b      	ldrh	r3, [r3, r2]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1c8      	bne.n	8002f5e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	0013      	movs	r3, r2
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2140      	movs	r1, #64	@ 0x40
 8002fda:	f000 fb2b 	bl	8003634 <UART_WaitOnFlagUntilTimeout>
 8002fde:	1e03      	subs	r3, r0, #0
 8002fe0:	d005      	beq.n	8002fee <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2288      	movs	r2, #136	@ 0x88
 8002fe6:	2120      	movs	r1, #32
 8002fe8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e006      	b.n	8002ffc <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2288      	movs	r2, #136	@ 0x88
 8002ff2:	2120      	movs	r1, #32
 8002ff4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e000      	b.n	8002ffc <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002ffa:	2302      	movs	r3, #2
  }
}
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b008      	add	sp, #32
 8003002:	bd80      	pop	{r7, pc}

08003004 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003004:	b5b0      	push	{r4, r5, r7, lr}
 8003006:	b092      	sub	sp, #72	@ 0x48
 8003008:	af00      	add	r7, sp, #0
 800300a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800300c:	231f      	movs	r3, #31
 800300e:	2220      	movs	r2, #32
 8003010:	189b      	adds	r3, r3, r2
 8003012:	19db      	adds	r3, r3, r7
 8003014:	2200      	movs	r2, #0
 8003016:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	431a      	orrs	r2, r3
 8003022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	431a      	orrs	r2, r3
 8003028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	4313      	orrs	r3, r2
 800302e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4ac6      	ldr	r2, [pc, #792]	@ (8003350 <UART_SetConfig+0x34c>)
 8003038:	4013      	ands	r3, r2
 800303a:	0019      	movs	r1, r3
 800303c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003042:	430b      	orrs	r3, r1
 8003044:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	4ac1      	ldr	r2, [pc, #772]	@ (8003354 <UART_SetConfig+0x350>)
 800304e:	4013      	ands	r3, r2
 8003050:	0018      	movs	r0, r3
 8003052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003054:	68d9      	ldr	r1, [r3, #12]
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	0003      	movs	r3, r0
 800305c:	430b      	orrs	r3, r1
 800305e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4abb      	ldr	r2, [pc, #748]	@ (8003358 <UART_SetConfig+0x354>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d009      	beq.n	8003084 <UART_SetConfig+0x80>
 8003070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4ab9      	ldr	r2, [pc, #740]	@ (800335c <UART_SetConfig+0x358>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d004      	beq.n	8003084 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003080:	4313      	orrs	r3, r2
 8003082:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	4ab5      	ldr	r2, [pc, #724]	@ (8003360 <UART_SetConfig+0x35c>)
 800308c:	4013      	ands	r3, r2
 800308e:	0019      	movs	r1, r3
 8003090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003096:	430b      	orrs	r3, r1
 8003098:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a0:	220f      	movs	r2, #15
 80030a2:	4393      	bics	r3, r2
 80030a4:	0018      	movs	r0, r3
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80030aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	0003      	movs	r3, r0
 80030b0:	430b      	orrs	r3, r1
 80030b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4aaa      	ldr	r2, [pc, #680]	@ (8003364 <UART_SetConfig+0x360>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d102      	bne.n	80030c4 <UART_SetConfig+0xc0>
 80030be:	2301      	movs	r3, #1
 80030c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80030c2:	e02b      	b.n	800311c <UART_SetConfig+0x118>
 80030c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4aa7      	ldr	r2, [pc, #668]	@ (8003368 <UART_SetConfig+0x364>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d102      	bne.n	80030d4 <UART_SetConfig+0xd0>
 80030ce:	2302      	movs	r3, #2
 80030d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80030d2:	e023      	b.n	800311c <UART_SetConfig+0x118>
 80030d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4aa4      	ldr	r2, [pc, #656]	@ (800336c <UART_SetConfig+0x368>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d103      	bne.n	80030e6 <UART_SetConfig+0xe2>
 80030de:	2380      	movs	r3, #128	@ 0x80
 80030e0:	025b      	lsls	r3, r3, #9
 80030e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80030e4:	e01a      	b.n	800311c <UART_SetConfig+0x118>
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4aa1      	ldr	r2, [pc, #644]	@ (8003370 <UART_SetConfig+0x36c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d103      	bne.n	80030f8 <UART_SetConfig+0xf4>
 80030f0:	2380      	movs	r3, #128	@ 0x80
 80030f2:	029b      	lsls	r3, r3, #10
 80030f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80030f6:	e011      	b.n	800311c <UART_SetConfig+0x118>
 80030f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a96      	ldr	r2, [pc, #600]	@ (8003358 <UART_SetConfig+0x354>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d102      	bne.n	8003108 <UART_SetConfig+0x104>
 8003102:	2310      	movs	r3, #16
 8003104:	643b      	str	r3, [r7, #64]	@ 0x40
 8003106:	e009      	b.n	800311c <UART_SetConfig+0x118>
 8003108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a93      	ldr	r2, [pc, #588]	@ (800335c <UART_SetConfig+0x358>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d102      	bne.n	8003118 <UART_SetConfig+0x114>
 8003112:	2308      	movs	r3, #8
 8003114:	643b      	str	r3, [r7, #64]	@ 0x40
 8003116:	e001      	b.n	800311c <UART_SetConfig+0x118>
 8003118:	2300      	movs	r3, #0
 800311a:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800311c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a8d      	ldr	r2, [pc, #564]	@ (8003358 <UART_SetConfig+0x354>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d005      	beq.n	8003132 <UART_SetConfig+0x12e>
 8003126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a8c      	ldr	r2, [pc, #560]	@ (800335c <UART_SetConfig+0x358>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d000      	beq.n	8003132 <UART_SetConfig+0x12e>
 8003130:	e06f      	b.n	8003212 <UART_SetConfig+0x20e>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8003132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003134:	0018      	movs	r0, r3
 8003136:	f7ff f8d7 	bl	80022e8 <HAL_RCCEx_GetPeriphCLKFreq>
 800313a:	0003      	movs	r3, r0
 800313c:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 800313e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003140:	2b00      	cmp	r3, #0
 8003142:	d100      	bne.n	8003146 <UART_SetConfig+0x142>
 8003144:	e0ec      	b.n	8003320 <UART_SetConfig+0x31c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003148:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800314a:	4b8a      	ldr	r3, [pc, #552]	@ (8003374 <UART_SetConfig+0x370>)
 800314c:	0052      	lsls	r2, r2, #1
 800314e:	5ad3      	ldrh	r3, [r2, r3]
 8003150:	0019      	movs	r1, r3
 8003152:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003154:	f7fc ffd8 	bl	8000108 <__udivsi3>
 8003158:	0003      	movs	r3, r0
 800315a:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800315c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	0013      	movs	r3, r2
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	189b      	adds	r3, r3, r2
 8003166:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003168:	429a      	cmp	r2, r3
 800316a:	d305      	bcc.n	8003178 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800316c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003172:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003174:	429a      	cmp	r2, r3
 8003176:	d906      	bls.n	8003186 <UART_SetConfig+0x182>
      {
        ret = HAL_ERROR;
 8003178:	231f      	movs	r3, #31
 800317a:	2220      	movs	r2, #32
 800317c:	189b      	adds	r3, r3, r2
 800317e:	19db      	adds	r3, r3, r7
 8003180:	2201      	movs	r2, #1
 8003182:	701a      	strb	r2, [r3, #0]
 8003184:	e044      	b.n	8003210 <UART_SetConfig+0x20c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003188:	61bb      	str	r3, [r7, #24]
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
 800318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003190:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003192:	4b78      	ldr	r3, [pc, #480]	@ (8003374 <UART_SetConfig+0x370>)
 8003194:	0052      	lsls	r2, r2, #1
 8003196:	5ad3      	ldrh	r3, [r2, r3]
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	69b8      	ldr	r0, [r7, #24]
 80031a4:	69f9      	ldr	r1, [r7, #28]
 80031a6:	f7fd f925 	bl	80003f4 <__aeabi_uldivmod>
 80031aa:	0002      	movs	r2, r0
 80031ac:	000b      	movs	r3, r1
 80031ae:	0e11      	lsrs	r1, r2, #24
 80031b0:	021d      	lsls	r5, r3, #8
 80031b2:	430d      	orrs	r5, r1
 80031b4:	0214      	lsls	r4, r2, #8
 80031b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	085b      	lsrs	r3, r3, #1
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	68b8      	ldr	r0, [r7, #8]
 80031c4:	68f9      	ldr	r1, [r7, #12]
 80031c6:	1900      	adds	r0, r0, r4
 80031c8:	4169      	adcs	r1, r5
 80031ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	603b      	str	r3, [r7, #0]
 80031d0:	2300      	movs	r3, #0
 80031d2:	607b      	str	r3, [r7, #4]
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f7fd f90c 	bl	80003f4 <__aeabi_uldivmod>
 80031dc:	0002      	movs	r2, r0
 80031de:	000b      	movs	r3, r1
 80031e0:	0013      	movs	r3, r2
 80031e2:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031e6:	23c0      	movs	r3, #192	@ 0xc0
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d309      	bcc.n	8003202 <UART_SetConfig+0x1fe>
 80031ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031f0:	2380      	movs	r3, #128	@ 0x80
 80031f2:	035b      	lsls	r3, r3, #13
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d204      	bcs.n	8003202 <UART_SetConfig+0x1fe>
        {
          huart->Instance->BRR = usartdiv;
 80031f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031fe:	60da      	str	r2, [r3, #12]
 8003200:	e006      	b.n	8003210 <UART_SetConfig+0x20c>
        }
        else
        {
          ret = HAL_ERROR;
 8003202:	231f      	movs	r3, #31
 8003204:	2220      	movs	r2, #32
 8003206:	189b      	adds	r3, r3, r2
 8003208:	19db      	adds	r3, r3, r7
 800320a:	2201      	movs	r2, #1
 800320c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800320e:	e087      	b.n	8003320 <UART_SetConfig+0x31c>
 8003210:	e086      	b.n	8003320 <UART_SetConfig+0x31c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003214:	69da      	ldr	r2, [r3, #28]
 8003216:	2380      	movs	r3, #128	@ 0x80
 8003218:	021b      	lsls	r3, r3, #8
 800321a:	429a      	cmp	r2, r3
 800321c:	d14c      	bne.n	80032b8 <UART_SetConfig+0x2b4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800321e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003220:	0018      	movs	r0, r3
 8003222:	f7ff f861 	bl	80022e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003226:	0003      	movs	r3, r0
 8003228:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800322a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800322c:	2b00      	cmp	r3, #0
 800322e:	d100      	bne.n	8003232 <UART_SetConfig+0x22e>
 8003230:	e076      	b.n	8003320 <UART_SetConfig+0x31c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003236:	4b4f      	ldr	r3, [pc, #316]	@ (8003374 <UART_SetConfig+0x370>)
 8003238:	0052      	lsls	r2, r2, #1
 800323a:	5ad3      	ldrh	r3, [r2, r3]
 800323c:	0019      	movs	r1, r3
 800323e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003240:	f7fc ff62 	bl	8000108 <__udivsi3>
 8003244:	0003      	movs	r3, r0
 8003246:	005a      	lsls	r2, r3, #1
 8003248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	085b      	lsrs	r3, r3, #1
 800324e:	18d2      	adds	r2, r2, r3
 8003250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	0019      	movs	r1, r3
 8003256:	0010      	movs	r0, r2
 8003258:	f7fc ff56 	bl	8000108 <__udivsi3>
 800325c:	0003      	movs	r3, r0
 800325e:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003262:	2b0f      	cmp	r3, #15
 8003264:	d921      	bls.n	80032aa <UART_SetConfig+0x2a6>
 8003266:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003268:	2380      	movs	r3, #128	@ 0x80
 800326a:	025b      	lsls	r3, r3, #9
 800326c:	429a      	cmp	r2, r3
 800326e:	d21c      	bcs.n	80032aa <UART_SetConfig+0x2a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003272:	b29a      	uxth	r2, r3
 8003274:	2012      	movs	r0, #18
 8003276:	2420      	movs	r4, #32
 8003278:	1903      	adds	r3, r0, r4
 800327a:	19db      	adds	r3, r3, r7
 800327c:	210f      	movs	r1, #15
 800327e:	438a      	bics	r2, r1
 8003280:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003284:	085b      	lsrs	r3, r3, #1
 8003286:	b29b      	uxth	r3, r3
 8003288:	2207      	movs	r2, #7
 800328a:	4013      	ands	r3, r2
 800328c:	b299      	uxth	r1, r3
 800328e:	1903      	adds	r3, r0, r4
 8003290:	19db      	adds	r3, r3, r7
 8003292:	1902      	adds	r2, r0, r4
 8003294:	19d2      	adds	r2, r2, r7
 8003296:	8812      	ldrh	r2, [r2, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800329c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	1902      	adds	r2, r0, r4
 80032a2:	19d2      	adds	r2, r2, r7
 80032a4:	8812      	ldrh	r2, [r2, #0]
 80032a6:	60da      	str	r2, [r3, #12]
 80032a8:	e03a      	b.n	8003320 <UART_SetConfig+0x31c>
      }
      else
      {
        ret = HAL_ERROR;
 80032aa:	231f      	movs	r3, #31
 80032ac:	2220      	movs	r2, #32
 80032ae:	189b      	adds	r3, r3, r2
 80032b0:	19db      	adds	r3, r3, r7
 80032b2:	2201      	movs	r2, #1
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	e033      	b.n	8003320 <UART_SetConfig+0x31c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80032b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ba:	0018      	movs	r0, r3
 80032bc:	f7ff f814 	bl	80022e8 <HAL_RCCEx_GetPeriphCLKFreq>
 80032c0:	0003      	movs	r3, r0
 80032c2:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 80032c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d02a      	beq.n	8003320 <UART_SetConfig+0x31c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032ce:	4b29      	ldr	r3, [pc, #164]	@ (8003374 <UART_SetConfig+0x370>)
 80032d0:	0052      	lsls	r2, r2, #1
 80032d2:	5ad3      	ldrh	r3, [r2, r3]
 80032d4:	0019      	movs	r1, r3
 80032d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80032d8:	f7fc ff16 	bl	8000108 <__udivsi3>
 80032dc:	0003      	movs	r3, r0
 80032de:	001a      	movs	r2, r3
 80032e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	18d2      	adds	r2, r2, r3
 80032e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	0019      	movs	r1, r3
 80032ee:	0010      	movs	r0, r2
 80032f0:	f7fc ff0a 	bl	8000108 <__udivsi3>
 80032f4:	0003      	movs	r3, r0
 80032f6:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032fa:	2b0f      	cmp	r3, #15
 80032fc:	d90a      	bls.n	8003314 <UART_SetConfig+0x310>
 80032fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003300:	2380      	movs	r3, #128	@ 0x80
 8003302:	025b      	lsls	r3, r3, #9
 8003304:	429a      	cmp	r2, r3
 8003306:	d205      	bcs.n	8003314 <UART_SetConfig+0x310>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800330a:	b29a      	uxth	r2, r3
 800330c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	60da      	str	r2, [r3, #12]
 8003312:	e005      	b.n	8003320 <UART_SetConfig+0x31c>
      }
      else
      {
        ret = HAL_ERROR;
 8003314:	231f      	movs	r3, #31
 8003316:	2220      	movs	r2, #32
 8003318:	189b      	adds	r3, r3, r2
 800331a:	19db      	adds	r3, r3, r7
 800331c:	2201      	movs	r2, #1
 800331e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003322:	226a      	movs	r2, #106	@ 0x6a
 8003324:	2101      	movs	r1, #1
 8003326:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332a:	2268      	movs	r2, #104	@ 0x68
 800332c:	2101      	movs	r1, #1
 800332e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003332:	2200      	movs	r2, #0
 8003334:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003338:	2200      	movs	r2, #0
 800333a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800333c:	231f      	movs	r3, #31
 800333e:	2220      	movs	r2, #32
 8003340:	189b      	adds	r3, r3, r2
 8003342:	19db      	adds	r3, r3, r7
 8003344:	781b      	ldrb	r3, [r3, #0]
}
 8003346:	0018      	movs	r0, r3
 8003348:	46bd      	mov	sp, r7
 800334a:	b012      	add	sp, #72	@ 0x48
 800334c:	bdb0      	pop	{r4, r5, r7, pc}
 800334e:	46c0      	nop			@ (mov r8, r8)
 8003350:	cfff69f3 	.word	0xcfff69f3
 8003354:	ffffcfff 	.word	0xffffcfff
 8003358:	40008000 	.word	0x40008000
 800335c:	40008400 	.word	0x40008400
 8003360:	11fff4ff 	.word	0x11fff4ff
 8003364:	40013800 	.word	0x40013800
 8003368:	40004400 	.word	0x40004400
 800336c:	40004800 	.word	0x40004800
 8003370:	40004c00 	.word	0x40004c00
 8003374:	08003b70 	.word	0x08003b70

08003378 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003384:	2208      	movs	r2, #8
 8003386:	4013      	ands	r3, r2
 8003388:	d00b      	beq.n	80033a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	4a4a      	ldr	r2, [pc, #296]	@ (80034bc <UART_AdvFeatureConfig+0x144>)
 8003392:	4013      	ands	r3, r2
 8003394:	0019      	movs	r1, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a6:	2201      	movs	r2, #1
 80033a8:	4013      	ands	r3, r2
 80033aa:	d00b      	beq.n	80033c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4a43      	ldr	r2, [pc, #268]	@ (80034c0 <UART_AdvFeatureConfig+0x148>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	0019      	movs	r1, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c8:	2202      	movs	r2, #2
 80033ca:	4013      	ands	r3, r2
 80033cc:	d00b      	beq.n	80033e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	4a3b      	ldr	r2, [pc, #236]	@ (80034c4 <UART_AdvFeatureConfig+0x14c>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	0019      	movs	r1, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ea:	2204      	movs	r2, #4
 80033ec:	4013      	ands	r3, r2
 80033ee:	d00b      	beq.n	8003408 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4a34      	ldr	r2, [pc, #208]	@ (80034c8 <UART_AdvFeatureConfig+0x150>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	0019      	movs	r1, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340c:	2210      	movs	r2, #16
 800340e:	4013      	ands	r3, r2
 8003410:	d00b      	beq.n	800342a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	4a2c      	ldr	r2, [pc, #176]	@ (80034cc <UART_AdvFeatureConfig+0x154>)
 800341a:	4013      	ands	r3, r2
 800341c:	0019      	movs	r1, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342e:	2220      	movs	r2, #32
 8003430:	4013      	ands	r3, r2
 8003432:	d00b      	beq.n	800344c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	4a25      	ldr	r2, [pc, #148]	@ (80034d0 <UART_AdvFeatureConfig+0x158>)
 800343c:	4013      	ands	r3, r2
 800343e:	0019      	movs	r1, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003450:	2240      	movs	r2, #64	@ 0x40
 8003452:	4013      	ands	r3, r2
 8003454:	d01d      	beq.n	8003492 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4a1d      	ldr	r2, [pc, #116]	@ (80034d4 <UART_AdvFeatureConfig+0x15c>)
 800345e:	4013      	ands	r3, r2
 8003460:	0019      	movs	r1, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003472:	2380      	movs	r3, #128	@ 0x80
 8003474:	035b      	lsls	r3, r3, #13
 8003476:	429a      	cmp	r2, r3
 8003478:	d10b      	bne.n	8003492 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	4a15      	ldr	r2, [pc, #84]	@ (80034d8 <UART_AdvFeatureConfig+0x160>)
 8003482:	4013      	ands	r3, r2
 8003484:	0019      	movs	r1, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003496:	2280      	movs	r2, #128	@ 0x80
 8003498:	4013      	ands	r3, r2
 800349a:	d00b      	beq.n	80034b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	4a0e      	ldr	r2, [pc, #56]	@ (80034dc <UART_AdvFeatureConfig+0x164>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	0019      	movs	r1, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	605a      	str	r2, [r3, #4]
  }
}
 80034b4:	46c0      	nop			@ (mov r8, r8)
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b002      	add	sp, #8
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	ffff7fff 	.word	0xffff7fff
 80034c0:	fffdffff 	.word	0xfffdffff
 80034c4:	fffeffff 	.word	0xfffeffff
 80034c8:	fffbffff 	.word	0xfffbffff
 80034cc:	ffffefff 	.word	0xffffefff
 80034d0:	ffffdfff 	.word	0xffffdfff
 80034d4:	ffefffff 	.word	0xffefffff
 80034d8:	ff9fffff 	.word	0xff9fffff
 80034dc:	fff7ffff 	.word	0xfff7ffff

080034e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b092      	sub	sp, #72	@ 0x48
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2290      	movs	r2, #144	@ 0x90
 80034ec:	2100      	movs	r1, #0
 80034ee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034f0:	f7fd fc2a 	bl	8000d48 <HAL_GetTick>
 80034f4:	0003      	movs	r3, r0
 80034f6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2208      	movs	r2, #8
 8003500:	4013      	ands	r3, r2
 8003502:	2b08      	cmp	r3, #8
 8003504:	d12d      	bne.n	8003562 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003508:	2280      	movs	r2, #128	@ 0x80
 800350a:	0391      	lsls	r1, r2, #14
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	4a47      	ldr	r2, [pc, #284]	@ (800362c <UART_CheckIdleState+0x14c>)
 8003510:	9200      	str	r2, [sp, #0]
 8003512:	2200      	movs	r2, #0
 8003514:	f000 f88e 	bl	8003634 <UART_WaitOnFlagUntilTimeout>
 8003518:	1e03      	subs	r3, r0, #0
 800351a:	d022      	beq.n	8003562 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800351c:	f3ef 8310 	mrs	r3, PRIMASK
 8003520:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003524:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003526:	2301      	movs	r3, #1
 8003528:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800352a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352c:	f383 8810 	msr	PRIMASK, r3
}
 8003530:	46c0      	nop			@ (mov r8, r8)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2180      	movs	r1, #128	@ 0x80
 800353e:	438a      	bics	r2, r1
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003544:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003548:	f383 8810 	msr	PRIMASK, r3
}
 800354c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2288      	movs	r2, #136	@ 0x88
 8003552:	2120      	movs	r1, #32
 8003554:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2284      	movs	r2, #132	@ 0x84
 800355a:	2100      	movs	r1, #0
 800355c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e060      	b.n	8003624 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2204      	movs	r2, #4
 800356a:	4013      	ands	r3, r2
 800356c:	2b04      	cmp	r3, #4
 800356e:	d146      	bne.n	80035fe <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003572:	2280      	movs	r2, #128	@ 0x80
 8003574:	03d1      	lsls	r1, r2, #15
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	4a2c      	ldr	r2, [pc, #176]	@ (800362c <UART_CheckIdleState+0x14c>)
 800357a:	9200      	str	r2, [sp, #0]
 800357c:	2200      	movs	r2, #0
 800357e:	f000 f859 	bl	8003634 <UART_WaitOnFlagUntilTimeout>
 8003582:	1e03      	subs	r3, r0, #0
 8003584:	d03b      	beq.n	80035fe <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003586:	f3ef 8310 	mrs	r3, PRIMASK
 800358a:	60fb      	str	r3, [r7, #12]
  return(result);
 800358c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800358e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003590:	2301      	movs	r3, #1
 8003592:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f383 8810 	msr	PRIMASK, r3
}
 800359a:	46c0      	nop			@ (mov r8, r8)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4922      	ldr	r1, [pc, #136]	@ (8003630 <UART_CheckIdleState+0x150>)
 80035a8:	400a      	ands	r2, r1
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f383 8810 	msr	PRIMASK, r3
}
 80035b6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80035b8:	f3ef 8310 	mrs	r3, PRIMASK
 80035bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80035be:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80035c2:	2301      	movs	r3, #1
 80035c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	f383 8810 	msr	PRIMASK, r3
}
 80035cc:	46c0      	nop			@ (mov r8, r8)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2101      	movs	r1, #1
 80035da:	438a      	bics	r2, r1
 80035dc:	609a      	str	r2, [r3, #8]
 80035de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	f383 8810 	msr	PRIMASK, r3
}
 80035e8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	228c      	movs	r2, #140	@ 0x8c
 80035ee:	2120      	movs	r1, #32
 80035f0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2284      	movs	r2, #132	@ 0x84
 80035f6:	2100      	movs	r1, #0
 80035f8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e012      	b.n	8003624 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2288      	movs	r2, #136	@ 0x88
 8003602:	2120      	movs	r1, #32
 8003604:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	228c      	movs	r2, #140	@ 0x8c
 800360a:	2120      	movs	r1, #32
 800360c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2284      	movs	r2, #132	@ 0x84
 800361e:	2100      	movs	r1, #0
 8003620:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	0018      	movs	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	b010      	add	sp, #64	@ 0x40
 800362a:	bd80      	pop	{r7, pc}
 800362c:	01ffffff 	.word	0x01ffffff
 8003630:	fffffedf 	.word	0xfffffedf

08003634 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	1dfb      	adds	r3, r7, #7
 8003642:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003644:	e051      	b.n	80036ea <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	3301      	adds	r3, #1
 800364a:	d04e      	beq.n	80036ea <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364c:	f7fd fb7c 	bl	8000d48 <HAL_GetTick>
 8003650:	0002      	movs	r2, r0
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	429a      	cmp	r2, r3
 800365a:	d302      	bcc.n	8003662 <UART_WaitOnFlagUntilTimeout+0x2e>
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e051      	b.n	800370a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2204      	movs	r2, #4
 800366e:	4013      	ands	r3, r2
 8003670:	d03b      	beq.n	80036ea <UART_WaitOnFlagUntilTimeout+0xb6>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b80      	cmp	r3, #128	@ 0x80
 8003676:	d038      	beq.n	80036ea <UART_WaitOnFlagUntilTimeout+0xb6>
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2b40      	cmp	r3, #64	@ 0x40
 800367c:	d035      	beq.n	80036ea <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	2208      	movs	r2, #8
 8003686:	4013      	ands	r3, r2
 8003688:	2b08      	cmp	r3, #8
 800368a:	d111      	bne.n	80036b0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2208      	movs	r2, #8
 8003692:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	0018      	movs	r0, r3
 8003698:	f000 f83c 	bl	8003714 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2290      	movs	r2, #144	@ 0x90
 80036a0:	2108      	movs	r1, #8
 80036a2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2284      	movs	r2, #132	@ 0x84
 80036a8:	2100      	movs	r1, #0
 80036aa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e02c      	b.n	800370a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69da      	ldr	r2, [r3, #28]
 80036b6:	2380      	movs	r3, #128	@ 0x80
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	401a      	ands	r2, r3
 80036bc:	2380      	movs	r3, #128	@ 0x80
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d112      	bne.n	80036ea <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2280      	movs	r2, #128	@ 0x80
 80036ca:	0112      	lsls	r2, r2, #4
 80036cc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	0018      	movs	r0, r3
 80036d2:	f000 f81f 	bl	8003714 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2290      	movs	r2, #144	@ 0x90
 80036da:	2120      	movs	r1, #32
 80036dc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2284      	movs	r2, #132	@ 0x84
 80036e2:	2100      	movs	r1, #0
 80036e4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e00f      	b.n	800370a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	4013      	ands	r3, r2
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	425a      	negs	r2, r3
 80036fa:	4153      	adcs	r3, r2
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	001a      	movs	r2, r3
 8003700:	1dfb      	adds	r3, r7, #7
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d09e      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	0018      	movs	r0, r3
 800370c:	46bd      	mov	sp, r7
 800370e:	b004      	add	sp, #16
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08e      	sub	sp, #56	@ 0x38
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800371c:	f3ef 8310 	mrs	r3, PRIMASK
 8003720:	617b      	str	r3, [r7, #20]
  return(result);
 8003722:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003724:	637b      	str	r3, [r7, #52]	@ 0x34
 8003726:	2301      	movs	r3, #1
 8003728:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	f383 8810 	msr	PRIMASK, r3
}
 8003730:	46c0      	nop			@ (mov r8, r8)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4926      	ldr	r1, [pc, #152]	@ (80037d8 <UART_EndRxTransfer+0xc4>)
 800373e:	400a      	ands	r2, r1
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003744:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f383 8810 	msr	PRIMASK, r3
}
 800374c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800374e:	f3ef 8310 	mrs	r3, PRIMASK
 8003752:	623b      	str	r3, [r7, #32]
  return(result);
 8003754:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003756:	633b      	str	r3, [r7, #48]	@ 0x30
 8003758:	2301      	movs	r3, #1
 800375a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800375c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375e:	f383 8810 	msr	PRIMASK, r3
}
 8003762:	46c0      	nop			@ (mov r8, r8)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	491b      	ldr	r1, [pc, #108]	@ (80037dc <UART_EndRxTransfer+0xc8>)
 8003770:	400a      	ands	r2, r1
 8003772:	609a      	str	r2, [r3, #8]
 8003774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003776:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377a:	f383 8810 	msr	PRIMASK, r3
}
 800377e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003784:	2b01      	cmp	r3, #1
 8003786:	d118      	bne.n	80037ba <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003788:	f3ef 8310 	mrs	r3, PRIMASK
 800378c:	60bb      	str	r3, [r7, #8]
  return(result);
 800378e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003790:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003792:	2301      	movs	r3, #1
 8003794:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f383 8810 	msr	PRIMASK, r3
}
 800379c:	46c0      	nop			@ (mov r8, r8)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2110      	movs	r1, #16
 80037aa:	438a      	bics	r2, r1
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f383 8810 	msr	PRIMASK, r3
}
 80037b8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	228c      	movs	r2, #140	@ 0x8c
 80037be:	2120      	movs	r1, #32
 80037c0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b00e      	add	sp, #56	@ 0x38
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	fffffedf 	.word	0xfffffedf
 80037dc:	effffffe 	.word	0xeffffffe

080037e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2284      	movs	r2, #132	@ 0x84
 80037ec:	5c9b      	ldrb	r3, [r3, r2]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80037f2:	2302      	movs	r3, #2
 80037f4:	e027      	b.n	8003846 <HAL_UARTEx_DisableFifoMode+0x66>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2284      	movs	r2, #132	@ 0x84
 80037fa:	2101      	movs	r1, #1
 80037fc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2288      	movs	r2, #136	@ 0x88
 8003802:	2124      	movs	r1, #36	@ 0x24
 8003804:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2101      	movs	r1, #1
 800381a:	438a      	bics	r2, r1
 800381c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4a0b      	ldr	r2, [pc, #44]	@ (8003850 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003822:	4013      	ands	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2288      	movs	r2, #136	@ 0x88
 8003838:	2120      	movs	r1, #32
 800383a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2284      	movs	r2, #132	@ 0x84
 8003840:	2100      	movs	r1, #0
 8003842:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	0018      	movs	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	b004      	add	sp, #16
 800384c:	bd80      	pop	{r7, pc}
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	dfffffff 	.word	0xdfffffff

08003854 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2284      	movs	r2, #132	@ 0x84
 8003862:	5c9b      	ldrb	r3, [r3, r2]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003868:	2302      	movs	r3, #2
 800386a:	e02e      	b.n	80038ca <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2284      	movs	r2, #132	@ 0x84
 8003870:	2101      	movs	r1, #1
 8003872:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2288      	movs	r2, #136	@ 0x88
 8003878:	2124      	movs	r1, #36	@ 0x24
 800387a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2101      	movs	r1, #1
 8003890:	438a      	bics	r2, r1
 8003892:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	08d9      	lsrs	r1, r3, #3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	0018      	movs	r0, r3
 80038ac:	f000 f854 	bl	8003958 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2288      	movs	r2, #136	@ 0x88
 80038bc:	2120      	movs	r1, #32
 80038be:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2284      	movs	r2, #132	@ 0x84
 80038c4:	2100      	movs	r1, #0
 80038c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	0018      	movs	r0, r3
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b004      	add	sp, #16
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2284      	movs	r2, #132	@ 0x84
 80038e2:	5c9b      	ldrb	r3, [r3, r2]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e02f      	b.n	800394c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2284      	movs	r2, #132	@ 0x84
 80038f0:	2101      	movs	r1, #1
 80038f2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2288      	movs	r2, #136	@ 0x88
 80038f8:	2124      	movs	r1, #36	@ 0x24
 80038fa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2101      	movs	r1, #1
 8003910:	438a      	bics	r2, r1
 8003912:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	4a0e      	ldr	r2, [pc, #56]	@ (8003954 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800391c:	4013      	ands	r3, r2
 800391e:	0019      	movs	r1, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	0018      	movs	r0, r3
 800392e:	f000 f813 	bl	8003958 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2288      	movs	r2, #136	@ 0x88
 800393e:	2120      	movs	r1, #32
 8003940:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2284      	movs	r2, #132	@ 0x84
 8003946:	2100      	movs	r1, #0
 8003948:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	0018      	movs	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	b004      	add	sp, #16
 8003952:	bd80      	pop	{r7, pc}
 8003954:	f1ffffff 	.word	0xf1ffffff

08003958 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003964:	2b00      	cmp	r3, #0
 8003966:	d108      	bne.n	800397a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	226a      	movs	r2, #106	@ 0x6a
 800396c:	2101      	movs	r1, #1
 800396e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2268      	movs	r2, #104	@ 0x68
 8003974:	2101      	movs	r1, #1
 8003976:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003978:	e043      	b.n	8003a02 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800397a:	260f      	movs	r6, #15
 800397c:	19bb      	adds	r3, r7, r6
 800397e:	2208      	movs	r2, #8
 8003980:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003982:	200e      	movs	r0, #14
 8003984:	183b      	adds	r3, r7, r0
 8003986:	2208      	movs	r2, #8
 8003988:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	0e5b      	lsrs	r3, r3, #25
 8003992:	b2da      	uxtb	r2, r3
 8003994:	240d      	movs	r4, #13
 8003996:	193b      	adds	r3, r7, r4
 8003998:	2107      	movs	r1, #7
 800399a:	400a      	ands	r2, r1
 800399c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	0f5b      	lsrs	r3, r3, #29
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	250c      	movs	r5, #12
 80039aa:	197b      	adds	r3, r7, r5
 80039ac:	2107      	movs	r1, #7
 80039ae:	400a      	ands	r2, r1
 80039b0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039b2:	183b      	adds	r3, r7, r0
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	197a      	adds	r2, r7, r5
 80039b8:	7812      	ldrb	r2, [r2, #0]
 80039ba:	4914      	ldr	r1, [pc, #80]	@ (8003a0c <UARTEx_SetNbDataToProcess+0xb4>)
 80039bc:	5c8a      	ldrb	r2, [r1, r2]
 80039be:	435a      	muls	r2, r3
 80039c0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80039c2:	197b      	adds	r3, r7, r5
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	4a12      	ldr	r2, [pc, #72]	@ (8003a10 <UARTEx_SetNbDataToProcess+0xb8>)
 80039c8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039ca:	0019      	movs	r1, r3
 80039cc:	f7fc fc26 	bl	800021c <__divsi3>
 80039d0:	0003      	movs	r3, r0
 80039d2:	b299      	uxth	r1, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	226a      	movs	r2, #106	@ 0x6a
 80039d8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80039da:	19bb      	adds	r3, r7, r6
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	193a      	adds	r2, r7, r4
 80039e0:	7812      	ldrb	r2, [r2, #0]
 80039e2:	490a      	ldr	r1, [pc, #40]	@ (8003a0c <UARTEx_SetNbDataToProcess+0xb4>)
 80039e4:	5c8a      	ldrb	r2, [r1, r2]
 80039e6:	435a      	muls	r2, r3
 80039e8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80039ea:	193b      	adds	r3, r7, r4
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	4a08      	ldr	r2, [pc, #32]	@ (8003a10 <UARTEx_SetNbDataToProcess+0xb8>)
 80039f0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80039f2:	0019      	movs	r1, r3
 80039f4:	f7fc fc12 	bl	800021c <__divsi3>
 80039f8:	0003      	movs	r3, r0
 80039fa:	b299      	uxth	r1, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2268      	movs	r2, #104	@ 0x68
 8003a00:	5299      	strh	r1, [r3, r2]
}
 8003a02:	46c0      	nop			@ (mov r8, r8)
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b005      	add	sp, #20
 8003a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a0a:	46c0      	nop			@ (mov r8, r8)
 8003a0c:	08003b88 	.word	0x08003b88
 8003a10:	08003b90 	.word	0x08003b90

08003a14 <memset>:
 8003a14:	0003      	movs	r3, r0
 8003a16:	1882      	adds	r2, r0, r2
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d100      	bne.n	8003a1e <memset+0xa>
 8003a1c:	4770      	bx	lr
 8003a1e:	7019      	strb	r1, [r3, #0]
 8003a20:	3301      	adds	r3, #1
 8003a22:	e7f9      	b.n	8003a18 <memset+0x4>

08003a24 <__libc_init_array>:
 8003a24:	b570      	push	{r4, r5, r6, lr}
 8003a26:	2600      	movs	r6, #0
 8003a28:	4c0c      	ldr	r4, [pc, #48]	@ (8003a5c <__libc_init_array+0x38>)
 8003a2a:	4d0d      	ldr	r5, [pc, #52]	@ (8003a60 <__libc_init_array+0x3c>)
 8003a2c:	1b64      	subs	r4, r4, r5
 8003a2e:	10a4      	asrs	r4, r4, #2
 8003a30:	42a6      	cmp	r6, r4
 8003a32:	d109      	bne.n	8003a48 <__libc_init_array+0x24>
 8003a34:	2600      	movs	r6, #0
 8003a36:	f000 f819 	bl	8003a6c <_init>
 8003a3a:	4c0a      	ldr	r4, [pc, #40]	@ (8003a64 <__libc_init_array+0x40>)
 8003a3c:	4d0a      	ldr	r5, [pc, #40]	@ (8003a68 <__libc_init_array+0x44>)
 8003a3e:	1b64      	subs	r4, r4, r5
 8003a40:	10a4      	asrs	r4, r4, #2
 8003a42:	42a6      	cmp	r6, r4
 8003a44:	d105      	bne.n	8003a52 <__libc_init_array+0x2e>
 8003a46:	bd70      	pop	{r4, r5, r6, pc}
 8003a48:	00b3      	lsls	r3, r6, #2
 8003a4a:	58eb      	ldr	r3, [r5, r3]
 8003a4c:	4798      	blx	r3
 8003a4e:	3601      	adds	r6, #1
 8003a50:	e7ee      	b.n	8003a30 <__libc_init_array+0xc>
 8003a52:	00b3      	lsls	r3, r6, #2
 8003a54:	58eb      	ldr	r3, [r5, r3]
 8003a56:	4798      	blx	r3
 8003a58:	3601      	adds	r6, #1
 8003a5a:	e7f2      	b.n	8003a42 <__libc_init_array+0x1e>
 8003a5c:	08003ba0 	.word	0x08003ba0
 8003a60:	08003ba0 	.word	0x08003ba0
 8003a64:	08003ba4 	.word	0x08003ba4
 8003a68:	08003ba0 	.word	0x08003ba0

08003a6c <_init>:
 8003a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6e:	46c0      	nop			@ (mov r8, r8)
 8003a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a72:	bc08      	pop	{r3}
 8003a74:	469e      	mov	lr, r3
 8003a76:	4770      	bx	lr

08003a78 <_fini>:
 8003a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7a:	46c0      	nop			@ (mov r8, r8)
 8003a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a7e:	bc08      	pop	{r3}
 8003a80:	469e      	mov	lr, r3
 8003a82:	4770      	bx	lr
